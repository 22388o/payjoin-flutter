// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.31.

// Section: imports

use super::*;
use crate::api::receive::*;
use crate::api::send::*;
use flutter_rust_bridge::for_generated::byteorder::{NativeEndian, ReadBytesExt, WriteBytesExt};
use flutter_rust_bridge::for_generated::transform_result_dco;
use flutter_rust_bridge::{Handler, IntoIntoDart};

// Section: boilerplate

flutter_rust_bridge::frb_generated_boilerplate_io!();

// Section: dart2rust

impl CstDecode<flutter_rust_bridge::DartOpaque> for *const std::ffi::c_void {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> flutter_rust_bridge::DartOpaque {
        unsafe { flutter_rust_bridge::for_generated::cst_decode_dart_opaque(self as _) }
    }
}
impl CstDecode<std::collections::HashMap<String, String>>
    for *mut wire_cst_list_record_string_string
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> std::collections::HashMap<String, String> {
        let vec: Vec<(String, String)> = self.cst_decode();
        vec.into_iter().collect()
    }
}
impl CstDecode<std::collections::HashMap<u64, crate::utils::types::OutPoint>>
    for *mut wire_cst_list_record_u_64_out_point
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> std::collections::HashMap<u64, crate::utils::types::OutPoint> {
        let vec: Vec<(u64, crate::utils::types::OutPoint)> = self.cst_decode();
        vec.into_iter().collect()
    }
}
impl CstDecode<RustOpaqueNom<Arc<payjoin_ffi::receive::v1::MaybeInputsOwned>>> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> RustOpaqueNom<Arc<payjoin_ffi::receive::v1::MaybeInputsOwned>> {
        unsafe { decode_rust_opaque_nom(self as _) }
    }
}
impl CstDecode<RustOpaqueNom<Arc<payjoin_ffi::receive::v1::MaybeInputsSeen>>> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> RustOpaqueNom<Arc<payjoin_ffi::receive::v1::MaybeInputsSeen>> {
        unsafe { decode_rust_opaque_nom(self as _) }
    }
}
impl CstDecode<RustOpaqueNom<Arc<payjoin_ffi::receive::v1::MaybeMixedInputScripts>>> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> RustOpaqueNom<Arc<payjoin_ffi::receive::v1::MaybeMixedInputScripts>> {
        unsafe { decode_rust_opaque_nom(self as _) }
    }
}
impl CstDecode<RustOpaqueNom<Arc<payjoin_ffi::receive::v1::OutputsUnknown>>> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> RustOpaqueNom<Arc<payjoin_ffi::receive::v1::OutputsUnknown>> {
        unsafe { decode_rust_opaque_nom(self as _) }
    }
}
impl CstDecode<RustOpaqueNom<Arc<payjoin_ffi::receive::v1::PayjoinProposal>>> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> RustOpaqueNom<Arc<payjoin_ffi::receive::v1::PayjoinProposal>> {
        unsafe { decode_rust_opaque_nom(self as _) }
    }
}
impl CstDecode<RustOpaqueNom<Arc<payjoin_ffi::receive::v1::ProvisionalProposal>>> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> RustOpaqueNom<Arc<payjoin_ffi::receive::v1::ProvisionalProposal>> {
        unsafe { decode_rust_opaque_nom(self as _) }
    }
}
impl CstDecode<RustOpaqueNom<Arc<payjoin_ffi::receive::v2::Enrolled>>> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> RustOpaqueNom<Arc<payjoin_ffi::receive::v2::Enrolled>> {
        unsafe { decode_rust_opaque_nom(self as _) }
    }
}
impl CstDecode<RustOpaqueNom<Arc<payjoin_ffi::receive::v2::V2MaybeInputsOwned>>> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> RustOpaqueNom<Arc<payjoin_ffi::receive::v2::V2MaybeInputsOwned>> {
        unsafe { decode_rust_opaque_nom(self as _) }
    }
}
impl CstDecode<RustOpaqueNom<Arc<payjoin_ffi::receive::v2::V2MaybeInputsSeen>>> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> RustOpaqueNom<Arc<payjoin_ffi::receive::v2::V2MaybeInputsSeen>> {
        unsafe { decode_rust_opaque_nom(self as _) }
    }
}
impl CstDecode<RustOpaqueNom<Arc<payjoin_ffi::receive::v2::V2MaybeMixedInputScripts>>> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> RustOpaqueNom<Arc<payjoin_ffi::receive::v2::V2MaybeMixedInputScripts>> {
        unsafe { decode_rust_opaque_nom(self as _) }
    }
}
impl CstDecode<RustOpaqueNom<Arc<payjoin_ffi::receive::v2::V2OutputsUnknown>>> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> RustOpaqueNom<Arc<payjoin_ffi::receive::v2::V2OutputsUnknown>> {
        unsafe { decode_rust_opaque_nom(self as _) }
    }
}
impl CstDecode<RustOpaqueNom<Arc<payjoin_ffi::receive::v2::V2PayjoinProposal>>> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> RustOpaqueNom<Arc<payjoin_ffi::receive::v2::V2PayjoinProposal>> {
        unsafe { decode_rust_opaque_nom(self as _) }
    }
}
impl CstDecode<RustOpaqueNom<Arc<payjoin_ffi::receive::v2::V2ProvisionalProposal>>> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> RustOpaqueNom<Arc<payjoin_ffi::receive::v2::V2ProvisionalProposal>> {
        unsafe { decode_rust_opaque_nom(self as _) }
    }
}
impl CstDecode<RustOpaqueNom<Arc<payjoin_ffi::send::v1::ContextV1>>> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> RustOpaqueNom<Arc<payjoin_ffi::send::v1::ContextV1>> {
        unsafe { decode_rust_opaque_nom(self as _) }
    }
}
impl CstDecode<RustOpaqueNom<Arc<payjoin_ffi::send::v1::RequestBuilder>>> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> RustOpaqueNom<Arc<payjoin_ffi::send::v1::RequestBuilder>> {
        unsafe { decode_rust_opaque_nom(self as _) }
    }
}
impl CstDecode<RustOpaqueNom<Arc<payjoin_ffi::send::v1::RequestContext>>> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> RustOpaqueNom<Arc<payjoin_ffi::send::v1::RequestContext>> {
        unsafe { decode_rust_opaque_nom(self as _) }
    }
}
impl CstDecode<RustOpaqueNom<Arc<payjoin_ffi::send::v2::ContextV2>>> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> RustOpaqueNom<Arc<payjoin_ffi::send::v2::ContextV2>> {
        unsafe { decode_rust_opaque_nom(self as _) }
    }
}
impl CstDecode<RustOpaqueNom<Arc<payjoin_ffi::uri::Uri>>> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> RustOpaqueNom<Arc<payjoin_ffi::uri::Uri>> {
        unsafe { decode_rust_opaque_nom(self as _) }
    }
}
impl CstDecode<RustOpaqueNom<Arc<payjoin_ffi::uri::Url>>> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> RustOpaqueNom<Arc<payjoin_ffi::uri::Url>> {
        unsafe { decode_rust_opaque_nom(self as _) }
    }
}
impl CstDecode<RustOpaqueNom<Mutex<Option<ohttp::ClientResponse>>>> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> RustOpaqueNom<Mutex<Option<ohttp::ClientResponse>>> {
        unsafe { decode_rust_opaque_nom(self as _) }
    }
}
impl CstDecode<RustOpaqueNom<payjoin_ffi::receive::v1::UncheckedProposal>> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> RustOpaqueNom<payjoin_ffi::receive::v1::UncheckedProposal> {
        unsafe { decode_rust_opaque_nom(self as _) }
    }
}
impl CstDecode<RustOpaqueNom<payjoin_ffi::receive::v2::Enroller>> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> RustOpaqueNom<payjoin_ffi::receive::v2::Enroller> {
        unsafe { decode_rust_opaque_nom(self as _) }
    }
}
impl CstDecode<RustOpaqueNom<payjoin_ffi::receive::v2::V2UncheckedProposal>> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> RustOpaqueNom<payjoin_ffi::receive::v2::V2UncheckedProposal> {
        unsafe { decode_rust_opaque_nom(self as _) }
    }
}
impl CstDecode<RustOpaqueNom<payjoin_ffi::types::OhttpKeys>> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> RustOpaqueNom<payjoin_ffi::types::OhttpKeys> {
        unsafe { decode_rust_opaque_nom(self as _) }
    }
}
impl CstDecode<String> for *mut wire_cst_list_prim_u_8_strict {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> String {
        let vec: Vec<u8> = self.cst_decode();
        String::from_utf8(vec).unwrap()
    }
}
impl CstDecode<crate::api::receive::ClientResponse> for *mut wire_cst_client_response {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::receive::ClientResponse {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::receive::ClientResponse>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::send::ContextV1> for *mut wire_cst_context_v_1 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::send::ContextV1 {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::send::ContextV1>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::send::ContextV2> for *mut wire_cst_context_v_2 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::send::ContextV2 {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::send::ContextV2>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::receive::Enrolled> for *mut wire_cst_enrolled {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::receive::Enrolled {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::receive::Enrolled>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::receive::Enroller> for *mut wire_cst_enroller {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::receive::Enroller {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::receive::Enroller>::cst_decode(*wrap).into()
    }
}
impl CstDecode<f64> for *mut f64 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> f64 {
        unsafe { *flutter_rust_bridge::for_generated::box_from_leak_ptr(self) }
    }
}
impl CstDecode<crate::utils::types::Headers> for *mut wire_cst_headers {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::utils::types::Headers {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::utils::types::Headers>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::receive::MaybeInputsOwned> for *mut wire_cst_maybe_inputs_owned {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::receive::MaybeInputsOwned {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::receive::MaybeInputsOwned>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::receive::MaybeInputsSeen> for *mut wire_cst_maybe_inputs_seen {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::receive::MaybeInputsSeen {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::receive::MaybeInputsSeen>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::receive::MaybeMixedInputScripts>
    for *mut wire_cst_maybe_mixed_input_scripts
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::receive::MaybeMixedInputScripts {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::receive::MaybeMixedInputScripts>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::uri::OhttpKeys> for *mut wire_cst_ohttp_keys {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::uri::OhttpKeys {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::uri::OhttpKeys>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::utils::types::OutPoint> for *mut wire_cst_out_point {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::utils::types::OutPoint {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::utils::types::OutPoint>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::receive::OutputsUnknown> for *mut wire_cst_outputs_unknown {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::receive::OutputsUnknown {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::receive::OutputsUnknown>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::receive::PayjoinProposal> for *mut wire_cst_payjoin_proposal {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::receive::PayjoinProposal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::receive::PayjoinProposal>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::receive::ProvisionalProposal> for *mut wire_cst_provisional_proposal {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::receive::ProvisionalProposal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::receive::ProvisionalProposal>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::send::RequestBuilder> for *mut wire_cst_request_builder {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::send::RequestBuilder {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::send::RequestBuilder>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::send::RequestContext> for *mut wire_cst_request_context {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::send::RequestContext {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::send::RequestContext>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::utils::types::TxOut> for *mut wire_cst_tx_out {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::utils::types::TxOut {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::utils::types::TxOut>::cst_decode(*wrap).into()
    }
}
impl CstDecode<u64> for *mut u64 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> u64 {
        unsafe { *flutter_rust_bridge::for_generated::box_from_leak_ptr(self) }
    }
}
impl CstDecode<u8> for *mut u8 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> u8 {
        unsafe { *flutter_rust_bridge::for_generated::box_from_leak_ptr(self) }
    }
}
impl CstDecode<crate::api::receive::UncheckedProposal> for *mut wire_cst_unchecked_proposal {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::receive::UncheckedProposal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::receive::UncheckedProposal>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::uri::Uri> for *mut wire_cst_uri {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::uri::Uri {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::uri::Uri>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::uri::Url> for *mut wire_cst_url {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::uri::Url {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::uri::Url>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::receive::V2MaybeInputsOwned> for *mut wire_cst_v_2_maybe_inputs_owned {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::receive::V2MaybeInputsOwned {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::receive::V2MaybeInputsOwned>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::receive::V2MaybeInputsSeen> for *mut wire_cst_v_2_maybe_inputs_seen {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::receive::V2MaybeInputsSeen {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::receive::V2MaybeInputsSeen>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::receive::V2MaybeMixedInputScripts>
    for *mut wire_cst_v_2_maybe_mixed_input_scripts
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::receive::V2MaybeMixedInputScripts {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::receive::V2MaybeMixedInputScripts>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::receive::V2OutputsUnknown> for *mut wire_cst_v_2_outputs_unknown {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::receive::V2OutputsUnknown {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::receive::V2OutputsUnknown>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::receive::V2PayjoinProposal> for *mut wire_cst_v_2_payjoin_proposal {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::receive::V2PayjoinProposal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::receive::V2PayjoinProposal>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::receive::V2ProvisionalProposal>
    for *mut wire_cst_v_2_provisional_proposal
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::receive::V2ProvisionalProposal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::receive::V2ProvisionalProposal>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::receive::V2UncheckedProposal> for *mut wire_cst_v_2_unchecked_proposal {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::receive::V2UncheckedProposal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::receive::V2UncheckedProposal>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::receive::ClientResponse> for wire_cst_client_response {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::receive::ClientResponse {
        crate::api::receive::ClientResponse(self.field0.cst_decode())
    }
}
impl CstDecode<crate::api::send::ContextV1> for wire_cst_context_v_1 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::send::ContextV1 {
        crate::api::send::ContextV1(self.field0.cst_decode())
    }
}
impl CstDecode<crate::api::send::ContextV2> for wire_cst_context_v_2 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::send::ContextV2 {
        crate::api::send::ContextV2(self.field0.cst_decode())
    }
}
impl CstDecode<crate::api::receive::Enrolled> for wire_cst_enrolled {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::receive::Enrolled {
        crate::api::receive::Enrolled(self.field0.cst_decode())
    }
}
impl CstDecode<crate::api::receive::Enroller> for wire_cst_enroller {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::receive::Enroller {
        crate::api::receive::Enroller(self.field0.cst_decode())
    }
}
impl CstDecode<crate::utils::types::Headers> for wire_cst_headers {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::utils::types::Headers {
        crate::utils::types::Headers {
            map: self.map.cst_decode(),
        }
    }
}
impl CstDecode<Vec<crate::utils::types::OutPoint>> for *mut wire_cst_list_out_point {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<crate::utils::types::OutPoint> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<u64>> for *mut wire_cst_list_prim_u_64_strict {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<u64> {
        unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        }
    }
}
impl CstDecode<Vec<u8>> for *mut wire_cst_list_prim_u_8_loose {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<u8> {
        unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        }
    }
}
impl CstDecode<Vec<u8>> for *mut wire_cst_list_prim_u_8_strict {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<u8> {
        unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        }
    }
}
impl CstDecode<Vec<(String, String)>> for *mut wire_cst_list_record_string_string {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<(String, String)> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<(u64, crate::utils::types::OutPoint)>>
    for *mut wire_cst_list_record_u_64_out_point
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<(u64, crate::utils::types::OutPoint)> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<crate::api::receive::MaybeInputsOwned> for wire_cst_maybe_inputs_owned {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::receive::MaybeInputsOwned {
        crate::api::receive::MaybeInputsOwned(self.field0.cst_decode())
    }
}
impl CstDecode<crate::api::receive::MaybeInputsSeen> for wire_cst_maybe_inputs_seen {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::receive::MaybeInputsSeen {
        crate::api::receive::MaybeInputsSeen(self.field0.cst_decode())
    }
}
impl CstDecode<crate::api::receive::MaybeMixedInputScripts> for wire_cst_maybe_mixed_input_scripts {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::receive::MaybeMixedInputScripts {
        crate::api::receive::MaybeMixedInputScripts(self.field0.cst_decode())
    }
}
impl CstDecode<crate::api::uri::OhttpKeys> for wire_cst_ohttp_keys {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::uri::OhttpKeys {
        crate::api::uri::OhttpKeys(self.field0.cst_decode())
    }
}
impl CstDecode<crate::utils::types::OutPoint> for wire_cst_out_point {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::utils::types::OutPoint {
        crate::utils::types::OutPoint {
            txid: self.txid.cst_decode(),
            vout: self.vout.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::receive::OutputsUnknown> for wire_cst_outputs_unknown {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::receive::OutputsUnknown {
        crate::api::receive::OutputsUnknown(self.field0.cst_decode())
    }
}
impl CstDecode<crate::utils::error::PayjoinError> for wire_cst_payjoin_error {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::utils::error::PayjoinError {
        match self.tag {
            0 => {
                let ans = unsafe { self.kind.InvalidAddress };
                crate::utils::error::PayjoinError::InvalidAddress {
                    message: ans.message.cst_decode(),
                }
            }
            1 => {
                let ans = unsafe { self.kind.InvalidScript };
                crate::utils::error::PayjoinError::InvalidScript {
                    message: ans.message.cst_decode(),
                }
            }
            2 => {
                let ans = unsafe { self.kind.NetworkValidation };
                crate::utils::error::PayjoinError::NetworkValidation {
                    message: ans.message.cst_decode(),
                }
            }
            3 => {
                let ans = unsafe { self.kind.PsbtParseError };
                crate::utils::error::PayjoinError::PsbtParseError {
                    message: ans.message.cst_decode(),
                }
            }
            4 => {
                let ans = unsafe { self.kind.ResponseError };
                crate::utils::error::PayjoinError::ResponseError {
                    message: ans.message.cst_decode(),
                }
            }
            5 => {
                let ans = unsafe { self.kind.RequestError };
                crate::utils::error::PayjoinError::RequestError {
                    message: ans.message.cst_decode(),
                }
            }
            6 => {
                let ans = unsafe { self.kind.TransactionError };
                crate::utils::error::PayjoinError::TransactionError {
                    message: ans.message.cst_decode(),
                }
            }
            7 => {
                let ans = unsafe { self.kind.ServerError };
                crate::utils::error::PayjoinError::ServerError {
                    message: ans.message.cst_decode(),
                }
            }
            8 => {
                let ans = unsafe { self.kind.SelectionError };
                crate::utils::error::PayjoinError::SelectionError {
                    message: ans.message.cst_decode(),
                }
            }
            9 => {
                let ans = unsafe { self.kind.CreateRequestError };
                crate::utils::error::PayjoinError::CreateRequestError {
                    message: ans.message.cst_decode(),
                }
            }
            10 => {
                let ans = unsafe { self.kind.PjParseError };
                crate::utils::error::PayjoinError::PjParseError {
                    message: ans.message.cst_decode(),
                }
            }
            11 => {
                let ans = unsafe { self.kind.PjNotSupported };
                crate::utils::error::PayjoinError::PjNotSupported {
                    message: ans.message.cst_decode(),
                }
            }
            12 => {
                let ans = unsafe { self.kind.ValidationError };
                crate::utils::error::PayjoinError::ValidationError {
                    message: ans.message.cst_decode(),
                }
            }
            13 => {
                let ans = unsafe { self.kind.V2Error };
                crate::utils::error::PayjoinError::V2Error {
                    message: ans.message.cst_decode(),
                }
            }
            14 => {
                let ans = unsafe { self.kind.UnexpectedError };
                crate::utils::error::PayjoinError::UnexpectedError {
                    message: ans.message.cst_decode(),
                }
            }
            15 => {
                let ans = unsafe { self.kind.OhttpError };
                crate::utils::error::PayjoinError::OhttpError {
                    message: ans.message.cst_decode(),
                }
            }
            16 => {
                let ans = unsafe { self.kind.UrlError };
                crate::utils::error::PayjoinError::UrlError {
                    message: ans.message.cst_decode(),
                }
            }
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::receive::PayjoinProposal> for wire_cst_payjoin_proposal {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::receive::PayjoinProposal {
        crate::api::receive::PayjoinProposal(self.field0.cst_decode())
    }
}
impl CstDecode<crate::api::receive::ProvisionalProposal> for wire_cst_provisional_proposal {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::receive::ProvisionalProposal {
        crate::api::receive::ProvisionalProposal(self.field0.cst_decode())
    }
}
impl
    CstDecode<(
        (crate::api::uri::Url, Vec<u8>),
        crate::api::receive::ClientResponse,
    )> for wire_cst_record_record_url_list_prim_u_8_strict_client_response
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> (
        (crate::api::uri::Url, Vec<u8>),
        crate::api::receive::ClientResponse,
    ) {
        (self.field0.cst_decode(), self.field1.cst_decode())
    }
}
impl CstDecode<(String, String)> for wire_cst_record_string_string {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> (String, String) {
        (self.field0.cst_decode(), self.field1.cst_decode())
    }
}
impl CstDecode<(u64, crate::utils::types::OutPoint)> for wire_cst_record_u_64_out_point {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> (u64, crate::utils::types::OutPoint) {
        (self.field0.cst_decode(), self.field1.cst_decode())
    }
}
impl CstDecode<(crate::api::uri::Url, Vec<u8>)> for wire_cst_record_url_list_prim_u_8_strict {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> (crate::api::uri::Url, Vec<u8>) {
        (self.field0.cst_decode(), self.field1.cst_decode())
    }
}
impl CstDecode<crate::api::send::RequestBuilder> for wire_cst_request_builder {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::send::RequestBuilder {
        crate::api::send::RequestBuilder(self.field0.cst_decode())
    }
}
impl CstDecode<crate::api::send::RequestContext> for wire_cst_request_context {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::send::RequestContext {
        crate::api::send::RequestContext(self.field0.cst_decode())
    }
}
impl CstDecode<crate::api::send::RequestContextV1> for wire_cst_request_context_v_1 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::send::RequestContextV1 {
        crate::api::send::RequestContextV1 {
            request: self.request.cst_decode(),
            context_v1: self.context_v1.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::send::RequestContextV2> for wire_cst_request_context_v_2 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::send::RequestContextV2 {
        crate::api::send::RequestContextV2 {
            request: self.request.cst_decode(),
            context_v2: self.context_v2.cst_decode(),
        }
    }
}
impl CstDecode<crate::utils::types::TxOut> for wire_cst_tx_out {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::utils::types::TxOut {
        crate::utils::types::TxOut {
            value: self.value.cst_decode(),
            script_pubkey: self.script_pubkey.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::receive::UncheckedProposal> for wire_cst_unchecked_proposal {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::receive::UncheckedProposal {
        crate::api::receive::UncheckedProposal(self.field0.cst_decode())
    }
}
impl CstDecode<crate::api::uri::Uri> for wire_cst_uri {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::uri::Uri {
        crate::api::uri::Uri(self.field0.cst_decode())
    }
}
impl CstDecode<crate::api::uri::Url> for wire_cst_url {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::uri::Url {
        crate::api::uri::Url(self.field0.cst_decode())
    }
}
impl CstDecode<crate::api::receive::V2MaybeInputsOwned> for wire_cst_v_2_maybe_inputs_owned {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::receive::V2MaybeInputsOwned {
        crate::api::receive::V2MaybeInputsOwned(self.field0.cst_decode())
    }
}
impl CstDecode<crate::api::receive::V2MaybeInputsSeen> for wire_cst_v_2_maybe_inputs_seen {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::receive::V2MaybeInputsSeen {
        crate::api::receive::V2MaybeInputsSeen(self.field0.cst_decode())
    }
}
impl CstDecode<crate::api::receive::V2MaybeMixedInputScripts>
    for wire_cst_v_2_maybe_mixed_input_scripts
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::receive::V2MaybeMixedInputScripts {
        crate::api::receive::V2MaybeMixedInputScripts(self.field0.cst_decode())
    }
}
impl CstDecode<crate::api::receive::V2OutputsUnknown> for wire_cst_v_2_outputs_unknown {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::receive::V2OutputsUnknown {
        crate::api::receive::V2OutputsUnknown(self.field0.cst_decode())
    }
}
impl CstDecode<crate::api::receive::V2PayjoinProposal> for wire_cst_v_2_payjoin_proposal {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::receive::V2PayjoinProposal {
        crate::api::receive::V2PayjoinProposal(self.field0.cst_decode())
    }
}
impl CstDecode<crate::api::receive::V2ProvisionalProposal> for wire_cst_v_2_provisional_proposal {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::receive::V2ProvisionalProposal {
        crate::api::receive::V2ProvisionalProposal(self.field0.cst_decode())
    }
}
impl CstDecode<crate::api::receive::V2UncheckedProposal> for wire_cst_v_2_unchecked_proposal {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::receive::V2UncheckedProposal {
        crate::api::receive::V2UncheckedProposal(self.field0.cst_decode())
    }
}
impl NewWithNullPtr for wire_cst_client_response {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: Default::default(),
        }
    }
}
impl Default for wire_cst_client_response {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_context_v_1 {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: Default::default(),
        }
    }
}
impl Default for wire_cst_context_v_1 {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_context_v_2 {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: Default::default(),
        }
    }
}
impl Default for wire_cst_context_v_2 {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_enrolled {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: Default::default(),
        }
    }
}
impl Default for wire_cst_enrolled {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_enroller {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: Default::default(),
        }
    }
}
impl Default for wire_cst_enroller {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_headers {
    fn new_with_null_ptr() -> Self {
        Self {
            map: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_headers {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_maybe_inputs_owned {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: Default::default(),
        }
    }
}
impl Default for wire_cst_maybe_inputs_owned {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_maybe_inputs_seen {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: Default::default(),
        }
    }
}
impl Default for wire_cst_maybe_inputs_seen {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_maybe_mixed_input_scripts {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: Default::default(),
        }
    }
}
impl Default for wire_cst_maybe_mixed_input_scripts {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_ohttp_keys {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: Default::default(),
        }
    }
}
impl Default for wire_cst_ohttp_keys {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_out_point {
    fn new_with_null_ptr() -> Self {
        Self {
            txid: core::ptr::null_mut(),
            vout: Default::default(),
        }
    }
}
impl Default for wire_cst_out_point {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_outputs_unknown {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: Default::default(),
        }
    }
}
impl Default for wire_cst_outputs_unknown {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_payjoin_error {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: PayjoinErrorKind { nil__: () },
        }
    }
}
impl Default for wire_cst_payjoin_error {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_payjoin_proposal {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: Default::default(),
        }
    }
}
impl Default for wire_cst_payjoin_proposal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_provisional_proposal {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: Default::default(),
        }
    }
}
impl Default for wire_cst_provisional_proposal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_record_record_url_list_prim_u_8_strict_client_response {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: Default::default(),
            field1: Default::default(),
        }
    }
}
impl Default for wire_cst_record_record_url_list_prim_u_8_strict_client_response {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_record_string_string {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: core::ptr::null_mut(),
            field1: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_record_string_string {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_record_u_64_out_point {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: Default::default(),
            field1: Default::default(),
        }
    }
}
impl Default for wire_cst_record_u_64_out_point {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_record_url_list_prim_u_8_strict {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: Default::default(),
            field1: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_record_url_list_prim_u_8_strict {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_request_builder {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: Default::default(),
        }
    }
}
impl Default for wire_cst_request_builder {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_request_context {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: Default::default(),
        }
    }
}
impl Default for wire_cst_request_context {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_request_context_v_1 {
    fn new_with_null_ptr() -> Self {
        Self {
            request: Default::default(),
            context_v1: Default::default(),
        }
    }
}
impl Default for wire_cst_request_context_v_1 {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_request_context_v_2 {
    fn new_with_null_ptr() -> Self {
        Self {
            request: Default::default(),
            context_v2: Default::default(),
        }
    }
}
impl Default for wire_cst_request_context_v_2 {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_tx_out {
    fn new_with_null_ptr() -> Self {
        Self {
            value: Default::default(),
            script_pubkey: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_tx_out {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_unchecked_proposal {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: Default::default(),
        }
    }
}
impl Default for wire_cst_unchecked_proposal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_uri {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: Default::default(),
        }
    }
}
impl Default for wire_cst_uri {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_url {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: Default::default(),
        }
    }
}
impl Default for wire_cst_url {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_v_2_maybe_inputs_owned {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: Default::default(),
        }
    }
}
impl Default for wire_cst_v_2_maybe_inputs_owned {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_v_2_maybe_inputs_seen {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: Default::default(),
        }
    }
}
impl Default for wire_cst_v_2_maybe_inputs_seen {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_v_2_maybe_mixed_input_scripts {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: Default::default(),
        }
    }
}
impl Default for wire_cst_v_2_maybe_mixed_input_scripts {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_v_2_outputs_unknown {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: Default::default(),
        }
    }
}
impl Default for wire_cst_v_2_outputs_unknown {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_v_2_payjoin_proposal {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: Default::default(),
        }
    }
}
impl Default for wire_cst_v_2_payjoin_proposal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_v_2_provisional_proposal {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: Default::default(),
        }
    }
}
impl Default for wire_cst_v_2_provisional_proposal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_v_2_unchecked_proposal {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: Default::default(),
        }
    }
}
impl Default for wire_cst_v_2_unchecked_proposal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire_enrolled_extract_req(
    port_: i64,
    ptr: *mut wire_cst_enrolled,
) {
    wire_enrolled_extract_req_impl(port_, ptr)
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire_enrolled_fallback_target(
    port_: i64,
    that: *mut wire_cst_enrolled,
) {
    wire_enrolled_fallback_target_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire_enrolled_process_res(
    port_: i64,
    that: *mut wire_cst_enrolled,
    body: *mut wire_cst_list_prim_u_8_loose,
    ctx: *mut wire_cst_client_response,
) {
    wire_enrolled_process_res_impl(port_, that, body, ctx)
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire_enroller_extract_req(
    port_: i64,
    ptr: *mut wire_cst_enroller,
) {
    wire_enroller_extract_req_impl(port_, ptr)
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire_enroller_from_directory_config(
    port_: i64,
    directory: *mut wire_cst_url,
    ohttp_keys: *mut wire_cst_ohttp_keys,
    ohttp_relay: *mut wire_cst_url,
) {
    wire_enroller_from_directory_config_impl(port_, directory, ohttp_keys, ohttp_relay)
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire_enroller_process_res(
    port_: i64,
    that: *mut wire_cst_enroller,
    body: *mut wire_cst_list_prim_u_8_loose,
    ctx: *mut wire_cst_client_response,
) {
    wire_enroller_process_res_impl(port_, that, body, ctx)
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire_maybe_inputs_owned_check_inputs_not_owned(
    port_: i64,
    ptr: *mut wire_cst_maybe_inputs_owned,
    is_owned: *const std::ffi::c_void,
) {
    wire_maybe_inputs_owned_check_inputs_not_owned_impl(port_, ptr, is_owned)
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire_maybe_inputs_seen_check_no_inputs_seen_before(
    port_: i64,
    ptr: *mut wire_cst_maybe_inputs_seen,
    is_known: *const std::ffi::c_void,
) {
    wire_maybe_inputs_seen_check_no_inputs_seen_before_impl(port_, ptr, is_known)
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire_maybe_mixed_input_scripts_check_no_mixed_input_scripts(
    port_: i64,
    ptr: *mut wire_cst_maybe_mixed_input_scripts,
) {
    wire_maybe_mixed_input_scripts_check_no_mixed_input_scripts_impl(port_, ptr)
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire_outputs_unknown_identify_receiver_outputs(
    port_: i64,
    ptr: *mut wire_cst_outputs_unknown,
    is_receiver_output: *const std::ffi::c_void,
) {
    wire_outputs_unknown_identify_receiver_outputs_impl(port_, ptr, is_receiver_output)
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire_payjoin_proposal_is_output_substitution_disabled(
    port_: i64,
    that: *mut wire_cst_payjoin_proposal,
) {
    wire_payjoin_proposal_is_output_substitution_disabled_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire_payjoin_proposal_owned_vouts(
    port_: i64,
    that: *mut wire_cst_payjoin_proposal,
) {
    wire_payjoin_proposal_owned_vouts_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire_payjoin_proposal_psbt(
    port_: i64,
    that: *mut wire_cst_payjoin_proposal,
) {
    wire_payjoin_proposal_psbt_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire_payjoin_proposal_utxos_to_be_locked(
    port_: i64,
    that: *mut wire_cst_payjoin_proposal,
) {
    wire_payjoin_proposal_utxos_to_be_locked_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire_provisional_proposal_contribute_non_witness_input(
    port_: i64,
    that: *mut wire_cst_provisional_proposal,
    tx: *mut wire_cst_list_prim_u_8_loose,
    outpoint: *mut wire_cst_out_point,
) {
    wire_provisional_proposal_contribute_non_witness_input_impl(port_, that, tx, outpoint)
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire_provisional_proposal_contribute_witness_input(
    port_: i64,
    that: *mut wire_cst_provisional_proposal,
    txo: *mut wire_cst_tx_out,
    outpoint: *mut wire_cst_out_point,
) {
    wire_provisional_proposal_contribute_witness_input_impl(port_, that, txo, outpoint)
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire_provisional_proposal_finalize_proposal(
    port_: i64,
    ptr: *mut wire_cst_provisional_proposal,
    process_psbt: *const std::ffi::c_void,
    min_feerate_sat_per_vb: *mut u64,
) {
    wire_provisional_proposal_finalize_proposal_impl(
        port_,
        ptr,
        process_psbt,
        min_feerate_sat_per_vb,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire_provisional_proposal_substitute_output_address(
    port_: i64,
    that: *mut wire_cst_provisional_proposal,
    address: *mut wire_cst_list_prim_u_8_strict,
) {
    wire_provisional_proposal_substitute_output_address_impl(port_, that, address)
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire_provisional_proposal_try_preserving_privacy(
    port_: i64,
    that: *mut wire_cst_provisional_proposal,
    candidate_inputs: *mut wire_cst_list_record_u_64_out_point,
) {
    wire_provisional_proposal_try_preserving_privacy_impl(port_, that, candidate_inputs)
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire_unchecked_proposal_assume_interactive_receiver(
    port_: i64,
    ptr: *mut wire_cst_unchecked_proposal,
) {
    wire_unchecked_proposal_assume_interactive_receiver_impl(port_, ptr)
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire_unchecked_proposal_check_broadcast_suitability(
    port_: i64,
    ptr: *mut wire_cst_unchecked_proposal,
    min_fee_rate: *mut u64,
    can_broadcast: *const std::ffi::c_void,
) {
    wire_unchecked_proposal_check_broadcast_suitability_impl(
        port_,
        ptr,
        min_fee_rate,
        can_broadcast,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire_unchecked_proposal_extract_tx_to_schedule_broadcast(
    port_: i64,
    that: *mut wire_cst_unchecked_proposal,
) {
    wire_unchecked_proposal_extract_tx_to_schedule_broadcast_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire_unchecked_proposal_from_request(
    port_: i64,
    body: *mut wire_cst_list_prim_u_8_loose,
    query: *mut wire_cst_list_prim_u_8_strict,
    headers: *mut wire_cst_headers,
) {
    wire_unchecked_proposal_from_request_impl(port_, body, query, headers)
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire_v_2_maybe_inputs_owned_check_inputs_not_owned(
    port_: i64,
    that: *mut wire_cst_v_2_maybe_inputs_owned,
    is_owned: *const std::ffi::c_void,
) {
    wire_v_2_maybe_inputs_owned_check_inputs_not_owned_impl(port_, that, is_owned)
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire_v_2_maybe_inputs_seen_check_no_inputs_seen_before(
    port_: i64,
    that: *mut wire_cst_v_2_maybe_inputs_seen,
    is_known: *const std::ffi::c_void,
) {
    wire_v_2_maybe_inputs_seen_check_no_inputs_seen_before_impl(port_, that, is_known)
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire_v_2_maybe_mixed_input_scripts_check_no_mixed_input_scripts(
    port_: i64,
    that: *mut wire_cst_v_2_maybe_mixed_input_scripts,
) {
    wire_v_2_maybe_mixed_input_scripts_check_no_mixed_input_scripts_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire_v_2_outputs_unknown_identify_receiver_outputs(
    port_: i64,
    that: *mut wire_cst_v_2_outputs_unknown,
    is_receiver_output: *const std::ffi::c_void,
) {
    wire_v_2_outputs_unknown_identify_receiver_outputs_impl(port_, that, is_receiver_output)
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire_v_2_payjoin_proposal_deserialize_res(
    port_: i64,
    that: *mut wire_cst_v_2_payjoin_proposal,
    res: *mut wire_cst_list_prim_u_8_loose,
    ohttp_context: *mut wire_cst_client_response,
) {
    wire_v_2_payjoin_proposal_deserialize_res_impl(port_, that, res, ohttp_context)
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire_v_2_payjoin_proposal_extract_v1_req(
    port_: i64,
    that: *mut wire_cst_v_2_payjoin_proposal,
) {
    wire_v_2_payjoin_proposal_extract_v1_req_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire_v_2_payjoin_proposal_extract_v2_req(
    port_: i64,
    ptr: *mut wire_cst_v_2_payjoin_proposal,
) {
    wire_v_2_payjoin_proposal_extract_v2_req_impl(port_, ptr)
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire_v_2_payjoin_proposal_is_output_substitution_disabled(
    port_: i64,
    that: *mut wire_cst_v_2_payjoin_proposal,
) {
    wire_v_2_payjoin_proposal_is_output_substitution_disabled_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire_v_2_payjoin_proposal_owned_vouts(
    port_: i64,
    that: *mut wire_cst_v_2_payjoin_proposal,
) {
    wire_v_2_payjoin_proposal_owned_vouts_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire_v_2_payjoin_proposal_psbt(
    port_: i64,
    that: *mut wire_cst_v_2_payjoin_proposal,
) {
    wire_v_2_payjoin_proposal_psbt_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire_v_2_payjoin_proposal_utxos_to_be_locked(
    port_: i64,
    that: *mut wire_cst_v_2_payjoin_proposal,
) {
    wire_v_2_payjoin_proposal_utxos_to_be_locked_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire_v_2_provisional_proposal_contribute_non_witness_input(
    port_: i64,
    that: *mut wire_cst_v_2_provisional_proposal,
    tx: *mut wire_cst_list_prim_u_8_loose,
    outpoint: *mut wire_cst_out_point,
) {
    wire_v_2_provisional_proposal_contribute_non_witness_input_impl(port_, that, tx, outpoint)
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire_v_2_provisional_proposal_contribute_witness_input(
    port_: i64,
    that: *mut wire_cst_v_2_provisional_proposal,
    txo: *mut wire_cst_tx_out,
    outpoint: *mut wire_cst_out_point,
) {
    wire_v_2_provisional_proposal_contribute_witness_input_impl(port_, that, txo, outpoint)
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire_v_2_provisional_proposal_finalize_proposal(
    port_: i64,
    that: *mut wire_cst_v_2_provisional_proposal,
    process_psbt: *const std::ffi::c_void,
    min_feerate_sat_per_vb: *mut u64,
) {
    wire_v_2_provisional_proposal_finalize_proposal_impl(
        port_,
        that,
        process_psbt,
        min_feerate_sat_per_vb,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire_v_2_provisional_proposal_substitute_output_address(
    port_: i64,
    that: *mut wire_cst_v_2_provisional_proposal,
    address: *mut wire_cst_list_prim_u_8_strict,
) {
    wire_v_2_provisional_proposal_substitute_output_address_impl(port_, that, address)
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire_v_2_provisional_proposal_try_preserving_privacy(
    port_: i64,
    that: *mut wire_cst_v_2_provisional_proposal,
    candidate_inputs: *mut wire_cst_list_record_u_64_out_point,
) {
    wire_v_2_provisional_proposal_try_preserving_privacy_impl(port_, that, candidate_inputs)
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire_v_2_unchecked_proposal_assume_interactive_receiver(
    port_: i64,
    that: *mut wire_cst_v_2_unchecked_proposal,
) {
    wire_v_2_unchecked_proposal_assume_interactive_receiver_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire_v_2_unchecked_proposal_check_broadcast_suitability(
    port_: i64,
    that: *mut wire_cst_v_2_unchecked_proposal,
    min_fee_rate: *mut u64,
    can_broadcast: *const std::ffi::c_void,
) {
    wire_v_2_unchecked_proposal_check_broadcast_suitability_impl(
        port_,
        that,
        min_fee_rate,
        can_broadcast,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire_v_2_unchecked_proposal_extract_tx_to_schedule_broadcast(
    port_: i64,
    that: *mut wire_cst_v_2_unchecked_proposal,
) {
    wire_v_2_unchecked_proposal_extract_tx_to_schedule_broadcast_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire_context_v_1_process_response(
    port_: i64,
    that: *mut wire_cst_context_v_1,
    response: *mut wire_cst_list_prim_u_8_loose,
) {
    wire_context_v_1_process_response_impl(port_, that, response)
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire_context_v_2_process_response(
    port_: i64,
    that: *mut wire_cst_context_v_2,
    response: *mut wire_cst_list_prim_u_8_loose,
) {
    wire_context_v_2_process_response_impl(port_, that, response)
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire_request_builder_always_disable_output_substitution(
    port_: i64,
    that: *mut wire_cst_request_builder,
    disable: bool,
) {
    wire_request_builder_always_disable_output_substitution_impl(port_, that, disable)
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire_request_builder_build_non_incentivizing(
    port_: i64,
    that: *mut wire_cst_request_builder,
) {
    wire_request_builder_build_non_incentivizing_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire_request_builder_build_recommended(
    port_: i64,
    that: *mut wire_cst_request_builder,
    min_fee_rate: u64,
) {
    wire_request_builder_build_recommended_impl(port_, that, min_fee_rate)
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire_request_builder_build_with_additional_fee(
    port_: i64,
    that: *mut wire_cst_request_builder,
    max_fee_contribution: u64,
    change_index: *mut u8,
    min_fee_rate: u64,
    clamp_fee_contribution: bool,
) {
    wire_request_builder_build_with_additional_fee_impl(
        port_,
        that,
        max_fee_contribution,
        change_index,
        min_fee_rate,
        clamp_fee_contribution,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire_request_builder_from_psbt_and_uri(
    port_: i64,
    psbt_base64: *mut wire_cst_list_prim_u_8_strict,
    uri: *mut wire_cst_uri,
) {
    wire_request_builder_from_psbt_and_uri_impl(port_, psbt_base64, uri)
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire_request_context_extract_v1(
    port_: i64,
    ptr: *mut wire_cst_request_context,
) {
    wire_request_context_extract_v1_impl(port_, ptr)
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire_request_context_extract_v2(
    port_: i64,
    ptr: *mut wire_cst_request_context,
    ohttp_proxy_url: *mut wire_cst_url,
) {
    wire_request_context_extract_v2_impl(port_, ptr, ohttp_proxy_url)
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire_ohttp_keys_decode(
    port_: i64,
    bytes: *mut wire_cst_list_prim_u_8_loose,
) {
    wire_ohttp_keys_decode_impl(port_, bytes)
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire_uri_address(port_: i64, that: *mut wire_cst_uri) {
    wire_uri_address_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire_uri_amount(port_: i64, that: *mut wire_cst_uri) {
    wire_uri_amount_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire_uri_from_str(
    port_: i64,
    uri: *mut wire_cst_list_prim_u_8_strict,
) {
    wire_uri_from_str_impl(port_, uri)
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire_url_as_string(port_: i64, that: *mut wire_cst_url) {
    wire_url_as_string_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire_url_from_str(
    port_: i64,
    url: *mut wire_cst_list_prim_u_8_strict,
) {
    wire_url_from_str_impl(port_, url)
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire_url_query(port_: i64, that: *mut wire_cst_url) {
    wire_url_query_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_rust_arc_increment_strong_count_RustOpaque_Arcpayjoin_ffireceivev1MaybeInputsOwned(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<Arc<payjoin_ffi::receive::v1::MaybeInputsOwned>>::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_rust_arc_decrement_strong_count_RustOpaque_Arcpayjoin_ffireceivev1MaybeInputsOwned(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<Arc<payjoin_ffi::receive::v1::MaybeInputsOwned>>::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_rust_arc_increment_strong_count_RustOpaque_Arcpayjoin_ffireceivev1MaybeInputsSeen(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<Arc<payjoin_ffi::receive::v1::MaybeInputsSeen>>::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_rust_arc_decrement_strong_count_RustOpaque_Arcpayjoin_ffireceivev1MaybeInputsSeen(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<Arc<payjoin_ffi::receive::v1::MaybeInputsSeen>>::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_rust_arc_increment_strong_count_RustOpaque_Arcpayjoin_ffireceivev1MaybeMixedInputScripts(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<Arc<payjoin_ffi::receive::v1::MaybeMixedInputScripts>>::increment_strong_count(
            ptr as _,
        );
    }
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_rust_arc_decrement_strong_count_RustOpaque_Arcpayjoin_ffireceivev1MaybeMixedInputScripts(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<Arc<payjoin_ffi::receive::v1::MaybeMixedInputScripts>>::decrement_strong_count(
            ptr as _,
        );
    }
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_rust_arc_increment_strong_count_RustOpaque_Arcpayjoin_ffireceivev1OutputsUnknown(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<Arc<payjoin_ffi::receive::v1::OutputsUnknown>>::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_rust_arc_decrement_strong_count_RustOpaque_Arcpayjoin_ffireceivev1OutputsUnknown(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<Arc<payjoin_ffi::receive::v1::OutputsUnknown>>::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_rust_arc_increment_strong_count_RustOpaque_Arcpayjoin_ffireceivev1PayjoinProposal(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<Arc<payjoin_ffi::receive::v1::PayjoinProposal>>::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_rust_arc_decrement_strong_count_RustOpaque_Arcpayjoin_ffireceivev1PayjoinProposal(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<Arc<payjoin_ffi::receive::v1::PayjoinProposal>>::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_rust_arc_increment_strong_count_RustOpaque_Arcpayjoin_ffireceivev1ProvisionalProposal(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<Arc<payjoin_ffi::receive::v1::ProvisionalProposal>>::increment_strong_count(
            ptr as _,
        );
    }
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_rust_arc_decrement_strong_count_RustOpaque_Arcpayjoin_ffireceivev1ProvisionalProposal(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<Arc<payjoin_ffi::receive::v1::ProvisionalProposal>>::decrement_strong_count(
            ptr as _,
        );
    }
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_rust_arc_increment_strong_count_RustOpaque_Arcpayjoin_ffireceivev2Enrolled(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<Arc<payjoin_ffi::receive::v2::Enrolled>>::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_rust_arc_decrement_strong_count_RustOpaque_Arcpayjoin_ffireceivev2Enrolled(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<Arc<payjoin_ffi::receive::v2::Enrolled>>::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_rust_arc_increment_strong_count_RustOpaque_Arcpayjoin_ffireceivev2V2MaybeInputsOwned(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<Arc<payjoin_ffi::receive::v2::V2MaybeInputsOwned>>::increment_strong_count(
            ptr as _,
        );
    }
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_rust_arc_decrement_strong_count_RustOpaque_Arcpayjoin_ffireceivev2V2MaybeInputsOwned(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<Arc<payjoin_ffi::receive::v2::V2MaybeInputsOwned>>::decrement_strong_count(
            ptr as _,
        );
    }
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_rust_arc_increment_strong_count_RustOpaque_Arcpayjoin_ffireceivev2V2MaybeInputsSeen(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<Arc<payjoin_ffi::receive::v2::V2MaybeInputsSeen>>::increment_strong_count(
            ptr as _,
        );
    }
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_rust_arc_decrement_strong_count_RustOpaque_Arcpayjoin_ffireceivev2V2MaybeInputsSeen(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<Arc<payjoin_ffi::receive::v2::V2MaybeInputsSeen>>::decrement_strong_count(
            ptr as _,
        );
    }
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_rust_arc_increment_strong_count_RustOpaque_Arcpayjoin_ffireceivev2V2MaybeMixedInputScripts(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<Arc<payjoin_ffi::receive::v2::V2MaybeMixedInputScripts>>::increment_strong_count(
            ptr as _,
        );
    }
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_rust_arc_decrement_strong_count_RustOpaque_Arcpayjoin_ffireceivev2V2MaybeMixedInputScripts(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<Arc<payjoin_ffi::receive::v2::V2MaybeMixedInputScripts>>::decrement_strong_count(
            ptr as _,
        );
    }
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_rust_arc_increment_strong_count_RustOpaque_Arcpayjoin_ffireceivev2V2OutputsUnknown(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<Arc<payjoin_ffi::receive::v2::V2OutputsUnknown>>::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_rust_arc_decrement_strong_count_RustOpaque_Arcpayjoin_ffireceivev2V2OutputsUnknown(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<Arc<payjoin_ffi::receive::v2::V2OutputsUnknown>>::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_rust_arc_increment_strong_count_RustOpaque_Arcpayjoin_ffireceivev2V2PayjoinProposal(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<Arc<payjoin_ffi::receive::v2::V2PayjoinProposal>>::increment_strong_count(
            ptr as _,
        );
    }
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_rust_arc_decrement_strong_count_RustOpaque_Arcpayjoin_ffireceivev2V2PayjoinProposal(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<Arc<payjoin_ffi::receive::v2::V2PayjoinProposal>>::decrement_strong_count(
            ptr as _,
        );
    }
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_rust_arc_increment_strong_count_RustOpaque_Arcpayjoin_ffireceivev2V2ProvisionalProposal(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<Arc<payjoin_ffi::receive::v2::V2ProvisionalProposal>>::increment_strong_count(
            ptr as _,
        );
    }
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_rust_arc_decrement_strong_count_RustOpaque_Arcpayjoin_ffireceivev2V2ProvisionalProposal(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<Arc<payjoin_ffi::receive::v2::V2ProvisionalProposal>>::decrement_strong_count(
            ptr as _,
        );
    }
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_rust_arc_increment_strong_count_RustOpaque_Arcpayjoin_ffisendv1ContextV1(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<Arc<payjoin_ffi::send::v1::ContextV1>>::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_rust_arc_decrement_strong_count_RustOpaque_Arcpayjoin_ffisendv1ContextV1(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<Arc<payjoin_ffi::send::v1::ContextV1>>::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_rust_arc_increment_strong_count_RustOpaque_Arcpayjoin_ffisendv1RequestBuilder(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<Arc<payjoin_ffi::send::v1::RequestBuilder>>::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_rust_arc_decrement_strong_count_RustOpaque_Arcpayjoin_ffisendv1RequestBuilder(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<Arc<payjoin_ffi::send::v1::RequestBuilder>>::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_rust_arc_increment_strong_count_RustOpaque_Arcpayjoin_ffisendv1RequestContext(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<Arc<payjoin_ffi::send::v1::RequestContext>>::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_rust_arc_decrement_strong_count_RustOpaque_Arcpayjoin_ffisendv1RequestContext(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<Arc<payjoin_ffi::send::v1::RequestContext>>::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_rust_arc_increment_strong_count_RustOpaque_Arcpayjoin_ffisendv2ContextV2(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<Arc<payjoin_ffi::send::v2::ContextV2>>::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_rust_arc_decrement_strong_count_RustOpaque_Arcpayjoin_ffisendv2ContextV2(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<Arc<payjoin_ffi::send::v2::ContextV2>>::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_rust_arc_increment_strong_count_RustOpaque_Arcpayjoin_ffiuriUri(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<Arc<payjoin_ffi::uri::Uri>>::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_rust_arc_decrement_strong_count_RustOpaque_Arcpayjoin_ffiuriUri(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<Arc<payjoin_ffi::uri::Uri>>::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_rust_arc_increment_strong_count_RustOpaque_Arcpayjoin_ffiuriUrl(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<Arc<payjoin_ffi::uri::Url>>::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_rust_arc_decrement_strong_count_RustOpaque_Arcpayjoin_ffiuriUrl(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<Arc<payjoin_ffi::uri::Url>>::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_rust_arc_increment_strong_count_RustOpaque_MutexOptionohttpClientResponse(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<Mutex<Option<ohttp::ClientResponse>>>::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_rust_arc_decrement_strong_count_RustOpaque_MutexOptionohttpClientResponse(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<Mutex<Option<ohttp::ClientResponse>>>::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_rust_arc_increment_strong_count_RustOpaque_payjoin_ffireceivev1UncheckedProposal(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<payjoin_ffi::receive::v1::UncheckedProposal>::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_rust_arc_decrement_strong_count_RustOpaque_payjoin_ffireceivev1UncheckedProposal(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<payjoin_ffi::receive::v1::UncheckedProposal>::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_rust_arc_increment_strong_count_RustOpaque_payjoin_ffireceivev2Enroller(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<payjoin_ffi::receive::v2::Enroller>::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_rust_arc_decrement_strong_count_RustOpaque_payjoin_ffireceivev2Enroller(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<payjoin_ffi::receive::v2::Enroller>::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_rust_arc_increment_strong_count_RustOpaque_payjoin_ffireceivev2V2UncheckedProposal(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<payjoin_ffi::receive::v2::V2UncheckedProposal>::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_rust_arc_decrement_strong_count_RustOpaque_payjoin_ffireceivev2V2UncheckedProposal(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<payjoin_ffi::receive::v2::V2UncheckedProposal>::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_rust_arc_increment_strong_count_RustOpaque_payjoin_ffitypesOhttpKeys(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<payjoin_ffi::types::OhttpKeys>::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_rust_arc_decrement_strong_count_RustOpaque_payjoin_ffitypesOhttpKeys(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<payjoin_ffi::types::OhttpKeys>::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_cst_new_box_autoadd_client_response(
) -> *mut wire_cst_client_response {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_client_response::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_cst_new_box_autoadd_context_v_1(
) -> *mut wire_cst_context_v_1 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_context_v_1::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_cst_new_box_autoadd_context_v_2(
) -> *mut wire_cst_context_v_2 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_context_v_2::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_cst_new_box_autoadd_enrolled() -> *mut wire_cst_enrolled {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_enrolled::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_cst_new_box_autoadd_enroller() -> *mut wire_cst_enroller {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_enroller::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_cst_new_box_autoadd_f_64(value: f64) -> *mut f64 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_cst_new_box_autoadd_headers() -> *mut wire_cst_headers {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_headers::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_cst_new_box_autoadd_maybe_inputs_owned(
) -> *mut wire_cst_maybe_inputs_owned {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_maybe_inputs_owned::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_cst_new_box_autoadd_maybe_inputs_seen(
) -> *mut wire_cst_maybe_inputs_seen {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_maybe_inputs_seen::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_cst_new_box_autoadd_maybe_mixed_input_scripts(
) -> *mut wire_cst_maybe_mixed_input_scripts {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_maybe_mixed_input_scripts::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_cst_new_box_autoadd_ohttp_keys() -> *mut wire_cst_ohttp_keys
{
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_ohttp_keys::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_cst_new_box_autoadd_out_point() -> *mut wire_cst_out_point
{
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_out_point::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_cst_new_box_autoadd_outputs_unknown(
) -> *mut wire_cst_outputs_unknown {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_outputs_unknown::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_cst_new_box_autoadd_payjoin_proposal(
) -> *mut wire_cst_payjoin_proposal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_payjoin_proposal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_cst_new_box_autoadd_provisional_proposal(
) -> *mut wire_cst_provisional_proposal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_provisional_proposal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_cst_new_box_autoadd_request_builder(
) -> *mut wire_cst_request_builder {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_request_builder::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_cst_new_box_autoadd_request_context(
) -> *mut wire_cst_request_context {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_request_context::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_cst_new_box_autoadd_tx_out() -> *mut wire_cst_tx_out {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_tx_out::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_cst_new_box_autoadd_u_64(value: u64) -> *mut u64 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_cst_new_box_autoadd_u_8(value: u8) -> *mut u8 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_cst_new_box_autoadd_unchecked_proposal(
) -> *mut wire_cst_unchecked_proposal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_unchecked_proposal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_cst_new_box_autoadd_uri() -> *mut wire_cst_uri {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_uri::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_cst_new_box_autoadd_url() -> *mut wire_cst_url {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_url::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_cst_new_box_autoadd_v_2_maybe_inputs_owned(
) -> *mut wire_cst_v_2_maybe_inputs_owned {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_v_2_maybe_inputs_owned::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_cst_new_box_autoadd_v_2_maybe_inputs_seen(
) -> *mut wire_cst_v_2_maybe_inputs_seen {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_v_2_maybe_inputs_seen::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_cst_new_box_autoadd_v_2_maybe_mixed_input_scripts(
) -> *mut wire_cst_v_2_maybe_mixed_input_scripts {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_v_2_maybe_mixed_input_scripts::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_cst_new_box_autoadd_v_2_outputs_unknown(
) -> *mut wire_cst_v_2_outputs_unknown {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_v_2_outputs_unknown::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_cst_new_box_autoadd_v_2_payjoin_proposal(
) -> *mut wire_cst_v_2_payjoin_proposal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_v_2_payjoin_proposal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_cst_new_box_autoadd_v_2_provisional_proposal(
) -> *mut wire_cst_v_2_provisional_proposal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_v_2_provisional_proposal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_cst_new_box_autoadd_v_2_unchecked_proposal(
) -> *mut wire_cst_v_2_unchecked_proposal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_v_2_unchecked_proposal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_cst_new_list_out_point(
    len: i32,
) -> *mut wire_cst_list_out_point {
    let wrap = wire_cst_list_out_point {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_out_point>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_cst_new_list_prim_u_64_strict(
    len: i32,
) -> *mut wire_cst_list_prim_u_64_strict {
    let ans = wire_cst_list_prim_u_64_strict {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(ans)
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_cst_new_list_prim_u_8_loose(
    len: i32,
) -> *mut wire_cst_list_prim_u_8_loose {
    let ans = wire_cst_list_prim_u_8_loose {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(ans)
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_cst_new_list_prim_u_8_strict(
    len: i32,
) -> *mut wire_cst_list_prim_u_8_strict {
    let ans = wire_cst_list_prim_u_8_strict {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(ans)
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_cst_new_list_record_string_string(
    len: i32,
) -> *mut wire_cst_list_record_string_string {
    let wrap = wire_cst_list_record_string_string {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_record_string_string>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_cst_new_list_record_u_64_out_point(
    len: i32,
) -> *mut wire_cst_list_record_u_64_out_point {
    let wrap = wire_cst_list_record_u_64_out_point {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_record_u_64_out_point>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_client_response {
    field0: usize,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_context_v_1 {
    field0: usize,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_context_v_2 {
    field0: usize,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_enrolled {
    field0: usize,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_enroller {
    field0: usize,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_headers {
    map: *mut wire_cst_list_record_string_string,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_out_point {
    ptr: *mut wire_cst_out_point,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_prim_u_64_strict {
    ptr: *mut u64,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_prim_u_8_loose {
    ptr: *mut u8,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_prim_u_8_strict {
    ptr: *mut u8,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_record_string_string {
    ptr: *mut wire_cst_record_string_string,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_record_u_64_out_point {
    ptr: *mut wire_cst_record_u_64_out_point,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_maybe_inputs_owned {
    field0: usize,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_maybe_inputs_seen {
    field0: usize,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_maybe_mixed_input_scripts {
    field0: usize,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_ohttp_keys {
    field0: usize,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_out_point {
    txid: *mut wire_cst_list_prim_u_8_strict,
    vout: u32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_outputs_unknown {
    field0: usize,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_payjoin_error {
    tag: i32,
    kind: PayjoinErrorKind,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub union PayjoinErrorKind {
    InvalidAddress: wire_cst_PayjoinError_InvalidAddress,
    InvalidScript: wire_cst_PayjoinError_InvalidScript,
    NetworkValidation: wire_cst_PayjoinError_NetworkValidation,
    PsbtParseError: wire_cst_PayjoinError_PsbtParseError,
    ResponseError: wire_cst_PayjoinError_ResponseError,
    RequestError: wire_cst_PayjoinError_RequestError,
    TransactionError: wire_cst_PayjoinError_TransactionError,
    ServerError: wire_cst_PayjoinError_ServerError,
    SelectionError: wire_cst_PayjoinError_SelectionError,
    CreateRequestError: wire_cst_PayjoinError_CreateRequestError,
    PjParseError: wire_cst_PayjoinError_PjParseError,
    PjNotSupported: wire_cst_PayjoinError_PjNotSupported,
    ValidationError: wire_cst_PayjoinError_ValidationError,
    V2Error: wire_cst_PayjoinError_V2Error,
    UnexpectedError: wire_cst_PayjoinError_UnexpectedError,
    OhttpError: wire_cst_PayjoinError_OhttpError,
    UrlError: wire_cst_PayjoinError_UrlError,
    nil__: (),
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_PayjoinError_InvalidAddress {
    message: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_PayjoinError_InvalidScript {
    message: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_PayjoinError_NetworkValidation {
    message: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_PayjoinError_PsbtParseError {
    message: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_PayjoinError_ResponseError {
    message: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_PayjoinError_RequestError {
    message: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_PayjoinError_TransactionError {
    message: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_PayjoinError_ServerError {
    message: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_PayjoinError_SelectionError {
    message: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_PayjoinError_CreateRequestError {
    message: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_PayjoinError_PjParseError {
    message: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_PayjoinError_PjNotSupported {
    message: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_PayjoinError_ValidationError {
    message: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_PayjoinError_V2Error {
    message: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_PayjoinError_UnexpectedError {
    message: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_PayjoinError_OhttpError {
    message: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_PayjoinError_UrlError {
    message: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_payjoin_proposal {
    field0: usize,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_provisional_proposal {
    field0: usize,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_record_record_url_list_prim_u_8_strict_client_response {
    field0: wire_cst_record_url_list_prim_u_8_strict,
    field1: wire_cst_client_response,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_record_string_string {
    field0: *mut wire_cst_list_prim_u_8_strict,
    field1: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_record_u_64_out_point {
    field0: u64,
    field1: wire_cst_out_point,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_record_url_list_prim_u_8_strict {
    field0: wire_cst_url,
    field1: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_request_builder {
    field0: usize,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_request_context {
    field0: usize,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_request_context_v_1 {
    request: wire_cst_record_url_list_prim_u_8_strict,
    context_v1: wire_cst_context_v_1,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_request_context_v_2 {
    request: wire_cst_record_url_list_prim_u_8_strict,
    context_v2: wire_cst_context_v_2,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_tx_out {
    value: u64,
    script_pubkey: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_unchecked_proposal {
    field0: usize,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_uri {
    field0: usize,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_url {
    field0: usize,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_v_2_maybe_inputs_owned {
    field0: usize,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_v_2_maybe_inputs_seen {
    field0: usize,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_v_2_maybe_mixed_input_scripts {
    field0: usize,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_v_2_outputs_unknown {
    field0: usize,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_v_2_payjoin_proposal {
    field0: usize,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_v_2_provisional_proposal {
    field0: usize,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_v_2_unchecked_proposal {
    field0: usize,
}
