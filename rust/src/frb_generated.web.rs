// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.32.

// Section: imports

use super::*;
use crate::api::receive::*;
use crate::api::send::*;
use flutter_rust_bridge::for_generated::byteorder::{NativeEndian, ReadBytesExt, WriteBytesExt};
use flutter_rust_bridge::for_generated::transform_result_dco;
use flutter_rust_bridge::for_generated::wasm_bindgen;
use flutter_rust_bridge::for_generated::wasm_bindgen::prelude::*;
use flutter_rust_bridge::{Handler, IntoIntoDart};

// Section: boilerplate

flutter_rust_bridge::frb_generated_boilerplate_web!();

// Section: dart2rust

impl CstDecode<flutter_rust_bridge::DartOpaque>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> flutter_rust_bridge::DartOpaque {
        unsafe { flutter_rust_bridge::for_generated::cst_decode_dart_opaque(self as _) }
    }
}
impl CstDecode<String> for String {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> String {
        self
    }
}
impl CstDecode<crate::api::receive::ClientResponse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::receive::ClientResponse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::receive::ClientResponse(self_.get(0).cst_decode())
    }
}
impl CstDecode<crate::api::send::ContextV1>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::send::ContextV1 {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::send::ContextV1(self_.get(0).cst_decode())
    }
}
impl CstDecode<crate::api::send::ContextV2>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::send::ContextV2 {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::send::ContextV2(self_.get(0).cst_decode())
    }
}
impl CstDecode<crate::api::receive::Enrolled>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::receive::Enrolled {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::receive::Enrolled(self_.get(0).cst_decode())
    }
}
impl CstDecode<crate::api::receive::Enroller>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::receive::Enroller {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::receive::Enroller(self_.get(0).cst_decode())
    }
}
impl CstDecode<crate::utils::types::Headers>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::utils::types::Headers {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::utils::types::Headers {
            map: self_.get(0).cst_decode(),
        }
    }
}
impl CstDecode<Vec<crate::utils::types::OutPoint>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<crate::utils::types::OutPoint> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<u64>> for Box<[u64]> {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<u64> {
        self.into_vec()
    }
}
impl CstDecode<Vec<u8>> for Box<[u8]> {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<u8> {
        self.into_vec()
    }
}
impl CstDecode<Vec<(String, String)>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<(String, String)> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<(u64, crate::utils::types::OutPoint)>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<(u64, crate::utils::types::OutPoint)> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<crate::api::receive::MaybeInputsOwned>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::receive::MaybeInputsOwned {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::receive::MaybeInputsOwned(self_.get(0).cst_decode())
    }
}
impl CstDecode<crate::api::receive::MaybeInputsSeen>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::receive::MaybeInputsSeen {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::receive::MaybeInputsSeen(self_.get(0).cst_decode())
    }
}
impl CstDecode<crate::api::receive::MaybeMixedInputScripts>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::receive::MaybeMixedInputScripts {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::receive::MaybeMixedInputScripts(self_.get(0).cst_decode())
    }
}
impl CstDecode<Option<String>> for Option<String> {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Option<String> {
        self.map(CstDecode::cst_decode)
    }
}
impl CstDecode<crate::utils::types::OutPoint>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::utils::types::OutPoint {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::utils::types::OutPoint {
            txid: self_.get(0).cst_decode(),
            vout: self_.get(1).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::receive::OutputsUnknown>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::receive::OutputsUnknown {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::receive::OutputsUnknown(self_.get(0).cst_decode())
    }
}
impl CstDecode<crate::utils::error::PayjoinError>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::utils::error::PayjoinError {
        let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();
        match self_.get(0).unchecked_into_f64() as _ {
            0 => crate::utils::error::PayjoinError::InvalidAddress {
                message: self_.get(1).cst_decode(),
            },
            1 => crate::utils::error::PayjoinError::InvalidScript {
                message: self_.get(1).cst_decode(),
            },
            2 => crate::utils::error::PayjoinError::NetworkValidation {
                message: self_.get(1).cst_decode(),
            },
            3 => crate::utils::error::PayjoinError::PsbtParseError {
                message: self_.get(1).cst_decode(),
            },
            4 => crate::utils::error::PayjoinError::ResponseError {
                message: self_.get(1).cst_decode(),
            },
            5 => crate::utils::error::PayjoinError::RequestError {
                message: self_.get(1).cst_decode(),
            },
            6 => crate::utils::error::PayjoinError::TransactionError {
                message: self_.get(1).cst_decode(),
            },
            7 => crate::utils::error::PayjoinError::ServerError {
                message: self_.get(1).cst_decode(),
            },
            8 => crate::utils::error::PayjoinError::SelectionError {
                message: self_.get(1).cst_decode(),
            },
            9 => crate::utils::error::PayjoinError::CreateRequestError {
                message: self_.get(1).cst_decode(),
            },
            10 => crate::utils::error::PayjoinError::PjParseError {
                message: self_.get(1).cst_decode(),
            },
            11 => crate::utils::error::PayjoinError::PjNotSupported {
                message: self_.get(1).cst_decode(),
            },
            12 => crate::utils::error::PayjoinError::ValidationError {
                message: self_.get(1).cst_decode(),
            },
            13 => crate::utils::error::PayjoinError::V2Error {
                message: self_.get(1).cst_decode(),
            },
            14 => crate::utils::error::PayjoinError::UnexpectedError {
                message: self_.get(1).cst_decode(),
            },
            15 => crate::utils::error::PayjoinError::OhttpError {
                message: self_.get(1).cst_decode(),
            },
            16 => crate::utils::error::PayjoinError::UrlError {
                message: self_.get(1).cst_decode(),
            },
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::receive::PayjoinProposal>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::receive::PayjoinProposal {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::receive::PayjoinProposal(self_.get(0).cst_decode())
    }
}
impl CstDecode<crate::api::receive::ProvisionalProposal>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::receive::ProvisionalProposal {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::receive::ProvisionalProposal(self_.get(0).cst_decode())
    }
}
impl
    CstDecode<(
        (crate::api::uri::Url, Vec<u8>),
        crate::api::receive::ClientResponse,
    )> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> (
        (crate::api::uri::Url, Vec<u8>),
        crate::api::receive::ClientResponse,
    ) {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        (self_.get(0).cst_decode(), self_.get(1).cst_decode())
    }
}
impl CstDecode<(String, String)> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> (String, String) {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        (self_.get(0).cst_decode(), self_.get(1).cst_decode())
    }
}
impl CstDecode<(u64, crate::utils::types::OutPoint)>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> (u64, crate::utils::types::OutPoint) {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        (self_.get(0).cst_decode(), self_.get(1).cst_decode())
    }
}
impl CstDecode<(crate::api::uri::Url, Vec<u8>)>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> (crate::api::uri::Url, Vec<u8>) {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        (self_.get(0).cst_decode(), self_.get(1).cst_decode())
    }
}
impl CstDecode<crate::api::send::RequestBuilder>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::send::RequestBuilder {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::send::RequestBuilder(self_.get(0).cst_decode())
    }
}
impl CstDecode<crate::api::send::RequestContext>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::send::RequestContext {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::send::RequestContext(self_.get(0).cst_decode())
    }
}
impl CstDecode<crate::api::send::RequestContextV1>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::send::RequestContextV1 {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::api::send::RequestContextV1 {
            request: self_.get(0).cst_decode(),
            context_v1: self_.get(1).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::send::RequestContextV2>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::send::RequestContextV2 {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::api::send::RequestContextV2 {
            request: self_.get(0).cst_decode(),
            context_v2: self_.get(1).cst_decode(),
        }
    }
}
impl CstDecode<crate::utils::types::TxOut>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::utils::types::TxOut {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::utils::types::TxOut {
            value: self_.get(0).cst_decode(),
            script_pubkey: self_.get(1).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::receive::UncheckedProposal>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::receive::UncheckedProposal {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::receive::UncheckedProposal(self_.get(0).cst_decode())
    }
}
impl CstDecode<crate::api::uri::Uri> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::uri::Uri {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::uri::Uri(self_.get(0).cst_decode())
    }
}
impl CstDecode<crate::api::uri::Url> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::uri::Url {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::uri::Url(self_.get(0).cst_decode())
    }
}
impl CstDecode<crate::api::receive::V2MaybeInputsOwned>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::receive::V2MaybeInputsOwned {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::receive::V2MaybeInputsOwned(self_.get(0).cst_decode())
    }
}
impl CstDecode<crate::api::receive::V2MaybeInputsSeen>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::receive::V2MaybeInputsSeen {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::receive::V2MaybeInputsSeen(self_.get(0).cst_decode())
    }
}
impl CstDecode<crate::api::receive::V2MaybeMixedInputScripts>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::receive::V2MaybeMixedInputScripts {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::receive::V2MaybeMixedInputScripts(self_.get(0).cst_decode())
    }
}
impl CstDecode<crate::api::receive::V2OutputsUnknown>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::receive::V2OutputsUnknown {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::receive::V2OutputsUnknown(self_.get(0).cst_decode())
    }
}
impl CstDecode<crate::api::receive::V2PayjoinProposal>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::receive::V2PayjoinProposal {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::receive::V2PayjoinProposal(self_.get(0).cst_decode())
    }
}
impl CstDecode<crate::api::receive::V2ProvisionalProposal>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::receive::V2ProvisionalProposal {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::receive::V2ProvisionalProposal(self_.get(0).cst_decode())
    }
}
impl CstDecode<crate::api::receive::V2UncheckedProposal>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::receive::V2UncheckedProposal {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::receive::V2UncheckedProposal(self_.get(0).cst_decode())
    }
}
impl CstDecode<std::collections::HashMap<String, String>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> std::collections::HashMap<String, String> {
        let vec: Vec<(String, String)> = self.cst_decode();
        vec.into_iter().collect()
    }
}
impl CstDecode<std::collections::HashMap<u64, crate::utils::types::OutPoint>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> std::collections::HashMap<u64, crate::utils::types::OutPoint> {
        let vec: Vec<(u64, crate::utils::types::OutPoint)> = self.cst_decode();
        vec.into_iter().collect()
    }
}
impl CstDecode<RustOpaqueNom<Arc<payjoin_ffi::receive::v1::MaybeInputsOwned>>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> RustOpaqueNom<Arc<payjoin_ffi::receive::v1::MaybeInputsOwned>> {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
    }
}
impl CstDecode<RustOpaqueNom<Arc<payjoin_ffi::receive::v1::MaybeInputsSeen>>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> RustOpaqueNom<Arc<payjoin_ffi::receive::v1::MaybeInputsSeen>> {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
    }
}
impl CstDecode<RustOpaqueNom<Arc<payjoin_ffi::receive::v1::MaybeMixedInputScripts>>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> RustOpaqueNom<Arc<payjoin_ffi::receive::v1::MaybeMixedInputScripts>> {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
    }
}
impl CstDecode<RustOpaqueNom<Arc<payjoin_ffi::receive::v1::OutputsUnknown>>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> RustOpaqueNom<Arc<payjoin_ffi::receive::v1::OutputsUnknown>> {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
    }
}
impl CstDecode<RustOpaqueNom<Arc<payjoin_ffi::receive::v1::PayjoinProposal>>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> RustOpaqueNom<Arc<payjoin_ffi::receive::v1::PayjoinProposal>> {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
    }
}
impl CstDecode<RustOpaqueNom<Arc<payjoin_ffi::receive::v1::ProvisionalProposal>>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> RustOpaqueNom<Arc<payjoin_ffi::receive::v1::ProvisionalProposal>> {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
    }
}
impl CstDecode<RustOpaqueNom<Arc<payjoin_ffi::receive::v2::Enrolled>>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> RustOpaqueNom<Arc<payjoin_ffi::receive::v2::Enrolled>> {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
    }
}
impl CstDecode<RustOpaqueNom<Arc<payjoin_ffi::receive::v2::V2MaybeInputsOwned>>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> RustOpaqueNom<Arc<payjoin_ffi::receive::v2::V2MaybeInputsOwned>> {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
    }
}
impl CstDecode<RustOpaqueNom<Arc<payjoin_ffi::receive::v2::V2MaybeInputsSeen>>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> RustOpaqueNom<Arc<payjoin_ffi::receive::v2::V2MaybeInputsSeen>> {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
    }
}
impl CstDecode<RustOpaqueNom<Arc<payjoin_ffi::receive::v2::V2MaybeMixedInputScripts>>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> RustOpaqueNom<Arc<payjoin_ffi::receive::v2::V2MaybeMixedInputScripts>> {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
    }
}
impl CstDecode<RustOpaqueNom<Arc<payjoin_ffi::receive::v2::V2OutputsUnknown>>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> RustOpaqueNom<Arc<payjoin_ffi::receive::v2::V2OutputsUnknown>> {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
    }
}
impl CstDecode<RustOpaqueNom<Arc<payjoin_ffi::receive::v2::V2PayjoinProposal>>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> RustOpaqueNom<Arc<payjoin_ffi::receive::v2::V2PayjoinProposal>> {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
    }
}
impl CstDecode<RustOpaqueNom<Arc<payjoin_ffi::receive::v2::V2ProvisionalProposal>>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> RustOpaqueNom<Arc<payjoin_ffi::receive::v2::V2ProvisionalProposal>> {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
    }
}
impl CstDecode<RustOpaqueNom<Arc<payjoin_ffi::send::v1::ContextV1>>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> RustOpaqueNom<Arc<payjoin_ffi::send::v1::ContextV1>> {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
    }
}
impl CstDecode<RustOpaqueNom<Arc<payjoin_ffi::send::v1::RequestBuilder>>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> RustOpaqueNom<Arc<payjoin_ffi::send::v1::RequestBuilder>> {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
    }
}
impl CstDecode<RustOpaqueNom<Arc<payjoin_ffi::send::v1::RequestContext>>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> RustOpaqueNom<Arc<payjoin_ffi::send::v1::RequestContext>> {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
    }
}
impl CstDecode<RustOpaqueNom<Arc<payjoin_ffi::send::v2::ContextV2>>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> RustOpaqueNom<Arc<payjoin_ffi::send::v2::ContextV2>> {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
    }
}
impl CstDecode<RustOpaqueNom<Arc<payjoin_ffi::uri::Uri>>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> RustOpaqueNom<Arc<payjoin_ffi::uri::Uri>> {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
    }
}
impl CstDecode<RustOpaqueNom<Arc<payjoin_ffi::uri::Url>>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> RustOpaqueNom<Arc<payjoin_ffi::uri::Url>> {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
    }
}
impl CstDecode<RustOpaqueNom<Mutex<Option<ohttp::ClientResponse>>>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> RustOpaqueNom<Mutex<Option<ohttp::ClientResponse>>> {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
    }
}
impl CstDecode<RustOpaqueNom<payjoin_ffi::receive::v1::UncheckedProposal>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> RustOpaqueNom<payjoin_ffi::receive::v1::UncheckedProposal> {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
    }
}
impl CstDecode<RustOpaqueNom<payjoin_ffi::receive::v2::Enroller>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> RustOpaqueNom<payjoin_ffi::receive::v2::Enroller> {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
    }
}
impl CstDecode<RustOpaqueNom<payjoin_ffi::receive::v2::V2UncheckedProposal>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> RustOpaqueNom<payjoin_ffi::receive::v2::V2UncheckedProposal> {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
    }
}
impl CstDecode<String> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> String {
        self.as_string().expect("non-UTF-8 string, or not a string")
    }
}
impl CstDecode<bool> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> bool {
        self.is_truthy()
    }
}
impl CstDecode<Vec<u64>> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<u64> {
        let buf = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::BigUint64Array>()
            .unwrap();
        let buf = flutter_rust_bridge::for_generated::js_sys::Uint8Array::new(&buf.buffer());
        flutter_rust_bridge::for_generated::slice_from_byte_buffer(buf.to_vec()).into()
    }
}
impl CstDecode<Vec<u8>> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<u8> {
        self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Uint8Array>()
            .to_vec()
            .into()
    }
}
impl CstDecode<u32> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> u32 {
        self.unchecked_into_f64() as _
    }
}
impl CstDecode<u64> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> u64 {
        ::std::convert::TryInto::try_into(
            self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::BigInt>()
                .unwrap(),
        )
        .unwrap()
    }
}
impl CstDecode<u8> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> u8 {
        self.unchecked_into_f64() as _
    }
}
impl CstDecode<usize> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> usize {
        self.unchecked_into_f64() as _
    }
}

#[wasm_bindgen]
pub fn wire_enrolled_extract_req(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
) {
    wire_enrolled_extract_req_impl(port_, that)
}

#[wasm_bindgen]
pub fn wire_enrolled_fallback_target(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
) {
    wire_enrolled_fallback_target_impl(port_, that)
}

#[wasm_bindgen]
pub fn wire_enrolled_process_res(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    body: Box<[u8]>,
    ctx: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
) {
    wire_enrolled_process_res_impl(port_, that, body, ctx)
}

#[wasm_bindgen]
pub fn wire_enrolled_subdirectory(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
) {
    wire_enrolled_subdirectory_impl(port_, that)
}

#[wasm_bindgen]
pub fn wire_enroller_extract_req(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
) {
    wire_enroller_extract_req_impl(port_, that)
}

#[wasm_bindgen]
pub fn wire_enroller_from_relay_config(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    relay_url: String,
    ohttp_config_base64: String,
    ohttp_proxy_url: String,
) {
    wire_enroller_from_relay_config_impl(port_, relay_url, ohttp_config_base64, ohttp_proxy_url)
}

#[wasm_bindgen]
pub fn wire_enroller_payjoin_subdir(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
) {
    wire_enroller_payjoin_subdir_impl(port_, that)
}

#[wasm_bindgen]
pub fn wire_enroller_process_res(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    body: Box<[u8]>,
    ctx: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
) {
    wire_enroller_process_res_impl(port_, that, body, ctx)
}

#[wasm_bindgen]
pub fn wire_enroller_subdirectory(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
) {
    wire_enroller_subdirectory_impl(port_, that)
}

#[wasm_bindgen]
pub fn wire_maybe_inputs_owned_check_inputs_not_owned(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    is_owned: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
) {
    wire_maybe_inputs_owned_check_inputs_not_owned_impl(port_, ptr, is_owned)
}

#[wasm_bindgen]
pub fn wire_maybe_inputs_seen_check_no_inputs_seen_before(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    is_known: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
) {
    wire_maybe_inputs_seen_check_no_inputs_seen_before_impl(port_, ptr, is_known)
}

#[wasm_bindgen]
pub fn wire_maybe_mixed_input_scripts_check_no_mixed_input_scripts(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
) {
    wire_maybe_mixed_input_scripts_check_no_mixed_input_scripts_impl(port_, ptr)
}

#[wasm_bindgen]
pub fn wire_outputs_unknown_identify_receiver_outputs(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    is_receiver_output: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
) {
    wire_outputs_unknown_identify_receiver_outputs_impl(port_, ptr, is_receiver_output)
}

#[wasm_bindgen]
pub fn wire_payjoin_proposal_is_output_substitution_disabled(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
) {
    wire_payjoin_proposal_is_output_substitution_disabled_impl(port_, that)
}

#[wasm_bindgen]
pub fn wire_payjoin_proposal_owned_vouts(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
) {
    wire_payjoin_proposal_owned_vouts_impl(port_, that)
}

#[wasm_bindgen]
pub fn wire_payjoin_proposal_psbt(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
) {
    wire_payjoin_proposal_psbt_impl(port_, that)
}

#[wasm_bindgen]
pub fn wire_payjoin_proposal_utxos_to_be_locked(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
) {
    wire_payjoin_proposal_utxos_to_be_locked_impl(port_, that)
}

#[wasm_bindgen]
pub fn wire_provisional_proposal_contribute_non_witness_input(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    tx: Box<[u8]>,
    outpoint: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
) {
    wire_provisional_proposal_contribute_non_witness_input_impl(port_, that, tx, outpoint)
}

#[wasm_bindgen]
pub fn wire_provisional_proposal_contribute_witness_input(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    txo: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    outpoint: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
) {
    wire_provisional_proposal_contribute_witness_input_impl(port_, that, txo, outpoint)
}

#[wasm_bindgen]
pub fn wire_provisional_proposal_finalize_proposal(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    process_psbt: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    min_feerate_sat_per_vb: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
) {
    wire_provisional_proposal_finalize_proposal_impl(
        port_,
        ptr,
        process_psbt,
        min_feerate_sat_per_vb,
    )
}

#[wasm_bindgen]
pub fn wire_provisional_proposal_substitute_output_address(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    address: String,
) {
    wire_provisional_proposal_substitute_output_address_impl(port_, that, address)
}

#[wasm_bindgen]
pub fn wire_provisional_proposal_try_preserving_privacy(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    candidate_inputs: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
) {
    wire_provisional_proposal_try_preserving_privacy_impl(port_, that, candidate_inputs)
}

#[wasm_bindgen]
pub fn wire_unchecked_proposal_assume_interactive_receiver(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
) {
    wire_unchecked_proposal_assume_interactive_receiver_impl(port_, ptr)
}

#[wasm_bindgen]
pub fn wire_unchecked_proposal_check_broadcast_suitability(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    min_fee_rate: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    can_broadcast: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
) {
    wire_unchecked_proposal_check_broadcast_suitability_impl(
        port_,
        ptr,
        min_fee_rate,
        can_broadcast,
    )
}

#[wasm_bindgen]
pub fn wire_unchecked_proposal_extract_tx_to_schedule_broadcast(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
) {
    wire_unchecked_proposal_extract_tx_to_schedule_broadcast_impl(port_, that)
}

#[wasm_bindgen]
pub fn wire_unchecked_proposal_from_request(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    body: Box<[u8]>,
    query: String,
    headers: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
) {
    wire_unchecked_proposal_from_request_impl(port_, body, query, headers)
}

#[wasm_bindgen]
pub fn wire_v_2_maybe_inputs_owned_check_inputs_not_owned(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    is_owned: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
) {
    wire_v_2_maybe_inputs_owned_check_inputs_not_owned_impl(port_, that, is_owned)
}

#[wasm_bindgen]
pub fn wire_v_2_maybe_inputs_seen_check_no_inputs_seen_before(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    is_known: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
) {
    wire_v_2_maybe_inputs_seen_check_no_inputs_seen_before_impl(port_, that, is_known)
}

#[wasm_bindgen]
pub fn wire_v_2_maybe_mixed_input_scripts_check_no_mixed_input_scripts(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
) {
    wire_v_2_maybe_mixed_input_scripts_check_no_mixed_input_scripts_impl(port_, that)
}

#[wasm_bindgen]
pub fn wire_v_2_outputs_unknown_identify_receiver_outputs(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    is_receiver_output: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
) {
    wire_v_2_outputs_unknown_identify_receiver_outputs_impl(port_, that, is_receiver_output)
}

#[wasm_bindgen]
pub fn wire_v_2_payjoin_proposal_deserialize_res(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    res: Box<[u8]>,
    ohttp_context: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
) {
    wire_v_2_payjoin_proposal_deserialize_res_impl(port_, that, res, ohttp_context)
}

#[wasm_bindgen]
pub fn wire_v_2_payjoin_proposal_extract_v1_req(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
) {
    wire_v_2_payjoin_proposal_extract_v1_req_impl(port_, that)
}

#[wasm_bindgen]
pub fn wire_v_2_payjoin_proposal_extract_v2_req(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
) {
    wire_v_2_payjoin_proposal_extract_v2_req_impl(port_, that)
}

#[wasm_bindgen]
pub fn wire_v_2_payjoin_proposal_is_output_substitution_disabled(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
) {
    wire_v_2_payjoin_proposal_is_output_substitution_disabled_impl(port_, that)
}

#[wasm_bindgen]
pub fn wire_v_2_payjoin_proposal_owned_vouts(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
) {
    wire_v_2_payjoin_proposal_owned_vouts_impl(port_, that)
}

#[wasm_bindgen]
pub fn wire_v_2_payjoin_proposal_psbt(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
) {
    wire_v_2_payjoin_proposal_psbt_impl(port_, that)
}

#[wasm_bindgen]
pub fn wire_v_2_payjoin_proposal_utxos_to_be_locked(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
) {
    wire_v_2_payjoin_proposal_utxos_to_be_locked_impl(port_, that)
}

#[wasm_bindgen]
pub fn wire_v_2_provisional_proposal_contribute_non_witness_input(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    tx: Box<[u8]>,
    outpoint: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
) {
    wire_v_2_provisional_proposal_contribute_non_witness_input_impl(port_, that, tx, outpoint)
}

#[wasm_bindgen]
pub fn wire_v_2_provisional_proposal_contribute_witness_input(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    txo: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    outpoint: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
) {
    wire_v_2_provisional_proposal_contribute_witness_input_impl(port_, that, txo, outpoint)
}

#[wasm_bindgen]
pub fn wire_v_2_provisional_proposal_finalize_proposal(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    process_psbt: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    min_feerate_sat_per_vb: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
) {
    wire_v_2_provisional_proposal_finalize_proposal_impl(
        port_,
        that,
        process_psbt,
        min_feerate_sat_per_vb,
    )
}

#[wasm_bindgen]
pub fn wire_v_2_provisional_proposal_substitute_output_address(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    address: String,
) {
    wire_v_2_provisional_proposal_substitute_output_address_impl(port_, that, address)
}

#[wasm_bindgen]
pub fn wire_v_2_provisional_proposal_try_preserving_privacy(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    candidate_inputs: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
) {
    wire_v_2_provisional_proposal_try_preserving_privacy_impl(port_, that, candidate_inputs)
}

#[wasm_bindgen]
pub fn wire_v_2_unchecked_proposal_assume_interactive_receiver(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
) {
    wire_v_2_unchecked_proposal_assume_interactive_receiver_impl(port_, that)
}

#[wasm_bindgen]
pub fn wire_v_2_unchecked_proposal_check_broadcast_suitability(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    min_fee_rate: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    can_broadcast: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
) {
    wire_v_2_unchecked_proposal_check_broadcast_suitability_impl(
        port_,
        that,
        min_fee_rate,
        can_broadcast,
    )
}

#[wasm_bindgen]
pub fn wire_v_2_unchecked_proposal_extract_tx_to_schedule_broadcast(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
) {
    wire_v_2_unchecked_proposal_extract_tx_to_schedule_broadcast_impl(port_, that)
}

#[wasm_bindgen]
pub fn wire_context_v_1_process_response(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    response: Box<[u8]>,
) {
    wire_context_v_1_process_response_impl(port_, that, response)
}

#[wasm_bindgen]
pub fn wire_context_v_2_process_response(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    response: Box<[u8]>,
) {
    wire_context_v_2_process_response_impl(port_, that, response)
}

#[wasm_bindgen]
pub fn wire_request_builder_always_disable_output_substitution(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    disable: bool,
) {
    wire_request_builder_always_disable_output_substitution_impl(port_, that, disable)
}

#[wasm_bindgen]
pub fn wire_request_builder_build_non_incentivizing(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
) {
    wire_request_builder_build_non_incentivizing_impl(port_, that)
}

#[wasm_bindgen]
pub fn wire_request_builder_build_recommended(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    min_fee_rate: u64,
) {
    wire_request_builder_build_recommended_impl(port_, that, min_fee_rate)
}

#[wasm_bindgen]
pub fn wire_request_builder_build_with_additional_fee(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    max_fee_contribution: u64,
    change_index: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    min_fee_rate: u64,
    clamp_fee_contribution: bool,
) {
    wire_request_builder_build_with_additional_fee_impl(
        port_,
        that,
        max_fee_contribution,
        change_index,
        min_fee_rate,
        clamp_fee_contribution,
    )
}

#[wasm_bindgen]
pub fn wire_request_builder_from_psbt_and_uri(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    psbt_base64: String,
    uri: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
) {
    wire_request_builder_from_psbt_and_uri_impl(port_, psbt_base64, uri)
}

#[wasm_bindgen]
pub fn wire_request_context_extract_v1(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
) {
    wire_request_context_extract_v1_impl(port_, that)
}

#[wasm_bindgen]
pub fn wire_request_context_extract_v2(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    ohttp_proxy_url: String,
) {
    wire_request_context_extract_v2_impl(port_, that, ohttp_proxy_url)
}

#[wasm_bindgen]
pub fn wire_uri_address(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
) {
    wire_uri_address_impl(port_, that)
}

#[wasm_bindgen]
pub fn wire_uri_amount(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
) {
    wire_uri_amount_impl(port_, that)
}

#[wasm_bindgen]
pub fn wire_uri_from_str(port_: flutter_rust_bridge::for_generated::MessagePort, uri: String) {
    wire_uri_from_str_impl(port_, uri)
}

#[wasm_bindgen]
pub fn wire_url_from_str(port_: flutter_rust_bridge::for_generated::MessagePort, url: String) {
    wire_url_from_str_impl(port_, url)
}

#[wasm_bindgen]
pub fn wire_url_query(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
) {
    wire_url_query_impl(port_, that)
}

#[wasm_bindgen]
pub fn rust_arc_increment_strong_count_RustOpaque_Arcpayjoin_ffireceivev1MaybeInputsOwned(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<Arc<payjoin_ffi::receive::v1::MaybeInputsOwned>>::increment_strong_count(ptr as _);
    }
}

#[wasm_bindgen]
pub fn rust_arc_decrement_strong_count_RustOpaque_Arcpayjoin_ffireceivev1MaybeInputsOwned(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<Arc<payjoin_ffi::receive::v1::MaybeInputsOwned>>::decrement_strong_count(ptr as _);
    }
}

#[wasm_bindgen]
pub fn rust_arc_increment_strong_count_RustOpaque_Arcpayjoin_ffireceivev1MaybeInputsSeen(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<Arc<payjoin_ffi::receive::v1::MaybeInputsSeen>>::increment_strong_count(ptr as _);
    }
}

#[wasm_bindgen]
pub fn rust_arc_decrement_strong_count_RustOpaque_Arcpayjoin_ffireceivev1MaybeInputsSeen(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<Arc<payjoin_ffi::receive::v1::MaybeInputsSeen>>::decrement_strong_count(ptr as _);
    }
}

#[wasm_bindgen]
pub fn rust_arc_increment_strong_count_RustOpaque_Arcpayjoin_ffireceivev1MaybeMixedInputScripts(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<Arc<payjoin_ffi::receive::v1::MaybeMixedInputScripts>>::increment_strong_count(
            ptr as _,
        );
    }
}

#[wasm_bindgen]
pub fn rust_arc_decrement_strong_count_RustOpaque_Arcpayjoin_ffireceivev1MaybeMixedInputScripts(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<Arc<payjoin_ffi::receive::v1::MaybeMixedInputScripts>>::decrement_strong_count(
            ptr as _,
        );
    }
}

#[wasm_bindgen]
pub fn rust_arc_increment_strong_count_RustOpaque_Arcpayjoin_ffireceivev1OutputsUnknown(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<Arc<payjoin_ffi::receive::v1::OutputsUnknown>>::increment_strong_count(ptr as _);
    }
}

#[wasm_bindgen]
pub fn rust_arc_decrement_strong_count_RustOpaque_Arcpayjoin_ffireceivev1OutputsUnknown(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<Arc<payjoin_ffi::receive::v1::OutputsUnknown>>::decrement_strong_count(ptr as _);
    }
}

#[wasm_bindgen]
pub fn rust_arc_increment_strong_count_RustOpaque_Arcpayjoin_ffireceivev1PayjoinProposal(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<Arc<payjoin_ffi::receive::v1::PayjoinProposal>>::increment_strong_count(ptr as _);
    }
}

#[wasm_bindgen]
pub fn rust_arc_decrement_strong_count_RustOpaque_Arcpayjoin_ffireceivev1PayjoinProposal(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<Arc<payjoin_ffi::receive::v1::PayjoinProposal>>::decrement_strong_count(ptr as _);
    }
}

#[wasm_bindgen]
pub fn rust_arc_increment_strong_count_RustOpaque_Arcpayjoin_ffireceivev1ProvisionalProposal(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<Arc<payjoin_ffi::receive::v1::ProvisionalProposal>>::increment_strong_count(
            ptr as _,
        );
    }
}

#[wasm_bindgen]
pub fn rust_arc_decrement_strong_count_RustOpaque_Arcpayjoin_ffireceivev1ProvisionalProposal(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<Arc<payjoin_ffi::receive::v1::ProvisionalProposal>>::decrement_strong_count(
            ptr as _,
        );
    }
}

#[wasm_bindgen]
pub fn rust_arc_increment_strong_count_RustOpaque_Arcpayjoin_ffireceivev2Enrolled(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<Arc<payjoin_ffi::receive::v2::Enrolled>>::increment_strong_count(ptr as _);
    }
}

#[wasm_bindgen]
pub fn rust_arc_decrement_strong_count_RustOpaque_Arcpayjoin_ffireceivev2Enrolled(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<Arc<payjoin_ffi::receive::v2::Enrolled>>::decrement_strong_count(ptr as _);
    }
}

#[wasm_bindgen]
pub fn rust_arc_increment_strong_count_RustOpaque_Arcpayjoin_ffireceivev2V2MaybeInputsOwned(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<Arc<payjoin_ffi::receive::v2::V2MaybeInputsOwned>>::increment_strong_count(
            ptr as _,
        );
    }
}

#[wasm_bindgen]
pub fn rust_arc_decrement_strong_count_RustOpaque_Arcpayjoin_ffireceivev2V2MaybeInputsOwned(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<Arc<payjoin_ffi::receive::v2::V2MaybeInputsOwned>>::decrement_strong_count(
            ptr as _,
        );
    }
}

#[wasm_bindgen]
pub fn rust_arc_increment_strong_count_RustOpaque_Arcpayjoin_ffireceivev2V2MaybeInputsSeen(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<Arc<payjoin_ffi::receive::v2::V2MaybeInputsSeen>>::increment_strong_count(
            ptr as _,
        );
    }
}

#[wasm_bindgen]
pub fn rust_arc_decrement_strong_count_RustOpaque_Arcpayjoin_ffireceivev2V2MaybeInputsSeen(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<Arc<payjoin_ffi::receive::v2::V2MaybeInputsSeen>>::decrement_strong_count(
            ptr as _,
        );
    }
}

#[wasm_bindgen]
pub fn rust_arc_increment_strong_count_RustOpaque_Arcpayjoin_ffireceivev2V2MaybeMixedInputScripts(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<Arc<payjoin_ffi::receive::v2::V2MaybeMixedInputScripts>>::increment_strong_count(
            ptr as _,
        );
    }
}

#[wasm_bindgen]
pub fn rust_arc_decrement_strong_count_RustOpaque_Arcpayjoin_ffireceivev2V2MaybeMixedInputScripts(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<Arc<payjoin_ffi::receive::v2::V2MaybeMixedInputScripts>>::decrement_strong_count(
            ptr as _,
        );
    }
}

#[wasm_bindgen]
pub fn rust_arc_increment_strong_count_RustOpaque_Arcpayjoin_ffireceivev2V2OutputsUnknown(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<Arc<payjoin_ffi::receive::v2::V2OutputsUnknown>>::increment_strong_count(ptr as _);
    }
}

#[wasm_bindgen]
pub fn rust_arc_decrement_strong_count_RustOpaque_Arcpayjoin_ffireceivev2V2OutputsUnknown(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<Arc<payjoin_ffi::receive::v2::V2OutputsUnknown>>::decrement_strong_count(ptr as _);
    }
}

#[wasm_bindgen]
pub fn rust_arc_increment_strong_count_RustOpaque_Arcpayjoin_ffireceivev2V2PayjoinProposal(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<Arc<payjoin_ffi::receive::v2::V2PayjoinProposal>>::increment_strong_count(
            ptr as _,
        );
    }
}

#[wasm_bindgen]
pub fn rust_arc_decrement_strong_count_RustOpaque_Arcpayjoin_ffireceivev2V2PayjoinProposal(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<Arc<payjoin_ffi::receive::v2::V2PayjoinProposal>>::decrement_strong_count(
            ptr as _,
        );
    }
}

#[wasm_bindgen]
pub fn rust_arc_increment_strong_count_RustOpaque_Arcpayjoin_ffireceivev2V2ProvisionalProposal(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<Arc<payjoin_ffi::receive::v2::V2ProvisionalProposal>>::increment_strong_count(
            ptr as _,
        );
    }
}

#[wasm_bindgen]
pub fn rust_arc_decrement_strong_count_RustOpaque_Arcpayjoin_ffireceivev2V2ProvisionalProposal(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<Arc<payjoin_ffi::receive::v2::V2ProvisionalProposal>>::decrement_strong_count(
            ptr as _,
        );
    }
}

#[wasm_bindgen]
pub fn rust_arc_increment_strong_count_RustOpaque_Arcpayjoin_ffisendv1ContextV1(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<Arc<payjoin_ffi::send::v1::ContextV1>>::increment_strong_count(ptr as _);
    }
}

#[wasm_bindgen]
pub fn rust_arc_decrement_strong_count_RustOpaque_Arcpayjoin_ffisendv1ContextV1(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<Arc<payjoin_ffi::send::v1::ContextV1>>::decrement_strong_count(ptr as _);
    }
}

#[wasm_bindgen]
pub fn rust_arc_increment_strong_count_RustOpaque_Arcpayjoin_ffisendv1RequestBuilder(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<Arc<payjoin_ffi::send::v1::RequestBuilder>>::increment_strong_count(ptr as _);
    }
}

#[wasm_bindgen]
pub fn rust_arc_decrement_strong_count_RustOpaque_Arcpayjoin_ffisendv1RequestBuilder(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<Arc<payjoin_ffi::send::v1::RequestBuilder>>::decrement_strong_count(ptr as _);
    }
}

#[wasm_bindgen]
pub fn rust_arc_increment_strong_count_RustOpaque_Arcpayjoin_ffisendv1RequestContext(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<Arc<payjoin_ffi::send::v1::RequestContext>>::increment_strong_count(ptr as _);
    }
}

#[wasm_bindgen]
pub fn rust_arc_decrement_strong_count_RustOpaque_Arcpayjoin_ffisendv1RequestContext(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<Arc<payjoin_ffi::send::v1::RequestContext>>::decrement_strong_count(ptr as _);
    }
}

#[wasm_bindgen]
pub fn rust_arc_increment_strong_count_RustOpaque_Arcpayjoin_ffisendv2ContextV2(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<Arc<payjoin_ffi::send::v2::ContextV2>>::increment_strong_count(ptr as _);
    }
}

#[wasm_bindgen]
pub fn rust_arc_decrement_strong_count_RustOpaque_Arcpayjoin_ffisendv2ContextV2(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<Arc<payjoin_ffi::send::v2::ContextV2>>::decrement_strong_count(ptr as _);
    }
}

#[wasm_bindgen]
pub fn rust_arc_increment_strong_count_RustOpaque_Arcpayjoin_ffiuriUri(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<Arc<payjoin_ffi::uri::Uri>>::increment_strong_count(ptr as _);
    }
}

#[wasm_bindgen]
pub fn rust_arc_decrement_strong_count_RustOpaque_Arcpayjoin_ffiuriUri(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<Arc<payjoin_ffi::uri::Uri>>::decrement_strong_count(ptr as _);
    }
}

#[wasm_bindgen]
pub fn rust_arc_increment_strong_count_RustOpaque_Arcpayjoin_ffiuriUrl(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<Arc<payjoin_ffi::uri::Url>>::increment_strong_count(ptr as _);
    }
}

#[wasm_bindgen]
pub fn rust_arc_decrement_strong_count_RustOpaque_Arcpayjoin_ffiuriUrl(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<Arc<payjoin_ffi::uri::Url>>::decrement_strong_count(ptr as _);
    }
}

#[wasm_bindgen]
pub fn rust_arc_increment_strong_count_RustOpaque_MutexOptionohttpClientResponse(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<Mutex<Option<ohttp::ClientResponse>>>::increment_strong_count(ptr as _);
    }
}

#[wasm_bindgen]
pub fn rust_arc_decrement_strong_count_RustOpaque_MutexOptionohttpClientResponse(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<Mutex<Option<ohttp::ClientResponse>>>::decrement_strong_count(ptr as _);
    }
}

#[wasm_bindgen]
pub fn rust_arc_increment_strong_count_RustOpaque_payjoin_ffireceivev1UncheckedProposal(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<payjoin_ffi::receive::v1::UncheckedProposal>::increment_strong_count(ptr as _);
    }
}

#[wasm_bindgen]
pub fn rust_arc_decrement_strong_count_RustOpaque_payjoin_ffireceivev1UncheckedProposal(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<payjoin_ffi::receive::v1::UncheckedProposal>::decrement_strong_count(ptr as _);
    }
}

#[wasm_bindgen]
pub fn rust_arc_increment_strong_count_RustOpaque_payjoin_ffireceivev2Enroller(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<payjoin_ffi::receive::v2::Enroller>::increment_strong_count(ptr as _);
    }
}

#[wasm_bindgen]
pub fn rust_arc_decrement_strong_count_RustOpaque_payjoin_ffireceivev2Enroller(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<payjoin_ffi::receive::v2::Enroller>::decrement_strong_count(ptr as _);
    }
}

#[wasm_bindgen]
pub fn rust_arc_increment_strong_count_RustOpaque_payjoin_ffireceivev2V2UncheckedProposal(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<payjoin_ffi::receive::v2::V2UncheckedProposal>::increment_strong_count(ptr as _);
    }
}

#[wasm_bindgen]
pub fn rust_arc_decrement_strong_count_RustOpaque_payjoin_ffireceivev2V2UncheckedProposal(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<payjoin_ffi::receive::v2::V2UncheckedProposal>::decrement_strong_count(ptr as _);
    }
}
