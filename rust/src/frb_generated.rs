// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.24.

#![allow(
    non_camel_case_types,
    unused,
    non_snake_case,
    clippy::needless_return,
    clippy::redundant_closure_call,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::unused_unit,
    clippy::double_parens,
    clippy::let_and_return,
    clippy::too_many_arguments,
    clippy::match_single_binding
)]

// Section: imports

use crate::api::receive::*;
use crate::api::send::*;
use flutter_rust_bridge::for_generated::byteorder::{NativeEndian, ReadBytesExt, WriteBytesExt};
use flutter_rust_bridge::for_generated::transform_result_dco;
use flutter_rust_bridge::{Handler, IntoIntoDart};

// Section: boilerplate

flutter_rust_bridge::frb_generated_boilerplate!(
    default_stream_sink_codec = DcoCodec,
    default_rust_opaque = RustOpaqueNom,
    default_rust_auto_opaque = RustAutoOpaqueNom,
);
const FLUTTER_RUST_BRIDGE_CODEGEN_VERSION: &str = "2.0.0-dev.24";

// Section: executor

flutter_rust_bridge::frb_generated_default_handler!();

// Section: wire_funcs

fn wire_Headers_from_vec_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    body: impl CstDecode<Vec<u8>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Headers_from_vec",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_body = body.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::receive::Headers::from_vec(api_body))
                })())
            }
        },
    )
}
fn wire_UncheckedProposal_check_broadcast_suitability_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::receive::UncheckedProposal>,
    min_fee_rate: impl CstDecode<Option<u64>>,
    can_broadcast: impl CstDecode<flutter_rust_bridge::DartOpaque>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "UncheckedProposal_check_broadcast_suitability",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_min_fee_rate = min_fee_rate.cst_decode();
            let api_can_broadcast =
                decode_DartFn_Inputs_list_prim_u_8_strict_Output_bool(can_broadcast.cst_decode());
            move |context| {
                transform_result_dco((move || {
                    crate::api::receive::UncheckedProposal::check_broadcast_suitability(
                        &api_that,
                        api_min_fee_rate,
                        api_can_broadcast,
                    )
                })())
            }
        },
    )
}
fn wire_UncheckedProposal_extract_tx_to_schedule_broadcast_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::receive::UncheckedProposal>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "UncheckedProposal_extract_tx_to_schedule_broadcast",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(
                        crate::api::receive::UncheckedProposal::extract_tx_to_schedule_broadcast(
                            &api_that,
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_UncheckedProposal_from_request_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    body: impl CstDecode<Vec<u8>>,
    query: impl CstDecode<String>,
    headers: impl CstDecode<crate::api::receive::Headers>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "UncheckedProposal_from_request",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_body = body.cst_decode();
            let api_query = query.cst_decode();
            let api_headers = headers.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    crate::api::receive::UncheckedProposal::from_request(
                        api_body,
                        api_query,
                        api_headers,
                    )
                })())
            }
        },
    )
}
fn wire_ContextV1_process_response_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::send::ContextV1>,
    response: impl CstDecode<Vec<u8>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ContextV1_process_response",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_response = response.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    crate::api::send::ContextV1::process_response(&api_that, api_response)
                })())
            }
        },
    )
}
fn wire_ContextV2_process_response_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::send::ContextV2>,
    response: impl CstDecode<Vec<u8>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ContextV2_process_response",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_response = response.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    crate::api::send::ContextV2::process_response(&api_that, api_response)
                })())
            }
        },
    )
}
fn wire_RequestBuilder_always_disable_output_substitution_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::send::RequestBuilder>,
    disable: impl CstDecode<bool>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "RequestBuilder_always_disable_output_substitution",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_disable = disable.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(
                        crate::api::send::RequestBuilder::always_disable_output_substitution(
                            &api_that,
                            api_disable,
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_RequestBuilder_build_non_incentivizing_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::send::RequestBuilder>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "RequestBuilder_build_non_incentivizing",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    crate::api::send::RequestBuilder::build_non_incentivizing(&api_that)
                })())
            }
        },
    )
}
fn wire_RequestBuilder_build_recommended_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::send::RequestBuilder>,
    min_fee_rate: impl CstDecode<u64>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "RequestBuilder_build_recommended",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_min_fee_rate = min_fee_rate.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    crate::api::send::RequestBuilder::build_recommended(&api_that, api_min_fee_rate)
                })())
            }
        },
    )
}
fn wire_RequestBuilder_build_with_additional_fee_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::send::RequestBuilder>,
    max_fee_contribution: impl CstDecode<u64>,
    change_index: impl CstDecode<Option<u8>>,
    min_fee_rate: impl CstDecode<u64>,
    clamp_fee_contribution: impl CstDecode<bool>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "RequestBuilder_build_with_additional_fee",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_max_fee_contribution = max_fee_contribution.cst_decode();
            let api_change_index = change_index.cst_decode();
            let api_min_fee_rate = min_fee_rate.cst_decode();
            let api_clamp_fee_contribution = clamp_fee_contribution.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    crate::api::send::RequestBuilder::build_with_additional_fee(
                        &api_that,
                        api_max_fee_contribution,
                        api_change_index,
                        api_min_fee_rate,
                        api_clamp_fee_contribution,
                    )
                })())
            }
        },
    )
}
fn wire_RequestBuilder_from_psbt_and_uri_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    psbt_base64: impl CstDecode<String>,
    uri: impl CstDecode<crate::api::uri::Uri>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "RequestBuilder_from_psbt_and_uri",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_psbt_base64 = psbt_base64.cst_decode();
            let api_uri = uri.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    crate::api::send::RequestBuilder::from_psbt_and_uri(api_psbt_base64, api_uri)
                })())
            }
        },
    )
}
fn wire_RequestBuilder_new_impl(port_: flutter_rust_bridge::for_generated::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "RequestBuilder_new",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::send::RequestBuilder::new())
                })())
            }
        },
    )
}
fn wire_RequestContext_extract_v1_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::send::RequestContext>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "RequestContext_extract_v1",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    crate::api::send::RequestContext::extract_v1(&api_that)
                })())
            }
        },
    )
}
fn wire_RequestContext_extract_v2_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::send::RequestContext>,
    ohttp_proxy_url: impl CstDecode<String>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "RequestContext_extract_v2",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_ohttp_proxy_url = ohttp_proxy_url.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    crate::api::send::RequestContext::extract_v2(&api_that, api_ohttp_proxy_url)
                })())
            }
        },
    )
}
fn wire_Uri_address_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::uri::Uri>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Uri_address",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::uri::Uri::address(&api_that))
                })())
            }
        },
    )
}
fn wire_Uri_amount_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::uri::Uri>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Uri_amount",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::uri::Uri::amount(&api_that))
                })())
            }
        },
    )
}
fn wire_Uri_from_str_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    uri: impl CstDecode<String>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Uri_from_str",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_uri = uri.cst_decode();
            move |context| transform_result_dco((move || crate::api::uri::Uri::from_str(api_uri))())
        },
    )
}
fn wire_Url_new_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    input: impl CstDecode<String>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Url_new",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_input = input.cst_decode();
            move |context| transform_result_dco((move || crate::api::uri::Url::new(api_input))())
        },
    )
}
fn wire_Url_query_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::uri::Url>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Url_query",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::uri::Url::query(&api_that))
                })())
            }
        },
    )
}

// Section: related_funcs

fn decode_DartFn_Inputs_list_prim_u_8_strict_Output_bool(
    dart_opaque: flutter_rust_bridge::DartOpaque,
) -> impl Fn(Vec<u8>) -> flutter_rust_bridge::DartFnFuture<bool> {
    use flutter_rust_bridge::IntoDart;

    async fn body(dart_opaque: flutter_rust_bridge::DartOpaque, arg0: Vec<u8>) -> bool {
        let args = vec![arg0.into_into_dart().into_dart()];
        let message = FLUTTER_RUST_BRIDGE_HANDLER
            .dart_fn_invoke(dart_opaque, args)
            .await;
        <bool>::sse_decode_single(message)
    }

    move |arg0: Vec<u8>| {
        flutter_rust_bridge::for_generated::convert_into_dart_fn_future(body(
            dart_opaque.clone(),
            arg0,
        ))
    }
}

// Section: dart2rust

impl CstDecode<bool> for bool {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> bool {
        self
    }
}
impl CstDecode<u64> for u64 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> u64 {
        self
    }
}
impl CstDecode<u8> for u8 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> u8 {
        self
    }
}
impl CstDecode<usize> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> usize {
        self
    }
}
impl SseDecode for flutter_rust_bridge::DartOpaque {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { flutter_rust_bridge::for_generated::sse_decode_dart_opaque(inner) };
    }
}

impl SseDecode for std::collections::HashMap<String, String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<(String, String)>>::sse_decode(deserializer);
        return inner.into_iter().collect();
    }
}

impl SseDecode for RustOpaqueNom<Arc<payjoin_ffi::receive::v1::MaybeInputsOwned>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for RustOpaqueNom<Arc<payjoin_ffi::send::v1::ContextV1>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for RustOpaqueNom<Arc<payjoin_ffi::send::v1::RequestBuilder>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for RustOpaqueNom<Arc<payjoin_ffi::send::v1::RequestContext>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for RustOpaqueNom<Arc<payjoin_ffi::send::v2::ContextV2>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for RustOpaqueNom<Arc<payjoin_ffi::uri::Uri>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for RustOpaqueNom<Arc<payjoin_ffi::uri::Url>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for RustOpaqueNom<payjoin_ffi::receive::v1::UncheckedProposal> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<u8>>::sse_decode(deserializer);
        return String::from_utf8(inner).unwrap();
    }
}

impl SseDecode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap() != 0
    }
}

impl SseDecode for crate::api::send::ContextV1 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 =
            <RustOpaqueNom<Arc<payjoin_ffi::send::v1::ContextV1>>>::sse_decode(deserializer);
        return crate::api::send::ContextV1(var_field0);
    }
}

impl SseDecode for crate::api::send::ContextV2 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 =
            <RustOpaqueNom<Arc<payjoin_ffi::send::v2::ContextV2>>>::sse_decode(deserializer);
        return crate::api::send::ContextV2(var_field0);
    }
}

impl SseDecode for crate::api::receive::Headers {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <std::collections::HashMap<String, String>>::sse_decode(deserializer);
        return crate::api::receive::Headers(var_field0);
    }
}

impl SseDecode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<u8>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<(String, String)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<(String, String)>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for crate::api::receive::MaybeInputsOwned {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 =
            <RustOpaqueNom<Arc<payjoin_ffi::receive::v1::MaybeInputsOwned>>>::sse_decode(
                deserializer,
            );
        return crate::api::receive::MaybeInputsOwned(var_field0);
    }
}

impl SseDecode for Option<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<String>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<u64> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<u64>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<u8>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for crate::utils::error::PayjoinError {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_message = <String>::sse_decode(deserializer);
                return crate::utils::error::PayjoinError::InvalidAddress {
                    message: var_message,
                };
            }
            1 => {
                let mut var_message = <String>::sse_decode(deserializer);
                return crate::utils::error::PayjoinError::InvalidScript {
                    message: var_message,
                };
            }
            2 => {
                let mut var_message = <String>::sse_decode(deserializer);
                return crate::utils::error::PayjoinError::NetworkValidation {
                    message: var_message,
                };
            }
            3 => {
                let mut var_message = <String>::sse_decode(deserializer);
                return crate::utils::error::PayjoinError::PsbtParseError {
                    message: var_message,
                };
            }
            4 => {
                let mut var_message = <String>::sse_decode(deserializer);
                return crate::utils::error::PayjoinError::ResponseError {
                    message: var_message,
                };
            }
            5 => {
                let mut var_message = <String>::sse_decode(deserializer);
                return crate::utils::error::PayjoinError::RequestError {
                    message: var_message,
                };
            }
            6 => {
                let mut var_message = <String>::sse_decode(deserializer);
                return crate::utils::error::PayjoinError::TransactionError {
                    message: var_message,
                };
            }
            7 => {
                let mut var_message = <String>::sse_decode(deserializer);
                return crate::utils::error::PayjoinError::ServerError {
                    message: var_message,
                };
            }
            8 => {
                let mut var_message = <String>::sse_decode(deserializer);
                return crate::utils::error::PayjoinError::SelectionError {
                    message: var_message,
                };
            }
            9 => {
                let mut var_message = <String>::sse_decode(deserializer);
                return crate::utils::error::PayjoinError::CreateRequestError {
                    message: var_message,
                };
            }
            10 => {
                let mut var_message = <String>::sse_decode(deserializer);
                return crate::utils::error::PayjoinError::PjParseError {
                    message: var_message,
                };
            }
            11 => {
                let mut var_message = <String>::sse_decode(deserializer);
                return crate::utils::error::PayjoinError::PjNotSupported {
                    message: var_message,
                };
            }
            12 => {
                let mut var_message = <String>::sse_decode(deserializer);
                return crate::utils::error::PayjoinError::ValidationError {
                    message: var_message,
                };
            }
            13 => {
                let mut var_message = <String>::sse_decode(deserializer);
                return crate::utils::error::PayjoinError::V2Error {
                    message: var_message,
                };
            }
            14 => {
                let mut var_message = <String>::sse_decode(deserializer);
                return crate::utils::error::PayjoinError::UnexpectedError {
                    message: var_message,
                };
            }
            15 => {
                let mut var_message = <String>::sse_decode(deserializer);
                return crate::utils::error::PayjoinError::OhttpError {
                    message: var_message,
                };
            }
            16 => {
                let mut var_message = <String>::sse_decode(deserializer);
                return crate::utils::error::PayjoinError::UrlError {
                    message: var_message,
                };
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for (String, String) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <String>::sse_decode(deserializer);
        let mut var_field1 = <String>::sse_decode(deserializer);
        return (var_field0, var_field1);
    }
}

impl SseDecode for crate::api::send::Request {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_url = <crate::api::uri::Url>::sse_decode(deserializer);
        let mut var_body = <Vec<u8>>::sse_decode(deserializer);
        return crate::api::send::Request {
            url: var_url,
            body: var_body,
        };
    }
}

impl SseDecode for crate::api::send::RequestBuilder {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 =
            <RustOpaqueNom<Arc<payjoin_ffi::send::v1::RequestBuilder>>>::sse_decode(deserializer);
        return crate::api::send::RequestBuilder(var_field0);
    }
}

impl SseDecode for crate::api::send::RequestContext {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 =
            <RustOpaqueNom<Arc<payjoin_ffi::send::v1::RequestContext>>>::sse_decode(deserializer);
        return crate::api::send::RequestContext(var_field0);
    }
}

impl SseDecode for crate::api::send::RequestContextV1 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_request = <crate::api::send::Request>::sse_decode(deserializer);
        let mut var_contextV1 = <crate::api::send::ContextV1>::sse_decode(deserializer);
        return crate::api::send::RequestContextV1 {
            request: var_request,
            context_v1: var_contextV1,
        };
    }
}

impl SseDecode for crate::api::send::RequestContextV2 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_request = <crate::api::send::Request>::sse_decode(deserializer);
        let mut var_contextV2 = <crate::api::send::ContextV2>::sse_decode(deserializer);
        return crate::api::send::RequestContextV2 {
            request: var_request,
            context_v2: var_contextV2,
        };
    }
}

impl SseDecode for u64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u64::<NativeEndian>().unwrap()
    }
}

impl SseDecode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap()
    }
}

impl SseDecode for crate::api::receive::UncheckedProposal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 =
            <RustOpaqueNom<payjoin_ffi::receive::v1::UncheckedProposal>>::sse_decode(deserializer);
        return crate::api::receive::UncheckedProposal(var_field0);
    }
}

impl SseDecode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {}
}

impl SseDecode for crate::api::uri::Uri {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <RustOpaqueNom<Arc<payjoin_ffi::uri::Uri>>>::sse_decode(deserializer);
        return crate::api::uri::Uri(var_field0);
    }
}

impl SseDecode for crate::api::uri::Url {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <RustOpaqueNom<Arc<payjoin_ffi::uri::Url>>>::sse_decode(deserializer);
        return crate::api::uri::Url(var_field0);
    }
}

impl SseDecode for usize {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u64::<NativeEndian>().unwrap() as _
    }
}

impl SseDecode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_i32::<NativeEndian>().unwrap()
    }
}

fn pde_ffi_dispatcher_primary_impl(
    func_id: i32,
    port: flutter_rust_bridge::for_generated::MessagePort,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        _ => unreachable!(),
    }
}

fn pde_ffi_dispatcher_sync_impl(
    func_id: i32,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        _ => unreachable!(),
    }
}

// Section: rust2dart

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::send::ContextV1 {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::send::ContextV1 {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::send::ContextV1>
    for crate::api::send::ContextV1
{
    fn into_into_dart(self) -> crate::api::send::ContextV1 {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::send::ContextV2 {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::send::ContextV2 {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::send::ContextV2>
    for crate::api::send::ContextV2
{
    fn into_into_dart(self) -> crate::api::send::ContextV2 {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::receive::Headers {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::receive::Headers {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::receive::Headers>
    for crate::api::receive::Headers
{
    fn into_into_dart(self) -> crate::api::receive::Headers {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::receive::MaybeInputsOwned {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::receive::MaybeInputsOwned
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::receive::MaybeInputsOwned>
    for crate::api::receive::MaybeInputsOwned
{
    fn into_into_dart(self) -> crate::api::receive::MaybeInputsOwned {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::utils::error::PayjoinError {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::utils::error::PayjoinError::InvalidAddress { message } => {
                [0.into_dart(), message.into_into_dart().into_dart()].into_dart()
            }
            crate::utils::error::PayjoinError::InvalidScript { message } => {
                [1.into_dart(), message.into_into_dart().into_dart()].into_dart()
            }
            crate::utils::error::PayjoinError::NetworkValidation { message } => {
                [2.into_dart(), message.into_into_dart().into_dart()].into_dart()
            }
            crate::utils::error::PayjoinError::PsbtParseError { message } => {
                [3.into_dart(), message.into_into_dart().into_dart()].into_dart()
            }
            crate::utils::error::PayjoinError::ResponseError { message } => {
                [4.into_dart(), message.into_into_dart().into_dart()].into_dart()
            }
            crate::utils::error::PayjoinError::RequestError { message } => {
                [5.into_dart(), message.into_into_dart().into_dart()].into_dart()
            }
            crate::utils::error::PayjoinError::TransactionError { message } => {
                [6.into_dart(), message.into_into_dart().into_dart()].into_dart()
            }
            crate::utils::error::PayjoinError::ServerError { message } => {
                [7.into_dart(), message.into_into_dart().into_dart()].into_dart()
            }
            crate::utils::error::PayjoinError::SelectionError { message } => {
                [8.into_dart(), message.into_into_dart().into_dart()].into_dart()
            }
            crate::utils::error::PayjoinError::CreateRequestError { message } => {
                [9.into_dart(), message.into_into_dart().into_dart()].into_dart()
            }
            crate::utils::error::PayjoinError::PjParseError { message } => {
                [10.into_dart(), message.into_into_dart().into_dart()].into_dart()
            }
            crate::utils::error::PayjoinError::PjNotSupported { message } => {
                [11.into_dart(), message.into_into_dart().into_dart()].into_dart()
            }
            crate::utils::error::PayjoinError::ValidationError { message } => {
                [12.into_dart(), message.into_into_dart().into_dart()].into_dart()
            }
            crate::utils::error::PayjoinError::V2Error { message } => {
                [13.into_dart(), message.into_into_dart().into_dart()].into_dart()
            }
            crate::utils::error::PayjoinError::UnexpectedError { message } => {
                [14.into_dart(), message.into_into_dart().into_dart()].into_dart()
            }
            crate::utils::error::PayjoinError::OhttpError { message } => {
                [15.into_dart(), message.into_into_dart().into_dart()].into_dart()
            }
            crate::utils::error::PayjoinError::UrlError { message } => {
                [16.into_dart(), message.into_into_dart().into_dart()].into_dart()
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::utils::error::PayjoinError
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::utils::error::PayjoinError>
    for crate::utils::error::PayjoinError
{
    fn into_into_dart(self) -> crate::utils::error::PayjoinError {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::send::Request {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.url.into_into_dart().into_dart(),
            self.body.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::send::Request {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::send::Request> for crate::api::send::Request {
    fn into_into_dart(self) -> crate::api::send::Request {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::send::RequestBuilder {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::send::RequestBuilder
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::send::RequestBuilder>
    for crate::api::send::RequestBuilder
{
    fn into_into_dart(self) -> crate::api::send::RequestBuilder {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::send::RequestContext {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::send::RequestContext
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::send::RequestContext>
    for crate::api::send::RequestContext
{
    fn into_into_dart(self) -> crate::api::send::RequestContext {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::send::RequestContextV1 {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.request.into_into_dart().into_dart(),
            self.context_v1.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::send::RequestContextV1
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::send::RequestContextV1>
    for crate::api::send::RequestContextV1
{
    fn into_into_dart(self) -> crate::api::send::RequestContextV1 {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::send::RequestContextV2 {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.request.into_into_dart().into_dart(),
            self.context_v2.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::send::RequestContextV2
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::send::RequestContextV2>
    for crate::api::send::RequestContextV2
{
    fn into_into_dart(self) -> crate::api::send::RequestContextV2 {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::receive::UncheckedProposal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::receive::UncheckedProposal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::receive::UncheckedProposal>
    for crate::api::receive::UncheckedProposal
{
    fn into_into_dart(self) -> crate::api::receive::UncheckedProposal {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::uri::Uri {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::uri::Uri {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::uri::Uri> for crate::api::uri::Uri {
    fn into_into_dart(self) -> crate::api::uri::Uri {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::uri::Url {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::uri::Url {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::uri::Url> for crate::api::uri::Url {
    fn into_into_dart(self) -> crate::api::uri::Url {
        self
    }
}

impl SseEncode for flutter_rust_bridge::DartOpaque {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <usize>::sse_encode(self.encode(), serializer);
    }
}

impl SseEncode for std::collections::HashMap<String, String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<(String, String)>>::sse_encode(self.into_iter().collect(), serializer);
    }
}

impl SseEncode for RustOpaqueNom<Arc<payjoin_ffi::receive::v1::MaybeInputsOwned>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueNom<Arc<payjoin_ffi::send::v1::ContextV1>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueNom<Arc<payjoin_ffi::send::v1::RequestBuilder>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueNom<Arc<payjoin_ffi::send::v1::RequestContext>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueNom<Arc<payjoin_ffi::send::v2::ContextV2>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueNom<Arc<payjoin_ffi::uri::Uri>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueNom<Arc<payjoin_ffi::uri::Url>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueNom<payjoin_ffi::receive::v1::UncheckedProposal> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self.into_bytes(), serializer);
    }
}

impl SseEncode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self as _).unwrap();
    }
}

impl SseEncode for crate::api::send::ContextV1 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<Arc<payjoin_ffi::send::v1::ContextV1>>>::sse_encode(self.0, serializer);
    }
}

impl SseEncode for crate::api::send::ContextV2 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<Arc<payjoin_ffi::send::v2::ContextV2>>>::sse_encode(self.0, serializer);
    }
}

impl SseEncode for crate::api::receive::Headers {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <std::collections::HashMap<String, String>>::sse_encode(self.0, serializer);
    }
}

impl SseEncode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <u8>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<(String, String)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <(String, String)>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for crate::api::receive::MaybeInputsOwned {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<Arc<payjoin_ffi::receive::v1::MaybeInputsOwned>>>::sse_encode(
            self.0, serializer,
        );
    }
}

impl SseEncode for Option<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <String>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<u64> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <u64>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <u8>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for crate::utils::error::PayjoinError {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::utils::error::PayjoinError::InvalidAddress { message } => {
                <i32>::sse_encode(0, serializer);
                <String>::sse_encode(message, serializer);
            }
            crate::utils::error::PayjoinError::InvalidScript { message } => {
                <i32>::sse_encode(1, serializer);
                <String>::sse_encode(message, serializer);
            }
            crate::utils::error::PayjoinError::NetworkValidation { message } => {
                <i32>::sse_encode(2, serializer);
                <String>::sse_encode(message, serializer);
            }
            crate::utils::error::PayjoinError::PsbtParseError { message } => {
                <i32>::sse_encode(3, serializer);
                <String>::sse_encode(message, serializer);
            }
            crate::utils::error::PayjoinError::ResponseError { message } => {
                <i32>::sse_encode(4, serializer);
                <String>::sse_encode(message, serializer);
            }
            crate::utils::error::PayjoinError::RequestError { message } => {
                <i32>::sse_encode(5, serializer);
                <String>::sse_encode(message, serializer);
            }
            crate::utils::error::PayjoinError::TransactionError { message } => {
                <i32>::sse_encode(6, serializer);
                <String>::sse_encode(message, serializer);
            }
            crate::utils::error::PayjoinError::ServerError { message } => {
                <i32>::sse_encode(7, serializer);
                <String>::sse_encode(message, serializer);
            }
            crate::utils::error::PayjoinError::SelectionError { message } => {
                <i32>::sse_encode(8, serializer);
                <String>::sse_encode(message, serializer);
            }
            crate::utils::error::PayjoinError::CreateRequestError { message } => {
                <i32>::sse_encode(9, serializer);
                <String>::sse_encode(message, serializer);
            }
            crate::utils::error::PayjoinError::PjParseError { message } => {
                <i32>::sse_encode(10, serializer);
                <String>::sse_encode(message, serializer);
            }
            crate::utils::error::PayjoinError::PjNotSupported { message } => {
                <i32>::sse_encode(11, serializer);
                <String>::sse_encode(message, serializer);
            }
            crate::utils::error::PayjoinError::ValidationError { message } => {
                <i32>::sse_encode(12, serializer);
                <String>::sse_encode(message, serializer);
            }
            crate::utils::error::PayjoinError::V2Error { message } => {
                <i32>::sse_encode(13, serializer);
                <String>::sse_encode(message, serializer);
            }
            crate::utils::error::PayjoinError::UnexpectedError { message } => {
                <i32>::sse_encode(14, serializer);
                <String>::sse_encode(message, serializer);
            }
            crate::utils::error::PayjoinError::OhttpError { message } => {
                <i32>::sse_encode(15, serializer);
                <String>::sse_encode(message, serializer);
            }
            crate::utils::error::PayjoinError::UrlError { message } => {
                <i32>::sse_encode(16, serializer);
                <String>::sse_encode(message, serializer);
            }
        }
    }
}

impl SseEncode for (String, String) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.0, serializer);
        <String>::sse_encode(self.1, serializer);
    }
}

impl SseEncode for crate::api::send::Request {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::uri::Url>::sse_encode(self.url, serializer);
        <Vec<u8>>::sse_encode(self.body, serializer);
    }
}

impl SseEncode for crate::api::send::RequestBuilder {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<Arc<payjoin_ffi::send::v1::RequestBuilder>>>::sse_encode(self.0, serializer);
    }
}

impl SseEncode for crate::api::send::RequestContext {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<Arc<payjoin_ffi::send::v1::RequestContext>>>::sse_encode(self.0, serializer);
    }
}

impl SseEncode for crate::api::send::RequestContextV1 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::send::Request>::sse_encode(self.request, serializer);
        <crate::api::send::ContextV1>::sse_encode(self.context_v1, serializer);
    }
}

impl SseEncode for crate::api::send::RequestContextV2 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::send::Request>::sse_encode(self.request, serializer);
        <crate::api::send::ContextV2>::sse_encode(self.context_v2, serializer);
    }
}

impl SseEncode for u64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u64::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self).unwrap();
    }
}

impl SseEncode for crate::api::receive::UncheckedProposal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<payjoin_ffi::receive::v1::UncheckedProposal>>::sse_encode(
            self.0, serializer,
        );
    }
}

impl SseEncode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {}
}

impl SseEncode for crate::api::uri::Uri {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<Arc<payjoin_ffi::uri::Uri>>>::sse_encode(self.0, serializer);
    }
}

impl SseEncode for crate::api::uri::Url {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<Arc<payjoin_ffi::uri::Url>>>::sse_encode(self.0, serializer);
    }
}

impl SseEncode for usize {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer
            .cursor
            .write_u64::<NativeEndian>(self as _)
            .unwrap();
    }
}

impl SseEncode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_i32::<NativeEndian>(self).unwrap();
    }
}

#[cfg(not(target_family = "wasm"))]
#[path = "frb_generated.io.rs"]
mod io;
#[cfg(not(target_family = "wasm"))]
pub use io::*;

/// cbindgen:ignore
#[cfg(target_family = "wasm")]
#[path = "frb_generated.web.rs"]
mod web;
#[cfg(target_family = "wasm")]
pub use web::*;
