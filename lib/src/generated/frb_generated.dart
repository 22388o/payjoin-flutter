// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.32.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/receive.dart';
import 'api/send.dart';
import 'api/uri.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.io.dart' if (dart.library.html) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'utils/error.dart';
import 'utils/types.dart';

/// Main entrypoint of the Rust API
class PayjoinCore extends BaseEntrypoint<PayjoinCoreApi, PayjoinCoreApiImpl,
    PayjoinCoreWire> {
  @internal
  static final instance = PayjoinCore._();

  PayjoinCore._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    PayjoinCoreApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<PayjoinCoreApiImpl, PayjoinCoreWire>
      get apiImplConstructor => PayjoinCoreApiImpl.new;

  @override
  WireConstructor<PayjoinCoreWire> get wireConstructor =>
      PayjoinCoreWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {}

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.0.0-dev.32';

  @override
  int get rustContentHash => 812692583;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'payjoin_flutter',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class PayjoinCoreApi extends BaseApi {
  Future<((Url, Uint8List), ClientResponse)> enrolledExtractReq(
      {required Enrolled that, dynamic hint});

  Future<String> enrolledFallbackTarget({required Enrolled that, dynamic hint});

  Future<V2UncheckedProposal?> enrolledProcessRes(
      {required Enrolled that,
      required List<int> body,
      required ClientResponse ctx,
      dynamic hint});

  Future<Uint8List> enrolledSubdirectory(
      {required Enrolled that, dynamic hint});

  Future<((Url, Uint8List), ClientResponse)> enrollerExtractReq(
      {required Enroller that, dynamic hint});

  Future<Enroller> enrollerFromRelayConfig(
      {required String relayUrl,
      required String ohttpConfigBase64,
      required String ohttpProxyUrl,
      dynamic hint});

  Future<String> enrollerPayjoinSubdir({required Enroller that, dynamic hint});

  Future<Enrolled> enrollerProcessRes(
      {required Enroller that,
      required List<int> body,
      required ClientResponse ctx,
      dynamic hint});

  Future<String> enrollerSubdirectory({required Enroller that, dynamic hint});

  Future<MaybeMixedInputScripts> maybeInputsOwnedCheckInputsNotOwned(
      {required MaybeInputsOwned ptr,
      required FutureOr<bool> Function(Uint8List) isOwned,
      dynamic hint});

  Future<OutputsUnknown> maybeInputsSeenCheckNoInputsSeenBefore(
      {required MaybeInputsSeen ptr,
      required FutureOr<bool> Function(OutPoint) isKnown,
      dynamic hint});

  Future<MaybeInputsSeen> maybeMixedInputScriptsCheckNoMixedInputScripts(
      {required MaybeMixedInputScripts ptr, dynamic hint});

  Future<ProvisionalProposal> outputsUnknownIdentifyReceiverOutputs(
      {required OutputsUnknown ptr,
      required FutureOr<bool> Function(Uint8List) isReceiverOutput,
      dynamic hint});

  Future<bool> payjoinProposalIsOutputSubstitutionDisabled(
      {required PayjoinProposal that, dynamic hint});

  Future<Uint64List> payjoinProposalOwnedVouts(
      {required PayjoinProposal that, dynamic hint});

  Future<String> payjoinProposalPsbt(
      {required PayjoinProposal that, dynamic hint});

  Future<List<OutPoint>> payjoinProposalUtxosToBeLocked(
      {required PayjoinProposal that, dynamic hint});

  Future<void> provisionalProposalContributeNonWitnessInput(
      {required ProvisionalProposal that,
      required List<int> tx,
      required OutPoint outpoint,
      dynamic hint});

  Future<void> provisionalProposalContributeWitnessInput(
      {required ProvisionalProposal that,
      required TxOut txo,
      required OutPoint outpoint,
      dynamic hint});

  Future<PayjoinProposal> provisionalProposalFinalizeProposal(
      {required ProvisionalProposal ptr,
      required FutureOr<String> Function(String) processPsbt,
      int? minFeerateSatPerVb,
      dynamic hint});

  Future<void> provisionalProposalSubstituteOutputAddress(
      {required ProvisionalProposal that,
      required String address,
      dynamic hint});

  Future<OutPoint> provisionalProposalTryPreservingPrivacy(
      {required ProvisionalProposal that,
      required Map<int, OutPoint> candidateInputs,
      dynamic hint});

  Future<MaybeInputsOwned> uncheckedProposalAssumeInteractiveReceiver(
      {required UncheckedProposal ptr, dynamic hint});

  Future<MaybeInputsOwned> uncheckedProposalCheckBroadcastSuitability(
      {required UncheckedProposal ptr,
      int? minFeeRate,
      required FutureOr<bool> Function(Uint8List) canBroadcast,
      dynamic hint});

  Future<Uint8List> uncheckedProposalExtractTxToScheduleBroadcast(
      {required UncheckedProposal that, dynamic hint});

  Future<UncheckedProposal> uncheckedProposalFromRequest(
      {required List<int> body,
      required String query,
      required Headers headers,
      dynamic hint});

  Future<V2MaybeMixedInputScripts> v2MaybeInputsOwnedCheckInputsNotOwned(
      {required V2MaybeInputsOwned that,
      required FutureOr<bool> Function(Uint8List) isOwned,
      dynamic hint});

  Future<V2OutputsUnknown> v2MaybeInputsSeenCheckNoInputsSeenBefore(
      {required V2MaybeInputsSeen that,
      required FutureOr<bool> Function(OutPoint) isKnown,
      dynamic hint});

  Future<V2MaybeInputsSeen> v2MaybeMixedInputScriptsCheckNoMixedInputScripts(
      {required V2MaybeMixedInputScripts that, dynamic hint});

  Future<V2ProvisionalProposal> v2OutputsUnknownIdentifyReceiverOutputs(
      {required V2OutputsUnknown that,
      required FutureOr<bool> Function(Uint8List) isReceiverOutput,
      dynamic hint});

  Future<Uint8List> v2PayjoinProposalDeserializeRes(
      {required V2PayjoinProposal that,
      required List<int> res,
      required ClientResponse ohttpContext,
      dynamic hint});

  Future<String> v2PayjoinProposalExtractV1Req(
      {required V2PayjoinProposal that, dynamic hint});

  Future<((Url, Uint8List), ClientResponse)> v2PayjoinProposalExtractV2Req(
      {required V2PayjoinProposal that, dynamic hint});

  Future<bool> v2PayjoinProposalIsOutputSubstitutionDisabled(
      {required V2PayjoinProposal that, dynamic hint});

  Future<Uint64List> v2PayjoinProposalOwnedVouts(
      {required V2PayjoinProposal that, dynamic hint});

  Future<String> v2PayjoinProposalPsbt(
      {required V2PayjoinProposal that, dynamic hint});

  Future<List<OutPoint>> v2PayjoinProposalUtxosToBeLocked(
      {required V2PayjoinProposal that, dynamic hint});

  Future<void> v2ProvisionalProposalContributeNonWitnessInput(
      {required V2ProvisionalProposal that,
      required List<int> tx,
      required OutPoint outpoint,
      dynamic hint});

  Future<void> v2ProvisionalProposalContributeWitnessInput(
      {required V2ProvisionalProposal that,
      required TxOut txo,
      required OutPoint outpoint,
      dynamic hint});

  Future<V2PayjoinProposal> v2ProvisionalProposalFinalizeProposal(
      {required V2ProvisionalProposal that,
      required FutureOr<String> Function(String) processPsbt,
      int? minFeerateSatPerVb,
      dynamic hint});

  Future<void> v2ProvisionalProposalSubstituteOutputAddress(
      {required V2ProvisionalProposal that,
      required String address,
      dynamic hint});

  Future<OutPoint> v2ProvisionalProposalTryPreservingPrivacy(
      {required V2ProvisionalProposal that,
      required Map<int, OutPoint> candidateInputs,
      dynamic hint});

  Future<V2MaybeInputsOwned> v2UncheckedProposalAssumeInteractiveReceiver(
      {required V2UncheckedProposal that, dynamic hint});

  Future<V2MaybeInputsOwned> v2UncheckedProposalCheckBroadcastSuitability(
      {required V2UncheckedProposal that,
      int? minFeeRate,
      required FutureOr<bool> Function(Uint8List) canBroadcast,
      dynamic hint});

  Future<Uint8List> v2UncheckedProposalExtractTxToScheduleBroadcast(
      {required V2UncheckedProposal that, dynamic hint});

  Future<String> contextV1ProcessResponse(
      {required ContextV1 that, required List<int> response, dynamic hint});

  Future<String?> contextV2ProcessResponse(
      {required ContextV2 that, required List<int> response, dynamic hint});

  Future<RequestBuilder> requestBuilderAlwaysDisableOutputSubstitution(
      {required RequestBuilder that, required bool disable, dynamic hint});

  Future<RequestContext> requestBuilderBuildNonIncentivizing(
      {required RequestBuilder that, dynamic hint});

  Future<RequestContext> requestBuilderBuildRecommended(
      {required RequestBuilder that, required int minFeeRate, dynamic hint});

  Future<RequestContext> requestBuilderBuildWithAdditionalFee(
      {required RequestBuilder that,
      required int maxFeeContribution,
      int? changeIndex,
      required int minFeeRate,
      required bool clampFeeContribution,
      dynamic hint});

  Future<RequestBuilder> requestBuilderFromPsbtAndUri(
      {required String psbtBase64, required Uri uri, dynamic hint});

  Future<RequestContextV1> requestContextExtractV1(
      {required RequestContext that, dynamic hint});

  Future<RequestContextV2> requestContextExtractV2(
      {required RequestContext that,
      required String ohttpProxyUrl,
      dynamic hint});

  Future<String> uriAddress({required Uri that, dynamic hint});

  Future<int?> uriAmount({required Uri that, dynamic hint});

  Future<Uri> uriFromStr({required String uri, dynamic hint});

  Future<Url> urlFromStr({required String url, dynamic hint});

  Future<String?> urlQuery({required Url that, dynamic hint});

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ArcPayjoinFfiReceiveV1MaybeInputsOwned;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ArcPayjoinFfiReceiveV1MaybeInputsOwned;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_ArcPayjoinFfiReceiveV1MaybeInputsOwnedPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ArcPayjoinFfiReceiveV1MaybeInputsSeen;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ArcPayjoinFfiReceiveV1MaybeInputsSeen;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_ArcPayjoinFfiReceiveV1MaybeInputsSeenPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ArcPayjoinFfiReceiveV1MaybeMixedInputScripts;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ArcPayjoinFfiReceiveV1MaybeMixedInputScripts;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_ArcPayjoinFfiReceiveV1MaybeMixedInputScriptsPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ArcPayjoinFfiReceiveV1OutputsUnknown;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ArcPayjoinFfiReceiveV1OutputsUnknown;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_ArcPayjoinFfiReceiveV1OutputsUnknownPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ArcPayjoinFfiReceiveV1PayjoinProposal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ArcPayjoinFfiReceiveV1PayjoinProposal;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_ArcPayjoinFfiReceiveV1PayjoinProposalPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ArcPayjoinFfiReceiveV1ProvisionalProposal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ArcPayjoinFfiReceiveV1ProvisionalProposal;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_ArcPayjoinFfiReceiveV1ProvisionalProposalPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ArcPayjoinFfiReceiveV2Enrolled;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ArcPayjoinFfiReceiveV2Enrolled;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_ArcPayjoinFfiReceiveV2EnrolledPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ArcPayjoinFfiReceiveV2V2MaybeInputsOwned;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ArcPayjoinFfiReceiveV2V2MaybeInputsOwned;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_ArcPayjoinFfiReceiveV2V2MaybeInputsOwnedPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ArcPayjoinFfiReceiveV2V2MaybeInputsSeen;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ArcPayjoinFfiReceiveV2V2MaybeInputsSeen;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_ArcPayjoinFfiReceiveV2V2MaybeInputsSeenPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ArcPayjoinFfiReceiveV2V2MaybeMixedInputScripts;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ArcPayjoinFfiReceiveV2V2MaybeMixedInputScripts;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_ArcPayjoinFfiReceiveV2V2MaybeMixedInputScriptsPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ArcPayjoinFfiReceiveV2V2OutputsUnknown;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ArcPayjoinFfiReceiveV2V2OutputsUnknown;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_ArcPayjoinFfiReceiveV2V2OutputsUnknownPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ArcPayjoinFfiReceiveV2V2PayjoinProposal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ArcPayjoinFfiReceiveV2V2PayjoinProposal;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_ArcPayjoinFfiReceiveV2V2PayjoinProposalPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ArcPayjoinFfiReceiveV2V2ProvisionalProposal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ArcPayjoinFfiReceiveV2V2ProvisionalProposal;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_ArcPayjoinFfiReceiveV2V2ProvisionalProposalPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ArcPayjoinFfiSendV1ContextV1;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ArcPayjoinFfiSendV1ContextV1;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_ArcPayjoinFfiSendV1ContextV1Ptr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ArcPayjoinFfiSendV1RequestBuilder;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ArcPayjoinFfiSendV1RequestBuilder;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_ArcPayjoinFfiSendV1RequestBuilderPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ArcPayjoinFfiSendV1RequestContext;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ArcPayjoinFfiSendV1RequestContext;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_ArcPayjoinFfiSendV1RequestContextPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ArcPayjoinFfiSendV2ContextV2;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ArcPayjoinFfiSendV2ContextV2;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_ArcPayjoinFfiSendV2ContextV2Ptr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ArcPayjoinFfiUriUri;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ArcPayjoinFfiUriUri;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_ArcPayjoinFfiUriUriPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ArcPayjoinFfiUriUrl;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ArcPayjoinFfiUriUrl;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_ArcPayjoinFfiUriUrlPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_MutexOptionOhttpClientResponse;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_MutexOptionOhttpClientResponse;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_MutexOptionOhttpClientResponsePtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_PayjoinFfiReceiveV1UncheckedProposal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_PayjoinFfiReceiveV1UncheckedProposal;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_PayjoinFfiReceiveV1UncheckedProposalPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_PayjoinFfiReceiveV2Enroller;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_PayjoinFfiReceiveV2Enroller;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_PayjoinFfiReceiveV2EnrollerPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_PayjoinFfiReceiveV2V2UncheckedProposal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_PayjoinFfiReceiveV2V2UncheckedProposal;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_PayjoinFfiReceiveV2V2UncheckedProposalPtr;
}

class PayjoinCoreApiImpl extends PayjoinCoreApiImplPlatform
    implements PayjoinCoreApi {
  PayjoinCoreApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<((Url, Uint8List), ClientResponse)> enrolledExtractReq(
      {required Enrolled that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_enrolled(that);
        return wire.wire_enrolled_extract_req(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_record_record_url_list_prim_u_8_strict_client_response,
        decodeErrorData: dco_decode_payjoin_error,
      ),
      constMeta: kEnrolledExtractReqConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kEnrolledExtractReqConstMeta => const TaskConstMeta(
        debugName: "enrolled_extract_req",
        argNames: ["that"],
      );

  @override
  Future<String> enrolledFallbackTarget(
      {required Enrolled that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_enrolled(that);
        return wire.wire_enrolled_fallback_target(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kEnrolledFallbackTargetConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kEnrolledFallbackTargetConstMeta => const TaskConstMeta(
        debugName: "enrolled_fallback_target",
        argNames: ["that"],
      );

  @override
  Future<V2UncheckedProposal?> enrolledProcessRes(
      {required Enrolled that,
      required List<int> body,
      required ClientResponse ctx,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_enrolled(that);
        var arg1 = cst_encode_list_prim_u_8_loose(body);
        var arg2 = cst_encode_box_autoadd_client_response(ctx);
        return wire.wire_enrolled_process_res(port_, arg0, arg1, arg2);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_opt_box_autoadd_v_2_unchecked_proposal,
        decodeErrorData: dco_decode_payjoin_error,
      ),
      constMeta: kEnrolledProcessResConstMeta,
      argValues: [that, body, ctx],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kEnrolledProcessResConstMeta => const TaskConstMeta(
        debugName: "enrolled_process_res",
        argNames: ["that", "body", "ctx"],
      );

  @override
  Future<Uint8List> enrolledSubdirectory(
      {required Enrolled that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_enrolled(that);
        return wire.wire_enrolled_subdirectory(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta: kEnrolledSubdirectoryConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kEnrolledSubdirectoryConstMeta => const TaskConstMeta(
        debugName: "enrolled_subdirectory",
        argNames: ["that"],
      );

  @override
  Future<((Url, Uint8List), ClientResponse)> enrollerExtractReq(
      {required Enroller that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_enroller(that);
        return wire.wire_enroller_extract_req(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_record_record_url_list_prim_u_8_strict_client_response,
        decodeErrorData: dco_decode_payjoin_error,
      ),
      constMeta: kEnrollerExtractReqConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kEnrollerExtractReqConstMeta => const TaskConstMeta(
        debugName: "enroller_extract_req",
        argNames: ["that"],
      );

  @override
  Future<Enroller> enrollerFromRelayConfig(
      {required String relayUrl,
      required String ohttpConfigBase64,
      required String ohttpProxyUrl,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_String(relayUrl);
        var arg1 = cst_encode_String(ohttpConfigBase64);
        var arg2 = cst_encode_String(ohttpProxyUrl);
        return wire.wire_enroller_from_relay_config(port_, arg0, arg1, arg2);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_enroller,
        decodeErrorData: null,
      ),
      constMeta: kEnrollerFromRelayConfigConstMeta,
      argValues: [relayUrl, ohttpConfigBase64, ohttpProxyUrl],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kEnrollerFromRelayConfigConstMeta => const TaskConstMeta(
        debugName: "enroller_from_relay_config",
        argNames: ["relayUrl", "ohttpConfigBase64", "ohttpProxyUrl"],
      );

  @override
  Future<String> enrollerPayjoinSubdir({required Enroller that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_enroller(that);
        return wire.wire_enroller_payjoin_subdir(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kEnrollerPayjoinSubdirConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kEnrollerPayjoinSubdirConstMeta => const TaskConstMeta(
        debugName: "enroller_payjoin_subdir",
        argNames: ["that"],
      );

  @override
  Future<Enrolled> enrollerProcessRes(
      {required Enroller that,
      required List<int> body,
      required ClientResponse ctx,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_enroller(that);
        var arg1 = cst_encode_list_prim_u_8_loose(body);
        var arg2 = cst_encode_box_autoadd_client_response(ctx);
        return wire.wire_enroller_process_res(port_, arg0, arg1, arg2);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_enrolled,
        decodeErrorData: dco_decode_payjoin_error,
      ),
      constMeta: kEnrollerProcessResConstMeta,
      argValues: [that, body, ctx],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kEnrollerProcessResConstMeta => const TaskConstMeta(
        debugName: "enroller_process_res",
        argNames: ["that", "body", "ctx"],
      );

  @override
  Future<String> enrollerSubdirectory({required Enroller that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_enroller(that);
        return wire.wire_enroller_subdirectory(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kEnrollerSubdirectoryConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kEnrollerSubdirectoryConstMeta => const TaskConstMeta(
        debugName: "enroller_subdirectory",
        argNames: ["that"],
      );

  @override
  Future<MaybeMixedInputScripts> maybeInputsOwnedCheckInputsNotOwned(
      {required MaybeInputsOwned ptr,
      required FutureOr<bool> Function(Uint8List) isOwned,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_maybe_inputs_owned(ptr);
        var arg1 =
            cst_encode_DartFn_Inputs_list_prim_u_8_strict_Output_bool(isOwned);
        return wire.wire_maybe_inputs_owned_check_inputs_not_owned(
            port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_maybe_mixed_input_scripts,
        decodeErrorData: dco_decode_payjoin_error,
      ),
      constMeta: kMaybeInputsOwnedCheckInputsNotOwnedConstMeta,
      argValues: [ptr, isOwned],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kMaybeInputsOwnedCheckInputsNotOwnedConstMeta =>
      const TaskConstMeta(
        debugName: "maybe_inputs_owned_check_inputs_not_owned",
        argNames: ["ptr", "isOwned"],
      );

  @override
  Future<OutputsUnknown> maybeInputsSeenCheckNoInputsSeenBefore(
      {required MaybeInputsSeen ptr,
      required FutureOr<bool> Function(OutPoint) isKnown,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_maybe_inputs_seen(ptr);
        var arg1 = cst_encode_DartFn_Inputs_out_point_Output_bool(isKnown);
        return wire.wire_maybe_inputs_seen_check_no_inputs_seen_before(
            port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_outputs_unknown,
        decodeErrorData: dco_decode_payjoin_error,
      ),
      constMeta: kMaybeInputsSeenCheckNoInputsSeenBeforeConstMeta,
      argValues: [ptr, isKnown],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kMaybeInputsSeenCheckNoInputsSeenBeforeConstMeta =>
      const TaskConstMeta(
        debugName: "maybe_inputs_seen_check_no_inputs_seen_before",
        argNames: ["ptr", "isKnown"],
      );

  @override
  Future<MaybeInputsSeen> maybeMixedInputScriptsCheckNoMixedInputScripts(
      {required MaybeMixedInputScripts ptr, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_maybe_mixed_input_scripts(ptr);
        return wire.wire_maybe_mixed_input_scripts_check_no_mixed_input_scripts(
            port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_maybe_inputs_seen,
        decodeErrorData: dco_decode_payjoin_error,
      ),
      constMeta: kMaybeMixedInputScriptsCheckNoMixedInputScriptsConstMeta,
      argValues: [ptr],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kMaybeMixedInputScriptsCheckNoMixedInputScriptsConstMeta =>
      const TaskConstMeta(
        debugName: "maybe_mixed_input_scripts_check_no_mixed_input_scripts",
        argNames: ["ptr"],
      );

  @override
  Future<ProvisionalProposal> outputsUnknownIdentifyReceiverOutputs(
      {required OutputsUnknown ptr,
      required FutureOr<bool> Function(Uint8List) isReceiverOutput,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_outputs_unknown(ptr);
        var arg1 = cst_encode_DartFn_Inputs_list_prim_u_8_strict_Output_bool(
            isReceiverOutput);
        return wire.wire_outputs_unknown_identify_receiver_outputs(
            port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_provisional_proposal,
        decodeErrorData: dco_decode_payjoin_error,
      ),
      constMeta: kOutputsUnknownIdentifyReceiverOutputsConstMeta,
      argValues: [ptr, isReceiverOutput],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kOutputsUnknownIdentifyReceiverOutputsConstMeta =>
      const TaskConstMeta(
        debugName: "outputs_unknown_identify_receiver_outputs",
        argNames: ["ptr", "isReceiverOutput"],
      );

  @override
  Future<bool> payjoinProposalIsOutputSubstitutionDisabled(
      {required PayjoinProposal that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_payjoin_proposal(that);
        return wire.wire_payjoin_proposal_is_output_substitution_disabled(
            port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kPayjoinProposalIsOutputSubstitutionDisabledConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kPayjoinProposalIsOutputSubstitutionDisabledConstMeta =>
      const TaskConstMeta(
        debugName: "payjoin_proposal_is_output_substitution_disabled",
        argNames: ["that"],
      );

  @override
  Future<Uint64List> payjoinProposalOwnedVouts(
      {required PayjoinProposal that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_payjoin_proposal(that);
        return wire.wire_payjoin_proposal_owned_vouts(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_list_prim_u_64_strict,
        decodeErrorData: null,
      ),
      constMeta: kPayjoinProposalOwnedVoutsConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kPayjoinProposalOwnedVoutsConstMeta => const TaskConstMeta(
        debugName: "payjoin_proposal_owned_vouts",
        argNames: ["that"],
      );

  @override
  Future<String> payjoinProposalPsbt(
      {required PayjoinProposal that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_payjoin_proposal(that);
        return wire.wire_payjoin_proposal_psbt(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kPayjoinProposalPsbtConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kPayjoinProposalPsbtConstMeta => const TaskConstMeta(
        debugName: "payjoin_proposal_psbt",
        argNames: ["that"],
      );

  @override
  Future<List<OutPoint>> payjoinProposalUtxosToBeLocked(
      {required PayjoinProposal that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_payjoin_proposal(that);
        return wire.wire_payjoin_proposal_utxos_to_be_locked(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_list_out_point,
        decodeErrorData: null,
      ),
      constMeta: kPayjoinProposalUtxosToBeLockedConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kPayjoinProposalUtxosToBeLockedConstMeta =>
      const TaskConstMeta(
        debugName: "payjoin_proposal_utxos_to_be_locked",
        argNames: ["that"],
      );

  @override
  Future<void> provisionalProposalContributeNonWitnessInput(
      {required ProvisionalProposal that,
      required List<int> tx,
      required OutPoint outpoint,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_provisional_proposal(that);
        var arg1 = cst_encode_list_prim_u_8_loose(tx);
        var arg2 = cst_encode_box_autoadd_out_point(outpoint);
        return wire.wire_provisional_proposal_contribute_non_witness_input(
            port_, arg0, arg1, arg2);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: dco_decode_payjoin_error,
      ),
      constMeta: kProvisionalProposalContributeNonWitnessInputConstMeta,
      argValues: [that, tx, outpoint],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kProvisionalProposalContributeNonWitnessInputConstMeta =>
      const TaskConstMeta(
        debugName: "provisional_proposal_contribute_non_witness_input",
        argNames: ["that", "tx", "outpoint"],
      );

  @override
  Future<void> provisionalProposalContributeWitnessInput(
      {required ProvisionalProposal that,
      required TxOut txo,
      required OutPoint outpoint,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_provisional_proposal(that);
        var arg1 = cst_encode_box_autoadd_tx_out(txo);
        var arg2 = cst_encode_box_autoadd_out_point(outpoint);
        return wire.wire_provisional_proposal_contribute_witness_input(
            port_, arg0, arg1, arg2);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: dco_decode_payjoin_error,
      ),
      constMeta: kProvisionalProposalContributeWitnessInputConstMeta,
      argValues: [that, txo, outpoint],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kProvisionalProposalContributeWitnessInputConstMeta =>
      const TaskConstMeta(
        debugName: "provisional_proposal_contribute_witness_input",
        argNames: ["that", "txo", "outpoint"],
      );

  @override
  Future<PayjoinProposal> provisionalProposalFinalizeProposal(
      {required ProvisionalProposal ptr,
      required FutureOr<String> Function(String) processPsbt,
      int? minFeerateSatPerVb,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_provisional_proposal(ptr);
        var arg1 = cst_encode_DartFn_Inputs_String_Output_String(processPsbt);
        var arg2 = cst_encode_opt_box_autoadd_u_64(minFeerateSatPerVb);
        return wire.wire_provisional_proposal_finalize_proposal(
            port_, arg0, arg1, arg2);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_payjoin_proposal,
        decodeErrorData: dco_decode_payjoin_error,
      ),
      constMeta: kProvisionalProposalFinalizeProposalConstMeta,
      argValues: [ptr, processPsbt, minFeerateSatPerVb],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kProvisionalProposalFinalizeProposalConstMeta =>
      const TaskConstMeta(
        debugName: "provisional_proposal_finalize_proposal",
        argNames: ["ptr", "processPsbt", "minFeerateSatPerVb"],
      );

  @override
  Future<void> provisionalProposalSubstituteOutputAddress(
      {required ProvisionalProposal that,
      required String address,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_provisional_proposal(that);
        var arg1 = cst_encode_String(address);
        return wire.wire_provisional_proposal_substitute_output_address(
            port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: dco_decode_payjoin_error,
      ),
      constMeta: kProvisionalProposalSubstituteOutputAddressConstMeta,
      argValues: [that, address],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kProvisionalProposalSubstituteOutputAddressConstMeta =>
      const TaskConstMeta(
        debugName: "provisional_proposal_substitute_output_address",
        argNames: ["that", "address"],
      );

  @override
  Future<OutPoint> provisionalProposalTryPreservingPrivacy(
      {required ProvisionalProposal that,
      required Map<int, OutPoint> candidateInputs,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_provisional_proposal(that);
        var arg1 = cst_encode_Map_u_64_out_point(candidateInputs);
        return wire.wire_provisional_proposal_try_preserving_privacy(
            port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_out_point,
        decodeErrorData: dco_decode_payjoin_error,
      ),
      constMeta: kProvisionalProposalTryPreservingPrivacyConstMeta,
      argValues: [that, candidateInputs],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kProvisionalProposalTryPreservingPrivacyConstMeta =>
      const TaskConstMeta(
        debugName: "provisional_proposal_try_preserving_privacy",
        argNames: ["that", "candidateInputs"],
      );

  @override
  Future<MaybeInputsOwned> uncheckedProposalAssumeInteractiveReceiver(
      {required UncheckedProposal ptr, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_unchecked_proposal(ptr);
        return wire.wire_unchecked_proposal_assume_interactive_receiver(
            port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_maybe_inputs_owned,
        decodeErrorData: null,
      ),
      constMeta: kUncheckedProposalAssumeInteractiveReceiverConstMeta,
      argValues: [ptr],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kUncheckedProposalAssumeInteractiveReceiverConstMeta =>
      const TaskConstMeta(
        debugName: "unchecked_proposal_assume_interactive_receiver",
        argNames: ["ptr"],
      );

  @override
  Future<MaybeInputsOwned> uncheckedProposalCheckBroadcastSuitability(
      {required UncheckedProposal ptr,
      int? minFeeRate,
      required FutureOr<bool> Function(Uint8List) canBroadcast,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_unchecked_proposal(ptr);
        var arg1 = cst_encode_opt_box_autoadd_u_64(minFeeRate);
        var arg2 = cst_encode_DartFn_Inputs_list_prim_u_8_strict_Output_bool(
            canBroadcast);
        return wire.wire_unchecked_proposal_check_broadcast_suitability(
            port_, arg0, arg1, arg2);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_maybe_inputs_owned,
        decodeErrorData: dco_decode_payjoin_error,
      ),
      constMeta: kUncheckedProposalCheckBroadcastSuitabilityConstMeta,
      argValues: [ptr, minFeeRate, canBroadcast],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kUncheckedProposalCheckBroadcastSuitabilityConstMeta =>
      const TaskConstMeta(
        debugName: "unchecked_proposal_check_broadcast_suitability",
        argNames: ["ptr", "minFeeRate", "canBroadcast"],
      );

  @override
  Future<Uint8List> uncheckedProposalExtractTxToScheduleBroadcast(
      {required UncheckedProposal that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_unchecked_proposal(that);
        return wire.wire_unchecked_proposal_extract_tx_to_schedule_broadcast(
            port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta: kUncheckedProposalExtractTxToScheduleBroadcastConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kUncheckedProposalExtractTxToScheduleBroadcastConstMeta =>
      const TaskConstMeta(
        debugName: "unchecked_proposal_extract_tx_to_schedule_broadcast",
        argNames: ["that"],
      );

  @override
  Future<UncheckedProposal> uncheckedProposalFromRequest(
      {required List<int> body,
      required String query,
      required Headers headers,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_list_prim_u_8_loose(body);
        var arg1 = cst_encode_String(query);
        var arg2 = cst_encode_box_autoadd_headers(headers);
        return wire.wire_unchecked_proposal_from_request(
            port_, arg0, arg1, arg2);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unchecked_proposal,
        decodeErrorData: dco_decode_payjoin_error,
      ),
      constMeta: kUncheckedProposalFromRequestConstMeta,
      argValues: [body, query, headers],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kUncheckedProposalFromRequestConstMeta =>
      const TaskConstMeta(
        debugName: "unchecked_proposal_from_request",
        argNames: ["body", "query", "headers"],
      );

  @override
  Future<V2MaybeMixedInputScripts> v2MaybeInputsOwnedCheckInputsNotOwned(
      {required V2MaybeInputsOwned that,
      required FutureOr<bool> Function(Uint8List) isOwned,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_v_2_maybe_inputs_owned(that);
        var arg1 =
            cst_encode_DartFn_Inputs_list_prim_u_8_strict_Output_bool(isOwned);
        return wire.wire_v_2_maybe_inputs_owned_check_inputs_not_owned(
            port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_v_2_maybe_mixed_input_scripts,
        decodeErrorData: dco_decode_payjoin_error,
      ),
      constMeta: kV2MaybeInputsOwnedCheckInputsNotOwnedConstMeta,
      argValues: [that, isOwned],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kV2MaybeInputsOwnedCheckInputsNotOwnedConstMeta =>
      const TaskConstMeta(
        debugName: "v_2_maybe_inputs_owned_check_inputs_not_owned",
        argNames: ["that", "isOwned"],
      );

  @override
  Future<V2OutputsUnknown> v2MaybeInputsSeenCheckNoInputsSeenBefore(
      {required V2MaybeInputsSeen that,
      required FutureOr<bool> Function(OutPoint) isKnown,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_v_2_maybe_inputs_seen(that);
        var arg1 = cst_encode_DartFn_Inputs_out_point_Output_bool(isKnown);
        return wire.wire_v_2_maybe_inputs_seen_check_no_inputs_seen_before(
            port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_v_2_outputs_unknown,
        decodeErrorData: dco_decode_payjoin_error,
      ),
      constMeta: kV2MaybeInputsSeenCheckNoInputsSeenBeforeConstMeta,
      argValues: [that, isKnown],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kV2MaybeInputsSeenCheckNoInputsSeenBeforeConstMeta =>
      const TaskConstMeta(
        debugName: "v_2_maybe_inputs_seen_check_no_inputs_seen_before",
        argNames: ["that", "isKnown"],
      );

  @override
  Future<V2MaybeInputsSeen> v2MaybeMixedInputScriptsCheckNoMixedInputScripts(
      {required V2MaybeMixedInputScripts that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_v_2_maybe_mixed_input_scripts(that);
        return wire
            .wire_v_2_maybe_mixed_input_scripts_check_no_mixed_input_scripts(
                port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_v_2_maybe_inputs_seen,
        decodeErrorData: dco_decode_payjoin_error,
      ),
      constMeta: kV2MaybeMixedInputScriptsCheckNoMixedInputScriptsConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kV2MaybeMixedInputScriptsCheckNoMixedInputScriptsConstMeta =>
          const TaskConstMeta(
            debugName:
                "v_2_maybe_mixed_input_scripts_check_no_mixed_input_scripts",
            argNames: ["that"],
          );

  @override
  Future<V2ProvisionalProposal> v2OutputsUnknownIdentifyReceiverOutputs(
      {required V2OutputsUnknown that,
      required FutureOr<bool> Function(Uint8List) isReceiverOutput,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_v_2_outputs_unknown(that);
        var arg1 = cst_encode_DartFn_Inputs_list_prim_u_8_strict_Output_bool(
            isReceiverOutput);
        return wire.wire_v_2_outputs_unknown_identify_receiver_outputs(
            port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_v_2_provisional_proposal,
        decodeErrorData: dco_decode_payjoin_error,
      ),
      constMeta: kV2OutputsUnknownIdentifyReceiverOutputsConstMeta,
      argValues: [that, isReceiverOutput],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kV2OutputsUnknownIdentifyReceiverOutputsConstMeta =>
      const TaskConstMeta(
        debugName: "v_2_outputs_unknown_identify_receiver_outputs",
        argNames: ["that", "isReceiverOutput"],
      );

  @override
  Future<Uint8List> v2PayjoinProposalDeserializeRes(
      {required V2PayjoinProposal that,
      required List<int> res,
      required ClientResponse ohttpContext,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_v_2_payjoin_proposal(that);
        var arg1 = cst_encode_list_prim_u_8_loose(res);
        var arg2 = cst_encode_box_autoadd_client_response(ohttpContext);
        return wire.wire_v_2_payjoin_proposal_deserialize_res(
            port_, arg0, arg1, arg2);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_list_prim_u_8_strict,
        decodeErrorData: dco_decode_payjoin_error,
      ),
      constMeta: kV2PayjoinProposalDeserializeResConstMeta,
      argValues: [that, res, ohttpContext],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kV2PayjoinProposalDeserializeResConstMeta =>
      const TaskConstMeta(
        debugName: "v_2_payjoin_proposal_deserialize_res",
        argNames: ["that", "res", "ohttpContext"],
      );

  @override
  Future<String> v2PayjoinProposalExtractV1Req(
      {required V2PayjoinProposal that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_v_2_payjoin_proposal(that);
        return wire.wire_v_2_payjoin_proposal_extract_v1_req(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kV2PayjoinProposalExtractV1ReqConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kV2PayjoinProposalExtractV1ReqConstMeta =>
      const TaskConstMeta(
        debugName: "v_2_payjoin_proposal_extract_v1_req",
        argNames: ["that"],
      );

  @override
  Future<((Url, Uint8List), ClientResponse)> v2PayjoinProposalExtractV2Req(
      {required V2PayjoinProposal that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_v_2_payjoin_proposal(that);
        return wire.wire_v_2_payjoin_proposal_extract_v2_req(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_record_record_url_list_prim_u_8_strict_client_response,
        decodeErrorData: dco_decode_payjoin_error,
      ),
      constMeta: kV2PayjoinProposalExtractV2ReqConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kV2PayjoinProposalExtractV2ReqConstMeta =>
      const TaskConstMeta(
        debugName: "v_2_payjoin_proposal_extract_v2_req",
        argNames: ["that"],
      );

  @override
  Future<bool> v2PayjoinProposalIsOutputSubstitutionDisabled(
      {required V2PayjoinProposal that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_v_2_payjoin_proposal(that);
        return wire.wire_v_2_payjoin_proposal_is_output_substitution_disabled(
            port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kV2PayjoinProposalIsOutputSubstitutionDisabledConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kV2PayjoinProposalIsOutputSubstitutionDisabledConstMeta =>
      const TaskConstMeta(
        debugName: "v_2_payjoin_proposal_is_output_substitution_disabled",
        argNames: ["that"],
      );

  @override
  Future<Uint64List> v2PayjoinProposalOwnedVouts(
      {required V2PayjoinProposal that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_v_2_payjoin_proposal(that);
        return wire.wire_v_2_payjoin_proposal_owned_vouts(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_list_prim_u_64_strict,
        decodeErrorData: null,
      ),
      constMeta: kV2PayjoinProposalOwnedVoutsConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kV2PayjoinProposalOwnedVoutsConstMeta =>
      const TaskConstMeta(
        debugName: "v_2_payjoin_proposal_owned_vouts",
        argNames: ["that"],
      );

  @override
  Future<String> v2PayjoinProposalPsbt(
      {required V2PayjoinProposal that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_v_2_payjoin_proposal(that);
        return wire.wire_v_2_payjoin_proposal_psbt(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kV2PayjoinProposalPsbtConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kV2PayjoinProposalPsbtConstMeta => const TaskConstMeta(
        debugName: "v_2_payjoin_proposal_psbt",
        argNames: ["that"],
      );

  @override
  Future<List<OutPoint>> v2PayjoinProposalUtxosToBeLocked(
      {required V2PayjoinProposal that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_v_2_payjoin_proposal(that);
        return wire.wire_v_2_payjoin_proposal_utxos_to_be_locked(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_list_out_point,
        decodeErrorData: null,
      ),
      constMeta: kV2PayjoinProposalUtxosToBeLockedConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kV2PayjoinProposalUtxosToBeLockedConstMeta =>
      const TaskConstMeta(
        debugName: "v_2_payjoin_proposal_utxos_to_be_locked",
        argNames: ["that"],
      );

  @override
  Future<void> v2ProvisionalProposalContributeNonWitnessInput(
      {required V2ProvisionalProposal that,
      required List<int> tx,
      required OutPoint outpoint,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_v_2_provisional_proposal(that);
        var arg1 = cst_encode_list_prim_u_8_loose(tx);
        var arg2 = cst_encode_box_autoadd_out_point(outpoint);
        return wire.wire_v_2_provisional_proposal_contribute_non_witness_input(
            port_, arg0, arg1, arg2);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: dco_decode_payjoin_error,
      ),
      constMeta: kV2ProvisionalProposalContributeNonWitnessInputConstMeta,
      argValues: [that, tx, outpoint],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kV2ProvisionalProposalContributeNonWitnessInputConstMeta =>
      const TaskConstMeta(
        debugName: "v_2_provisional_proposal_contribute_non_witness_input",
        argNames: ["that", "tx", "outpoint"],
      );

  @override
  Future<void> v2ProvisionalProposalContributeWitnessInput(
      {required V2ProvisionalProposal that,
      required TxOut txo,
      required OutPoint outpoint,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_v_2_provisional_proposal(that);
        var arg1 = cst_encode_box_autoadd_tx_out(txo);
        var arg2 = cst_encode_box_autoadd_out_point(outpoint);
        return wire.wire_v_2_provisional_proposal_contribute_witness_input(
            port_, arg0, arg1, arg2);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: dco_decode_payjoin_error,
      ),
      constMeta: kV2ProvisionalProposalContributeWitnessInputConstMeta,
      argValues: [that, txo, outpoint],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kV2ProvisionalProposalContributeWitnessInputConstMeta =>
      const TaskConstMeta(
        debugName: "v_2_provisional_proposal_contribute_witness_input",
        argNames: ["that", "txo", "outpoint"],
      );

  @override
  Future<V2PayjoinProposal> v2ProvisionalProposalFinalizeProposal(
      {required V2ProvisionalProposal that,
      required FutureOr<String> Function(String) processPsbt,
      int? minFeerateSatPerVb,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_v_2_provisional_proposal(that);
        var arg1 = cst_encode_DartFn_Inputs_String_Output_String(processPsbt);
        var arg2 = cst_encode_opt_box_autoadd_u_64(minFeerateSatPerVb);
        return wire.wire_v_2_provisional_proposal_finalize_proposal(
            port_, arg0, arg1, arg2);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_v_2_payjoin_proposal,
        decodeErrorData: dco_decode_payjoin_error,
      ),
      constMeta: kV2ProvisionalProposalFinalizeProposalConstMeta,
      argValues: [that, processPsbt, minFeerateSatPerVb],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kV2ProvisionalProposalFinalizeProposalConstMeta =>
      const TaskConstMeta(
        debugName: "v_2_provisional_proposal_finalize_proposal",
        argNames: ["that", "processPsbt", "minFeerateSatPerVb"],
      );

  @override
  Future<void> v2ProvisionalProposalSubstituteOutputAddress(
      {required V2ProvisionalProposal that,
      required String address,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_v_2_provisional_proposal(that);
        var arg1 = cst_encode_String(address);
        return wire.wire_v_2_provisional_proposal_substitute_output_address(
            port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: dco_decode_payjoin_error,
      ),
      constMeta: kV2ProvisionalProposalSubstituteOutputAddressConstMeta,
      argValues: [that, address],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kV2ProvisionalProposalSubstituteOutputAddressConstMeta =>
      const TaskConstMeta(
        debugName: "v_2_provisional_proposal_substitute_output_address",
        argNames: ["that", "address"],
      );

  @override
  Future<OutPoint> v2ProvisionalProposalTryPreservingPrivacy(
      {required V2ProvisionalProposal that,
      required Map<int, OutPoint> candidateInputs,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_v_2_provisional_proposal(that);
        var arg1 = cst_encode_Map_u_64_out_point(candidateInputs);
        return wire.wire_v_2_provisional_proposal_try_preserving_privacy(
            port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_out_point,
        decodeErrorData: dco_decode_payjoin_error,
      ),
      constMeta: kV2ProvisionalProposalTryPreservingPrivacyConstMeta,
      argValues: [that, candidateInputs],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kV2ProvisionalProposalTryPreservingPrivacyConstMeta =>
      const TaskConstMeta(
        debugName: "v_2_provisional_proposal_try_preserving_privacy",
        argNames: ["that", "candidateInputs"],
      );

  @override
  Future<V2MaybeInputsOwned> v2UncheckedProposalAssumeInteractiveReceiver(
      {required V2UncheckedProposal that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_v_2_unchecked_proposal(that);
        return wire.wire_v_2_unchecked_proposal_assume_interactive_receiver(
            port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_v_2_maybe_inputs_owned,
        decodeErrorData: null,
      ),
      constMeta: kV2UncheckedProposalAssumeInteractiveReceiverConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kV2UncheckedProposalAssumeInteractiveReceiverConstMeta =>
      const TaskConstMeta(
        debugName: "v_2_unchecked_proposal_assume_interactive_receiver",
        argNames: ["that"],
      );

  @override
  Future<V2MaybeInputsOwned> v2UncheckedProposalCheckBroadcastSuitability(
      {required V2UncheckedProposal that,
      int? minFeeRate,
      required FutureOr<bool> Function(Uint8List) canBroadcast,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_v_2_unchecked_proposal(that);
        var arg1 = cst_encode_opt_box_autoadd_u_64(minFeeRate);
        var arg2 = cst_encode_DartFn_Inputs_list_prim_u_8_strict_Output_bool(
            canBroadcast);
        return wire.wire_v_2_unchecked_proposal_check_broadcast_suitability(
            port_, arg0, arg1, arg2);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_v_2_maybe_inputs_owned,
        decodeErrorData: dco_decode_payjoin_error,
      ),
      constMeta: kV2UncheckedProposalCheckBroadcastSuitabilityConstMeta,
      argValues: [that, minFeeRate, canBroadcast],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kV2UncheckedProposalCheckBroadcastSuitabilityConstMeta =>
      const TaskConstMeta(
        debugName: "v_2_unchecked_proposal_check_broadcast_suitability",
        argNames: ["that", "minFeeRate", "canBroadcast"],
      );

  @override
  Future<Uint8List> v2UncheckedProposalExtractTxToScheduleBroadcast(
      {required V2UncheckedProposal that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_v_2_unchecked_proposal(that);
        return wire
            .wire_v_2_unchecked_proposal_extract_tx_to_schedule_broadcast(
                port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta: kV2UncheckedProposalExtractTxToScheduleBroadcastConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kV2UncheckedProposalExtractTxToScheduleBroadcastConstMeta =>
      const TaskConstMeta(
        debugName: "v_2_unchecked_proposal_extract_tx_to_schedule_broadcast",
        argNames: ["that"],
      );

  @override
  Future<String> contextV1ProcessResponse(
      {required ContextV1 that, required List<int> response, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_context_v_1(that);
        var arg1 = cst_encode_list_prim_u_8_loose(response);
        return wire.wire_context_v_1_process_response(port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: dco_decode_payjoin_error,
      ),
      constMeta: kContextV1ProcessResponseConstMeta,
      argValues: [that, response],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kContextV1ProcessResponseConstMeta => const TaskConstMeta(
        debugName: "context_v_1_process_response",
        argNames: ["that", "response"],
      );

  @override
  Future<String?> contextV2ProcessResponse(
      {required ContextV2 that, required List<int> response, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_context_v_2(that);
        var arg1 = cst_encode_list_prim_u_8_loose(response);
        return wire.wire_context_v_2_process_response(port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_opt_String,
        decodeErrorData: dco_decode_payjoin_error,
      ),
      constMeta: kContextV2ProcessResponseConstMeta,
      argValues: [that, response],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kContextV2ProcessResponseConstMeta => const TaskConstMeta(
        debugName: "context_v_2_process_response",
        argNames: ["that", "response"],
      );

  @override
  Future<RequestBuilder> requestBuilderAlwaysDisableOutputSubstitution(
      {required RequestBuilder that, required bool disable, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_request_builder(that);
        var arg1 = cst_encode_bool(disable);
        return wire.wire_request_builder_always_disable_output_substitution(
            port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_request_builder,
        decodeErrorData: null,
      ),
      constMeta: kRequestBuilderAlwaysDisableOutputSubstitutionConstMeta,
      argValues: [that, disable],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRequestBuilderAlwaysDisableOutputSubstitutionConstMeta =>
      const TaskConstMeta(
        debugName: "request_builder_always_disable_output_substitution",
        argNames: ["that", "disable"],
      );

  @override
  Future<RequestContext> requestBuilderBuildNonIncentivizing(
      {required RequestBuilder that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_request_builder(that);
        return wire.wire_request_builder_build_non_incentivizing(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_request_context,
        decodeErrorData: dco_decode_payjoin_error,
      ),
      constMeta: kRequestBuilderBuildNonIncentivizingConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRequestBuilderBuildNonIncentivizingConstMeta =>
      const TaskConstMeta(
        debugName: "request_builder_build_non_incentivizing",
        argNames: ["that"],
      );

  @override
  Future<RequestContext> requestBuilderBuildRecommended(
      {required RequestBuilder that, required int minFeeRate, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_request_builder(that);
        var arg1 = cst_encode_u_64(minFeeRate);
        return wire.wire_request_builder_build_recommended(port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_request_context,
        decodeErrorData: dco_decode_payjoin_error,
      ),
      constMeta: kRequestBuilderBuildRecommendedConstMeta,
      argValues: [that, minFeeRate],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRequestBuilderBuildRecommendedConstMeta =>
      const TaskConstMeta(
        debugName: "request_builder_build_recommended",
        argNames: ["that", "minFeeRate"],
      );

  @override
  Future<RequestContext> requestBuilderBuildWithAdditionalFee(
      {required RequestBuilder that,
      required int maxFeeContribution,
      int? changeIndex,
      required int minFeeRate,
      required bool clampFeeContribution,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_request_builder(that);
        var arg1 = cst_encode_u_64(maxFeeContribution);
        var arg2 = cst_encode_opt_box_autoadd_u_8(changeIndex);
        var arg3 = cst_encode_u_64(minFeeRate);
        var arg4 = cst_encode_bool(clampFeeContribution);
        return wire.wire_request_builder_build_with_additional_fee(
            port_, arg0, arg1, arg2, arg3, arg4);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_request_context,
        decodeErrorData: dco_decode_payjoin_error,
      ),
      constMeta: kRequestBuilderBuildWithAdditionalFeeConstMeta,
      argValues: [
        that,
        maxFeeContribution,
        changeIndex,
        minFeeRate,
        clampFeeContribution
      ],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRequestBuilderBuildWithAdditionalFeeConstMeta =>
      const TaskConstMeta(
        debugName: "request_builder_build_with_additional_fee",
        argNames: [
          "that",
          "maxFeeContribution",
          "changeIndex",
          "minFeeRate",
          "clampFeeContribution"
        ],
      );

  @override
  Future<RequestBuilder> requestBuilderFromPsbtAndUri(
      {required String psbtBase64, required Uri uri, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_String(psbtBase64);
        var arg1 = cst_encode_box_autoadd_uri(uri);
        return wire.wire_request_builder_from_psbt_and_uri(port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_request_builder,
        decodeErrorData: dco_decode_payjoin_error,
      ),
      constMeta: kRequestBuilderFromPsbtAndUriConstMeta,
      argValues: [psbtBase64, uri],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRequestBuilderFromPsbtAndUriConstMeta =>
      const TaskConstMeta(
        debugName: "request_builder_from_psbt_and_uri",
        argNames: ["psbtBase64", "uri"],
      );

  @override
  Future<RequestContextV1> requestContextExtractV1(
      {required RequestContext that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_request_context(that);
        return wire.wire_request_context_extract_v1(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_request_context_v_1,
        decodeErrorData: dco_decode_payjoin_error,
      ),
      constMeta: kRequestContextExtractV1ConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRequestContextExtractV1ConstMeta => const TaskConstMeta(
        debugName: "request_context_extract_v1",
        argNames: ["that"],
      );

  @override
  Future<RequestContextV2> requestContextExtractV2(
      {required RequestContext that,
      required String ohttpProxyUrl,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_request_context(that);
        var arg1 = cst_encode_String(ohttpProxyUrl);
        return wire.wire_request_context_extract_v2(port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_request_context_v_2,
        decodeErrorData: dco_decode_payjoin_error,
      ),
      constMeta: kRequestContextExtractV2ConstMeta,
      argValues: [that, ohttpProxyUrl],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRequestContextExtractV2ConstMeta => const TaskConstMeta(
        debugName: "request_context_extract_v2",
        argNames: ["that", "ohttpProxyUrl"],
      );

  @override
  Future<String> uriAddress({required Uri that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_uri(that);
        return wire.wire_uri_address(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kUriAddressConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kUriAddressConstMeta => const TaskConstMeta(
        debugName: "uri_address",
        argNames: ["that"],
      );

  @override
  Future<int?> uriAmount({required Uri that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_uri(that);
        return wire.wire_uri_amount(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_opt_box_autoadd_u_64,
        decodeErrorData: null,
      ),
      constMeta: kUriAmountConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kUriAmountConstMeta => const TaskConstMeta(
        debugName: "uri_amount",
        argNames: ["that"],
      );

  @override
  Future<Uri> uriFromStr({required String uri, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_String(uri);
        return wire.wire_uri_from_str(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_uri,
        decodeErrorData: dco_decode_payjoin_error,
      ),
      constMeta: kUriFromStrConstMeta,
      argValues: [uri],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kUriFromStrConstMeta => const TaskConstMeta(
        debugName: "uri_from_str",
        argNames: ["uri"],
      );

  @override
  Future<Url> urlFromStr({required String url, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_String(url);
        return wire.wire_url_from_str(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_url,
        decodeErrorData: dco_decode_payjoin_error,
      ),
      constMeta: kUrlFromStrConstMeta,
      argValues: [url],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kUrlFromStrConstMeta => const TaskConstMeta(
        debugName: "url_from_str",
        argNames: ["url"],
      );

  @override
  Future<String?> urlQuery({required Url that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_url(that);
        return wire.wire_url_query(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_opt_String,
        decodeErrorData: null,
      ),
      constMeta: kUrlQueryConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kUrlQueryConstMeta => const TaskConstMeta(
        debugName: "url_query",
        argNames: ["that"],
      );

  Future<void> Function(int, dynamic) encode_DartFn_Inputs_String_Output_String(
      FutureOr<String> Function(String) raw) {
    return (callId, rawArg0) async {
      final arg0 = dco_decode_String(rawArg0);

      final rawOutput = await raw(arg0);

      final serializer = SseSerializer(generalizedFrbRustBinding);
      sse_encode_String(rawOutput, serializer);
      final output = serializer.intoRaw();

      generalizedFrbRustBinding.dartFnDeliverOutput(
          callId: callId,
          ptr: output.ptr,
          rustVecLen: output.rustVecLen,
          dataLen: output.dataLen);
    };
  }

  Future<void> Function(int, dynamic)
      encode_DartFn_Inputs_list_prim_u_8_strict_Output_bool(
          FutureOr<bool> Function(Uint8List) raw) {
    return (callId, rawArg0) async {
      final arg0 = dco_decode_list_prim_u_8_strict(rawArg0);

      final rawOutput = await raw(arg0);

      final serializer = SseSerializer(generalizedFrbRustBinding);
      sse_encode_bool(rawOutput, serializer);
      final output = serializer.intoRaw();

      generalizedFrbRustBinding.dartFnDeliverOutput(
          callId: callId,
          ptr: output.ptr,
          rustVecLen: output.rustVecLen,
          dataLen: output.dataLen);
    };
  }

  Future<void> Function(int, dynamic)
      encode_DartFn_Inputs_out_point_Output_bool(
          FutureOr<bool> Function(OutPoint) raw) {
    return (callId, rawArg0) async {
      final arg0 = dco_decode_out_point(rawArg0);

      final rawOutput = await raw(arg0);

      final serializer = SseSerializer(generalizedFrbRustBinding);
      sse_encode_bool(rawOutput, serializer);
      final output = serializer.intoRaw();

      generalizedFrbRustBinding.dartFnDeliverOutput(
          callId: callId,
          ptr: output.ptr,
          rustVecLen: output.rustVecLen,
          dataLen: output.dataLen);
    };
  }

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ArcPayjoinFfiReceiveV1MaybeInputsOwned =>
          wire.rust_arc_increment_strong_count_RustOpaque_Arcpayjoin_ffireceivev1MaybeInputsOwned;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ArcPayjoinFfiReceiveV1MaybeInputsOwned =>
          wire.rust_arc_decrement_strong_count_RustOpaque_Arcpayjoin_ffireceivev1MaybeInputsOwned;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ArcPayjoinFfiReceiveV1MaybeInputsSeen =>
          wire.rust_arc_increment_strong_count_RustOpaque_Arcpayjoin_ffireceivev1MaybeInputsSeen;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ArcPayjoinFfiReceiveV1MaybeInputsSeen =>
          wire.rust_arc_decrement_strong_count_RustOpaque_Arcpayjoin_ffireceivev1MaybeInputsSeen;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ArcPayjoinFfiReceiveV1MaybeMixedInputScripts =>
          wire.rust_arc_increment_strong_count_RustOpaque_Arcpayjoin_ffireceivev1MaybeMixedInputScripts;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ArcPayjoinFfiReceiveV1MaybeMixedInputScripts =>
          wire.rust_arc_decrement_strong_count_RustOpaque_Arcpayjoin_ffireceivev1MaybeMixedInputScripts;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ArcPayjoinFfiReceiveV1OutputsUnknown =>
          wire.rust_arc_increment_strong_count_RustOpaque_Arcpayjoin_ffireceivev1OutputsUnknown;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ArcPayjoinFfiReceiveV1OutputsUnknown =>
          wire.rust_arc_decrement_strong_count_RustOpaque_Arcpayjoin_ffireceivev1OutputsUnknown;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ArcPayjoinFfiReceiveV1PayjoinProposal =>
          wire.rust_arc_increment_strong_count_RustOpaque_Arcpayjoin_ffireceivev1PayjoinProposal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ArcPayjoinFfiReceiveV1PayjoinProposal =>
          wire.rust_arc_decrement_strong_count_RustOpaque_Arcpayjoin_ffireceivev1PayjoinProposal;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ArcPayjoinFfiReceiveV1ProvisionalProposal =>
          wire.rust_arc_increment_strong_count_RustOpaque_Arcpayjoin_ffireceivev1ProvisionalProposal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ArcPayjoinFfiReceiveV1ProvisionalProposal =>
          wire.rust_arc_decrement_strong_count_RustOpaque_Arcpayjoin_ffireceivev1ProvisionalProposal;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ArcPayjoinFfiReceiveV2Enrolled => wire
          .rust_arc_increment_strong_count_RustOpaque_Arcpayjoin_ffireceivev2Enrolled;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ArcPayjoinFfiReceiveV2Enrolled => wire
          .rust_arc_decrement_strong_count_RustOpaque_Arcpayjoin_ffireceivev2Enrolled;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ArcPayjoinFfiReceiveV2V2MaybeInputsOwned =>
          wire.rust_arc_increment_strong_count_RustOpaque_Arcpayjoin_ffireceivev2V2MaybeInputsOwned;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ArcPayjoinFfiReceiveV2V2MaybeInputsOwned =>
          wire.rust_arc_decrement_strong_count_RustOpaque_Arcpayjoin_ffireceivev2V2MaybeInputsOwned;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ArcPayjoinFfiReceiveV2V2MaybeInputsSeen =>
          wire.rust_arc_increment_strong_count_RustOpaque_Arcpayjoin_ffireceivev2V2MaybeInputsSeen;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ArcPayjoinFfiReceiveV2V2MaybeInputsSeen =>
          wire.rust_arc_decrement_strong_count_RustOpaque_Arcpayjoin_ffireceivev2V2MaybeInputsSeen;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ArcPayjoinFfiReceiveV2V2MaybeMixedInputScripts =>
          wire.rust_arc_increment_strong_count_RustOpaque_Arcpayjoin_ffireceivev2V2MaybeMixedInputScripts;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ArcPayjoinFfiReceiveV2V2MaybeMixedInputScripts =>
          wire.rust_arc_decrement_strong_count_RustOpaque_Arcpayjoin_ffireceivev2V2MaybeMixedInputScripts;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ArcPayjoinFfiReceiveV2V2OutputsUnknown =>
          wire.rust_arc_increment_strong_count_RustOpaque_Arcpayjoin_ffireceivev2V2OutputsUnknown;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ArcPayjoinFfiReceiveV2V2OutputsUnknown =>
          wire.rust_arc_decrement_strong_count_RustOpaque_Arcpayjoin_ffireceivev2V2OutputsUnknown;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ArcPayjoinFfiReceiveV2V2PayjoinProposal =>
          wire.rust_arc_increment_strong_count_RustOpaque_Arcpayjoin_ffireceivev2V2PayjoinProposal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ArcPayjoinFfiReceiveV2V2PayjoinProposal =>
          wire.rust_arc_decrement_strong_count_RustOpaque_Arcpayjoin_ffireceivev2V2PayjoinProposal;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ArcPayjoinFfiReceiveV2V2ProvisionalProposal =>
          wire.rust_arc_increment_strong_count_RustOpaque_Arcpayjoin_ffireceivev2V2ProvisionalProposal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ArcPayjoinFfiReceiveV2V2ProvisionalProposal =>
          wire.rust_arc_decrement_strong_count_RustOpaque_Arcpayjoin_ffireceivev2V2ProvisionalProposal;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ArcPayjoinFfiSendV1ContextV1 => wire
          .rust_arc_increment_strong_count_RustOpaque_Arcpayjoin_ffisendv1ContextV1;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ArcPayjoinFfiSendV1ContextV1 => wire
          .rust_arc_decrement_strong_count_RustOpaque_Arcpayjoin_ffisendv1ContextV1;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ArcPayjoinFfiSendV1RequestBuilder => wire
          .rust_arc_increment_strong_count_RustOpaque_Arcpayjoin_ffisendv1RequestBuilder;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ArcPayjoinFfiSendV1RequestBuilder => wire
          .rust_arc_decrement_strong_count_RustOpaque_Arcpayjoin_ffisendv1RequestBuilder;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ArcPayjoinFfiSendV1RequestContext => wire
          .rust_arc_increment_strong_count_RustOpaque_Arcpayjoin_ffisendv1RequestContext;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ArcPayjoinFfiSendV1RequestContext => wire
          .rust_arc_decrement_strong_count_RustOpaque_Arcpayjoin_ffisendv1RequestContext;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ArcPayjoinFfiSendV2ContextV2 => wire
          .rust_arc_increment_strong_count_RustOpaque_Arcpayjoin_ffisendv2ContextV2;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ArcPayjoinFfiSendV2ContextV2 => wire
          .rust_arc_decrement_strong_count_RustOpaque_Arcpayjoin_ffisendv2ContextV2;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ArcPayjoinFfiUriUri =>
          wire.rust_arc_increment_strong_count_RustOpaque_Arcpayjoin_ffiuriUri;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ArcPayjoinFfiUriUri =>
          wire.rust_arc_decrement_strong_count_RustOpaque_Arcpayjoin_ffiuriUri;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ArcPayjoinFfiUriUrl =>
          wire.rust_arc_increment_strong_count_RustOpaque_Arcpayjoin_ffiuriUrl;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ArcPayjoinFfiUriUrl =>
          wire.rust_arc_decrement_strong_count_RustOpaque_Arcpayjoin_ffiuriUrl;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_MutexOptionOhttpClientResponse => wire
          .rust_arc_increment_strong_count_RustOpaque_MutexOptionohttpClientResponse;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_MutexOptionOhttpClientResponse => wire
          .rust_arc_decrement_strong_count_RustOpaque_MutexOptionohttpClientResponse;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_PayjoinFfiReceiveV1UncheckedProposal =>
          wire.rust_arc_increment_strong_count_RustOpaque_payjoin_ffireceivev1UncheckedProposal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_PayjoinFfiReceiveV1UncheckedProposal =>
          wire.rust_arc_decrement_strong_count_RustOpaque_payjoin_ffireceivev1UncheckedProposal;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_PayjoinFfiReceiveV2Enroller => wire
          .rust_arc_increment_strong_count_RustOpaque_payjoin_ffireceivev2Enroller;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_PayjoinFfiReceiveV2Enroller => wire
          .rust_arc_decrement_strong_count_RustOpaque_payjoin_ffireceivev2Enroller;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_PayjoinFfiReceiveV2V2UncheckedProposal =>
          wire.rust_arc_increment_strong_count_RustOpaque_payjoin_ffireceivev2V2UncheckedProposal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_PayjoinFfiReceiveV2V2UncheckedProposal =>
          wire.rust_arc_decrement_strong_count_RustOpaque_payjoin_ffireceivev2V2UncheckedProposal;

  @protected
  FutureOr<String> Function(String)
      dco_decode_DartFn_Inputs_String_Output_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError('');
  }

  @protected
  FutureOr<bool> Function(Uint8List)
      dco_decode_DartFn_Inputs_list_prim_u_8_strict_Output_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError('');
  }

  @protected
  FutureOr<bool> Function(OutPoint)
      dco_decode_DartFn_Inputs_out_point_Output_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError('');
  }

  @protected
  Object dco_decode_DartOpaque(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return decodeDartOpaque(raw, generalizedFrbRustBinding);
  }

  @protected
  Map<String, String> dco_decode_Map_String_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(dco_decode_list_record_string_string(raw)
        .map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, OutPoint> dco_decode_Map_u_64_out_point(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(dco_decode_list_record_u_64_out_point(raw)
        .map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  ArcPayjoinFfiReceiveV1MaybeInputsOwned
      dco_decode_RustOpaque_Arcpayjoin_ffireceivev1MaybeInputsOwned(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ArcPayjoinFfiReceiveV1MaybeInputsOwned.dcoDecode(
        raw as List<dynamic>);
  }

  @protected
  ArcPayjoinFfiReceiveV1MaybeInputsSeen
      dco_decode_RustOpaque_Arcpayjoin_ffireceivev1MaybeInputsSeen(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ArcPayjoinFfiReceiveV1MaybeInputsSeen.dcoDecode(
        raw as List<dynamic>);
  }

  @protected
  ArcPayjoinFfiReceiveV1MaybeMixedInputScripts
      dco_decode_RustOpaque_Arcpayjoin_ffireceivev1MaybeMixedInputScripts(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ArcPayjoinFfiReceiveV1MaybeMixedInputScripts.dcoDecode(
        raw as List<dynamic>);
  }

  @protected
  ArcPayjoinFfiReceiveV1OutputsUnknown
      dco_decode_RustOpaque_Arcpayjoin_ffireceivev1OutputsUnknown(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ArcPayjoinFfiReceiveV1OutputsUnknown.dcoDecode(raw as List<dynamic>);
  }

  @protected
  ArcPayjoinFfiReceiveV1PayjoinProposal
      dco_decode_RustOpaque_Arcpayjoin_ffireceivev1PayjoinProposal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ArcPayjoinFfiReceiveV1PayjoinProposal.dcoDecode(
        raw as List<dynamic>);
  }

  @protected
  ArcPayjoinFfiReceiveV1ProvisionalProposal
      dco_decode_RustOpaque_Arcpayjoin_ffireceivev1ProvisionalProposal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ArcPayjoinFfiReceiveV1ProvisionalProposal.dcoDecode(
        raw as List<dynamic>);
  }

  @protected
  ArcPayjoinFfiReceiveV2Enrolled
      dco_decode_RustOpaque_Arcpayjoin_ffireceivev2Enrolled(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ArcPayjoinFfiReceiveV2Enrolled.dcoDecode(raw as List<dynamic>);
  }

  @protected
  ArcPayjoinFfiReceiveV2V2MaybeInputsOwned
      dco_decode_RustOpaque_Arcpayjoin_ffireceivev2V2MaybeInputsOwned(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ArcPayjoinFfiReceiveV2V2MaybeInputsOwned.dcoDecode(
        raw as List<dynamic>);
  }

  @protected
  ArcPayjoinFfiReceiveV2V2MaybeInputsSeen
      dco_decode_RustOpaque_Arcpayjoin_ffireceivev2V2MaybeInputsSeen(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ArcPayjoinFfiReceiveV2V2MaybeInputsSeen.dcoDecode(
        raw as List<dynamic>);
  }

  @protected
  ArcPayjoinFfiReceiveV2V2MaybeMixedInputScripts
      dco_decode_RustOpaque_Arcpayjoin_ffireceivev2V2MaybeMixedInputScripts(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ArcPayjoinFfiReceiveV2V2MaybeMixedInputScripts.dcoDecode(
        raw as List<dynamic>);
  }

  @protected
  ArcPayjoinFfiReceiveV2V2OutputsUnknown
      dco_decode_RustOpaque_Arcpayjoin_ffireceivev2V2OutputsUnknown(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ArcPayjoinFfiReceiveV2V2OutputsUnknown.dcoDecode(
        raw as List<dynamic>);
  }

  @protected
  ArcPayjoinFfiReceiveV2V2PayjoinProposal
      dco_decode_RustOpaque_Arcpayjoin_ffireceivev2V2PayjoinProposal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ArcPayjoinFfiReceiveV2V2PayjoinProposal.dcoDecode(
        raw as List<dynamic>);
  }

  @protected
  ArcPayjoinFfiReceiveV2V2ProvisionalProposal
      dco_decode_RustOpaque_Arcpayjoin_ffireceivev2V2ProvisionalProposal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ArcPayjoinFfiReceiveV2V2ProvisionalProposal.dcoDecode(
        raw as List<dynamic>);
  }

  @protected
  ArcPayjoinFfiSendV1ContextV1
      dco_decode_RustOpaque_Arcpayjoin_ffisendv1ContextV1(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ArcPayjoinFfiSendV1ContextV1.dcoDecode(raw as List<dynamic>);
  }

  @protected
  ArcPayjoinFfiSendV1RequestBuilder
      dco_decode_RustOpaque_Arcpayjoin_ffisendv1RequestBuilder(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ArcPayjoinFfiSendV1RequestBuilder.dcoDecode(raw as List<dynamic>);
  }

  @protected
  ArcPayjoinFfiSendV1RequestContext
      dco_decode_RustOpaque_Arcpayjoin_ffisendv1RequestContext(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ArcPayjoinFfiSendV1RequestContext.dcoDecode(raw as List<dynamic>);
  }

  @protected
  ArcPayjoinFfiSendV2ContextV2
      dco_decode_RustOpaque_Arcpayjoin_ffisendv2ContextV2(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ArcPayjoinFfiSendV2ContextV2.dcoDecode(raw as List<dynamic>);
  }

  @protected
  ArcPayjoinFfiUriUri dco_decode_RustOpaque_Arcpayjoin_ffiuriUri(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ArcPayjoinFfiUriUri.dcoDecode(raw as List<dynamic>);
  }

  @protected
  ArcPayjoinFfiUriUrl dco_decode_RustOpaque_Arcpayjoin_ffiuriUrl(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ArcPayjoinFfiUriUrl.dcoDecode(raw as List<dynamic>);
  }

  @protected
  MutexOptionOhttpClientResponse
      dco_decode_RustOpaque_MutexOptionohttpClientResponse(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MutexOptionOhttpClientResponse.dcoDecode(raw as List<dynamic>);
  }

  @protected
  PayjoinFfiReceiveV1UncheckedProposal
      dco_decode_RustOpaque_payjoin_ffireceivev1UncheckedProposal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PayjoinFfiReceiveV1UncheckedProposal.dcoDecode(raw as List<dynamic>);
  }

  @protected
  PayjoinFfiReceiveV2Enroller
      dco_decode_RustOpaque_payjoin_ffireceivev2Enroller(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PayjoinFfiReceiveV2Enroller.dcoDecode(raw as List<dynamic>);
  }

  @protected
  PayjoinFfiReceiveV2V2UncheckedProposal
      dco_decode_RustOpaque_payjoin_ffireceivev2V2UncheckedProposal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PayjoinFfiReceiveV2V2UncheckedProposal.dcoDecode(
        raw as List<dynamic>);
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  ClientResponse dco_decode_box_autoadd_client_response(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_client_response(raw);
  }

  @protected
  ContextV1 dco_decode_box_autoadd_context_v_1(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_context_v_1(raw);
  }

  @protected
  ContextV2 dco_decode_box_autoadd_context_v_2(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_context_v_2(raw);
  }

  @protected
  Enrolled dco_decode_box_autoadd_enrolled(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_enrolled(raw);
  }

  @protected
  Enroller dco_decode_box_autoadd_enroller(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_enroller(raw);
  }

  @protected
  Headers dco_decode_box_autoadd_headers(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_headers(raw);
  }

  @protected
  MaybeInputsOwned dco_decode_box_autoadd_maybe_inputs_owned(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_maybe_inputs_owned(raw);
  }

  @protected
  MaybeInputsSeen dco_decode_box_autoadd_maybe_inputs_seen(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_maybe_inputs_seen(raw);
  }

  @protected
  MaybeMixedInputScripts dco_decode_box_autoadd_maybe_mixed_input_scripts(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_maybe_mixed_input_scripts(raw);
  }

  @protected
  OutPoint dco_decode_box_autoadd_out_point(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_out_point(raw);
  }

  @protected
  OutputsUnknown dco_decode_box_autoadd_outputs_unknown(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_outputs_unknown(raw);
  }

  @protected
  PayjoinProposal dco_decode_box_autoadd_payjoin_proposal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_payjoin_proposal(raw);
  }

  @protected
  ProvisionalProposal dco_decode_box_autoadd_provisional_proposal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_provisional_proposal(raw);
  }

  @protected
  RequestBuilder dco_decode_box_autoadd_request_builder(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_request_builder(raw);
  }

  @protected
  RequestContext dco_decode_box_autoadd_request_context(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_request_context(raw);
  }

  @protected
  TxOut dco_decode_box_autoadd_tx_out(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_tx_out(raw);
  }

  @protected
  int dco_decode_box_autoadd_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_u_64(raw);
  }

  @protected
  int dco_decode_box_autoadd_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  UncheckedProposal dco_decode_box_autoadd_unchecked_proposal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_unchecked_proposal(raw);
  }

  @protected
  Uri dco_decode_box_autoadd_uri(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_uri(raw);
  }

  @protected
  Url dco_decode_box_autoadd_url(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_url(raw);
  }

  @protected
  V2MaybeInputsOwned dco_decode_box_autoadd_v_2_maybe_inputs_owned(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_v_2_maybe_inputs_owned(raw);
  }

  @protected
  V2MaybeInputsSeen dco_decode_box_autoadd_v_2_maybe_inputs_seen(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_v_2_maybe_inputs_seen(raw);
  }

  @protected
  V2MaybeMixedInputScripts dco_decode_box_autoadd_v_2_maybe_mixed_input_scripts(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_v_2_maybe_mixed_input_scripts(raw);
  }

  @protected
  V2OutputsUnknown dco_decode_box_autoadd_v_2_outputs_unknown(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_v_2_outputs_unknown(raw);
  }

  @protected
  V2PayjoinProposal dco_decode_box_autoadd_v_2_payjoin_proposal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_v_2_payjoin_proposal(raw);
  }

  @protected
  V2ProvisionalProposal dco_decode_box_autoadd_v_2_provisional_proposal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_v_2_provisional_proposal(raw);
  }

  @protected
  V2UncheckedProposal dco_decode_box_autoadd_v_2_unchecked_proposal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_v_2_unchecked_proposal(raw);
  }

  @protected
  ClientResponse dco_decode_client_response(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return ClientResponse(
      field0: dco_decode_RustOpaque_MutexOptionohttpClientResponse(arr[0]),
    );
  }

  @protected
  ContextV1 dco_decode_context_v_1(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return ContextV1(
      field0: dco_decode_RustOpaque_Arcpayjoin_ffisendv1ContextV1(arr[0]),
    );
  }

  @protected
  ContextV2 dco_decode_context_v_2(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return ContextV2(
      field0: dco_decode_RustOpaque_Arcpayjoin_ffisendv2ContextV2(arr[0]),
    );
  }

  @protected
  Enrolled dco_decode_enrolled(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return Enrolled(
      field0: dco_decode_RustOpaque_Arcpayjoin_ffireceivev2Enrolled(arr[0]),
    );
  }

  @protected
  Enroller dco_decode_enroller(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return Enroller(
      field0: dco_decode_RustOpaque_payjoin_ffireceivev2Enroller(arr[0]),
    );
  }

  @protected
  Headers dco_decode_headers(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return Headers(
      map: dco_decode_Map_String_String(arr[0]),
    );
  }

  @protected
  List<OutPoint> dco_decode_list_out_point(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_out_point).toList();
  }

  @protected
  Uint64List dco_decode_list_prim_u_64_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Uint64List.from(raw);
  }

  @protected
  List<int> dco_decode_list_prim_u_8_loose(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as List<int>;
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  List<(String, String)> dco_decode_list_record_string_string(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_record_string_string).toList();
  }

  @protected
  List<(int, OutPoint)> dco_decode_list_record_u_64_out_point(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_record_u_64_out_point)
        .toList();
  }

  @protected
  MaybeInputsOwned dco_decode_maybe_inputs_owned(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return MaybeInputsOwned(
      field0:
          dco_decode_RustOpaque_Arcpayjoin_ffireceivev1MaybeInputsOwned(arr[0]),
    );
  }

  @protected
  MaybeInputsSeen dco_decode_maybe_inputs_seen(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return MaybeInputsSeen(
      field0:
          dco_decode_RustOpaque_Arcpayjoin_ffireceivev1MaybeInputsSeen(arr[0]),
    );
  }

  @protected
  MaybeMixedInputScripts dco_decode_maybe_mixed_input_scripts(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return MaybeMixedInputScripts(
      field0:
          dco_decode_RustOpaque_Arcpayjoin_ffireceivev1MaybeMixedInputScripts(
              arr[0]),
    );
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  int? dco_decode_opt_box_autoadd_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_u_64(raw);
  }

  @protected
  int? dco_decode_opt_box_autoadd_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_u_8(raw);
  }

  @protected
  V2UncheckedProposal? dco_decode_opt_box_autoadd_v_2_unchecked_proposal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_v_2_unchecked_proposal(raw);
  }

  @protected
  OutPoint dco_decode_out_point(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return OutPoint(
      txid: dco_decode_String(arr[0]),
      vout: dco_decode_u_32(arr[1]),
    );
  }

  @protected
  OutputsUnknown dco_decode_outputs_unknown(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return OutputsUnknown(
      field0:
          dco_decode_RustOpaque_Arcpayjoin_ffireceivev1OutputsUnknown(arr[0]),
    );
  }

  @protected
  PayjoinError dco_decode_payjoin_error(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return PayjoinError_InvalidAddress(
          message: dco_decode_String(raw[1]),
        );
      case 1:
        return PayjoinError_InvalidScript(
          message: dco_decode_String(raw[1]),
        );
      case 2:
        return PayjoinError_NetworkValidation(
          message: dco_decode_String(raw[1]),
        );
      case 3:
        return PayjoinError_PsbtParseError(
          message: dco_decode_String(raw[1]),
        );
      case 4:
        return PayjoinError_ResponseError(
          message: dco_decode_String(raw[1]),
        );
      case 5:
        return PayjoinError_RequestError(
          message: dco_decode_String(raw[1]),
        );
      case 6:
        return PayjoinError_TransactionError(
          message: dco_decode_String(raw[1]),
        );
      case 7:
        return PayjoinError_ServerError(
          message: dco_decode_String(raw[1]),
        );
      case 8:
        return PayjoinError_SelectionError(
          message: dco_decode_String(raw[1]),
        );
      case 9:
        return PayjoinError_CreateRequestError(
          message: dco_decode_String(raw[1]),
        );
      case 10:
        return PayjoinError_PjParseError(
          message: dco_decode_String(raw[1]),
        );
      case 11:
        return PayjoinError_PjNotSupported(
          message: dco_decode_String(raw[1]),
        );
      case 12:
        return PayjoinError_ValidationError(
          message: dco_decode_String(raw[1]),
        );
      case 13:
        return PayjoinError_V2Error(
          message: dco_decode_String(raw[1]),
        );
      case 14:
        return PayjoinError_UnexpectedError(
          message: dco_decode_String(raw[1]),
        );
      case 15:
        return PayjoinError_OhttpError(
          message: dco_decode_String(raw[1]),
        );
      case 16:
        return PayjoinError_UrlError(
          message: dco_decode_String(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  PayjoinProposal dco_decode_payjoin_proposal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return PayjoinProposal(
      field0:
          dco_decode_RustOpaque_Arcpayjoin_ffireceivev1PayjoinProposal(arr[0]),
    );
  }

  @protected
  ProvisionalProposal dco_decode_provisional_proposal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return ProvisionalProposal(
      field0: dco_decode_RustOpaque_Arcpayjoin_ffireceivev1ProvisionalProposal(
          arr[0]),
    );
  }

  @protected
  ((Url, Uint8List), ClientResponse)
      dco_decode_record_record_url_list_prim_u_8_strict_client_response(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_record_url_list_prim_u_8_strict(arr[0]),
      dco_decode_client_response(arr[1]),
    );
  }

  @protected
  (String, String) dco_decode_record_string_string(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_String(arr[0]),
      dco_decode_String(arr[1]),
    );
  }

  @protected
  (int, OutPoint) dco_decode_record_u_64_out_point(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_u_64(arr[0]),
      dco_decode_out_point(arr[1]),
    );
  }

  @protected
  (Url, Uint8List) dco_decode_record_url_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_url(arr[0]),
      dco_decode_list_prim_u_8_strict(arr[1]),
    );
  }

  @protected
  RequestBuilder dco_decode_request_builder(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return RequestBuilder(
      field0: dco_decode_RustOpaque_Arcpayjoin_ffisendv1RequestBuilder(arr[0]),
    );
  }

  @protected
  RequestContext dco_decode_request_context(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return RequestContext(
      field0: dco_decode_RustOpaque_Arcpayjoin_ffisendv1RequestContext(arr[0]),
    );
  }

  @protected
  RequestContextV1 dco_decode_request_context_v_1(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return RequestContextV1(
      request: dco_decode_record_url_list_prim_u_8_strict(arr[0]),
      contextV1: dco_decode_context_v_1(arr[1]),
    );
  }

  @protected
  RequestContextV2 dco_decode_request_context_v_2(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return RequestContextV2(
      request: dco_decode_record_url_list_prim_u_8_strict(arr[0]),
      contextV2: dco_decode_context_v_2(arr[1]),
    );
  }

  @protected
  TxOut dco_decode_tx_out(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return TxOut(
      value: dco_decode_u_64(arr[0]),
      scriptPubkey: dco_decode_list_prim_u_8_strict(arr[1]),
    );
  }

  @protected
  int dco_decode_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64OrU64(raw);
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  UncheckedProposal dco_decode_unchecked_proposal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return UncheckedProposal(
      field0:
          dco_decode_RustOpaque_payjoin_ffireceivev1UncheckedProposal(arr[0]),
    );
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  Uri dco_decode_uri(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return Uri(
      field0: dco_decode_RustOpaque_Arcpayjoin_ffiuriUri(arr[0]),
    );
  }

  @protected
  Url dco_decode_url(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return Url(
      field0: dco_decode_RustOpaque_Arcpayjoin_ffiuriUrl(arr[0]),
    );
  }

  @protected
  int dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64OrU64(raw);
  }

  @protected
  V2MaybeInputsOwned dco_decode_v_2_maybe_inputs_owned(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return V2MaybeInputsOwned(
      field0: dco_decode_RustOpaque_Arcpayjoin_ffireceivev2V2MaybeInputsOwned(
          arr[0]),
    );
  }

  @protected
  V2MaybeInputsSeen dco_decode_v_2_maybe_inputs_seen(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return V2MaybeInputsSeen(
      field0: dco_decode_RustOpaque_Arcpayjoin_ffireceivev2V2MaybeInputsSeen(
          arr[0]),
    );
  }

  @protected
  V2MaybeMixedInputScripts dco_decode_v_2_maybe_mixed_input_scripts(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return V2MaybeMixedInputScripts(
      field0:
          dco_decode_RustOpaque_Arcpayjoin_ffireceivev2V2MaybeMixedInputScripts(
              arr[0]),
    );
  }

  @protected
  V2OutputsUnknown dco_decode_v_2_outputs_unknown(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return V2OutputsUnknown(
      field0:
          dco_decode_RustOpaque_Arcpayjoin_ffireceivev2V2OutputsUnknown(arr[0]),
    );
  }

  @protected
  V2PayjoinProposal dco_decode_v_2_payjoin_proposal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return V2PayjoinProposal(
      field0: dco_decode_RustOpaque_Arcpayjoin_ffireceivev2V2PayjoinProposal(
          arr[0]),
    );
  }

  @protected
  V2ProvisionalProposal dco_decode_v_2_provisional_proposal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return V2ProvisionalProposal(
      field0:
          dco_decode_RustOpaque_Arcpayjoin_ffireceivev2V2ProvisionalProposal(
              arr[0]),
    );
  }

  @protected
  V2UncheckedProposal dco_decode_v_2_unchecked_proposal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return V2UncheckedProposal(
      field0:
          dco_decode_RustOpaque_payjoin_ffireceivev2V2UncheckedProposal(arr[0]),
    );
  }

  @protected
  Object sse_decode_DartOpaque(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_usize(deserializer);
    return decodeDartOpaque(inner, generalizedFrbRustBinding);
  }

  @protected
  Map<String, String> sse_decode_Map_String_String(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_record_string_string(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, OutPoint> sse_decode_Map_u_64_out_point(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_record_u_64_out_point(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  ArcPayjoinFfiReceiveV1MaybeInputsOwned
      sse_decode_RustOpaque_Arcpayjoin_ffireceivev1MaybeInputsOwned(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ArcPayjoinFfiReceiveV1MaybeInputsOwned.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ArcPayjoinFfiReceiveV1MaybeInputsSeen
      sse_decode_RustOpaque_Arcpayjoin_ffireceivev1MaybeInputsSeen(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ArcPayjoinFfiReceiveV1MaybeInputsSeen.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ArcPayjoinFfiReceiveV1MaybeMixedInputScripts
      sse_decode_RustOpaque_Arcpayjoin_ffireceivev1MaybeMixedInputScripts(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ArcPayjoinFfiReceiveV1MaybeMixedInputScripts.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ArcPayjoinFfiReceiveV1OutputsUnknown
      sse_decode_RustOpaque_Arcpayjoin_ffireceivev1OutputsUnknown(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ArcPayjoinFfiReceiveV1OutputsUnknown.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ArcPayjoinFfiReceiveV1PayjoinProposal
      sse_decode_RustOpaque_Arcpayjoin_ffireceivev1PayjoinProposal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ArcPayjoinFfiReceiveV1PayjoinProposal.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ArcPayjoinFfiReceiveV1ProvisionalProposal
      sse_decode_RustOpaque_Arcpayjoin_ffireceivev1ProvisionalProposal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ArcPayjoinFfiReceiveV1ProvisionalProposal.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ArcPayjoinFfiReceiveV2Enrolled
      sse_decode_RustOpaque_Arcpayjoin_ffireceivev2Enrolled(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ArcPayjoinFfiReceiveV2Enrolled.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ArcPayjoinFfiReceiveV2V2MaybeInputsOwned
      sse_decode_RustOpaque_Arcpayjoin_ffireceivev2V2MaybeInputsOwned(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ArcPayjoinFfiReceiveV2V2MaybeInputsOwned.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ArcPayjoinFfiReceiveV2V2MaybeInputsSeen
      sse_decode_RustOpaque_Arcpayjoin_ffireceivev2V2MaybeInputsSeen(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ArcPayjoinFfiReceiveV2V2MaybeInputsSeen.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ArcPayjoinFfiReceiveV2V2MaybeMixedInputScripts
      sse_decode_RustOpaque_Arcpayjoin_ffireceivev2V2MaybeMixedInputScripts(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ArcPayjoinFfiReceiveV2V2MaybeMixedInputScripts.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ArcPayjoinFfiReceiveV2V2OutputsUnknown
      sse_decode_RustOpaque_Arcpayjoin_ffireceivev2V2OutputsUnknown(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ArcPayjoinFfiReceiveV2V2OutputsUnknown.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ArcPayjoinFfiReceiveV2V2PayjoinProposal
      sse_decode_RustOpaque_Arcpayjoin_ffireceivev2V2PayjoinProposal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ArcPayjoinFfiReceiveV2V2PayjoinProposal.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ArcPayjoinFfiReceiveV2V2ProvisionalProposal
      sse_decode_RustOpaque_Arcpayjoin_ffireceivev2V2ProvisionalProposal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ArcPayjoinFfiReceiveV2V2ProvisionalProposal.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ArcPayjoinFfiSendV1ContextV1
      sse_decode_RustOpaque_Arcpayjoin_ffisendv1ContextV1(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ArcPayjoinFfiSendV1ContextV1.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ArcPayjoinFfiSendV1RequestBuilder
      sse_decode_RustOpaque_Arcpayjoin_ffisendv1RequestBuilder(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ArcPayjoinFfiSendV1RequestBuilder.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ArcPayjoinFfiSendV1RequestContext
      sse_decode_RustOpaque_Arcpayjoin_ffisendv1RequestContext(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ArcPayjoinFfiSendV1RequestContext.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ArcPayjoinFfiSendV2ContextV2
      sse_decode_RustOpaque_Arcpayjoin_ffisendv2ContextV2(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ArcPayjoinFfiSendV2ContextV2.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ArcPayjoinFfiUriUri sse_decode_RustOpaque_Arcpayjoin_ffiuriUri(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ArcPayjoinFfiUriUri.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ArcPayjoinFfiUriUrl sse_decode_RustOpaque_Arcpayjoin_ffiuriUrl(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ArcPayjoinFfiUriUrl.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  MutexOptionOhttpClientResponse
      sse_decode_RustOpaque_MutexOptionohttpClientResponse(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MutexOptionOhttpClientResponse.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  PayjoinFfiReceiveV1UncheckedProposal
      sse_decode_RustOpaque_payjoin_ffireceivev1UncheckedProposal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return PayjoinFfiReceiveV1UncheckedProposal.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  PayjoinFfiReceiveV2Enroller
      sse_decode_RustOpaque_payjoin_ffireceivev2Enroller(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return PayjoinFfiReceiveV2Enroller.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  PayjoinFfiReceiveV2V2UncheckedProposal
      sse_decode_RustOpaque_payjoin_ffireceivev2V2UncheckedProposal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return PayjoinFfiReceiveV2V2UncheckedProposal.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  ClientResponse sse_decode_box_autoadd_client_response(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_client_response(deserializer));
  }

  @protected
  ContextV1 sse_decode_box_autoadd_context_v_1(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_context_v_1(deserializer));
  }

  @protected
  ContextV2 sse_decode_box_autoadd_context_v_2(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_context_v_2(deserializer));
  }

  @protected
  Enrolled sse_decode_box_autoadd_enrolled(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_enrolled(deserializer));
  }

  @protected
  Enroller sse_decode_box_autoadd_enroller(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_enroller(deserializer));
  }

  @protected
  Headers sse_decode_box_autoadd_headers(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_headers(deserializer));
  }

  @protected
  MaybeInputsOwned sse_decode_box_autoadd_maybe_inputs_owned(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_maybe_inputs_owned(deserializer));
  }

  @protected
  MaybeInputsSeen sse_decode_box_autoadd_maybe_inputs_seen(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_maybe_inputs_seen(deserializer));
  }

  @protected
  MaybeMixedInputScripts sse_decode_box_autoadd_maybe_mixed_input_scripts(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_maybe_mixed_input_scripts(deserializer));
  }

  @protected
  OutPoint sse_decode_box_autoadd_out_point(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_out_point(deserializer));
  }

  @protected
  OutputsUnknown sse_decode_box_autoadd_outputs_unknown(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_outputs_unknown(deserializer));
  }

  @protected
  PayjoinProposal sse_decode_box_autoadd_payjoin_proposal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_payjoin_proposal(deserializer));
  }

  @protected
  ProvisionalProposal sse_decode_box_autoadd_provisional_proposal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_provisional_proposal(deserializer));
  }

  @protected
  RequestBuilder sse_decode_box_autoadd_request_builder(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_request_builder(deserializer));
  }

  @protected
  RequestContext sse_decode_box_autoadd_request_context(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_request_context(deserializer));
  }

  @protected
  TxOut sse_decode_box_autoadd_tx_out(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_tx_out(deserializer));
  }

  @protected
  int sse_decode_box_autoadd_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_u_64(deserializer));
  }

  @protected
  int sse_decode_box_autoadd_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_u_8(deserializer));
  }

  @protected
  UncheckedProposal sse_decode_box_autoadd_unchecked_proposal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_unchecked_proposal(deserializer));
  }

  @protected
  Uri sse_decode_box_autoadd_uri(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_uri(deserializer));
  }

  @protected
  Url sse_decode_box_autoadd_url(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_url(deserializer));
  }

  @protected
  V2MaybeInputsOwned sse_decode_box_autoadd_v_2_maybe_inputs_owned(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_v_2_maybe_inputs_owned(deserializer));
  }

  @protected
  V2MaybeInputsSeen sse_decode_box_autoadd_v_2_maybe_inputs_seen(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_v_2_maybe_inputs_seen(deserializer));
  }

  @protected
  V2MaybeMixedInputScripts sse_decode_box_autoadd_v_2_maybe_mixed_input_scripts(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_v_2_maybe_mixed_input_scripts(deserializer));
  }

  @protected
  V2OutputsUnknown sse_decode_box_autoadd_v_2_outputs_unknown(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_v_2_outputs_unknown(deserializer));
  }

  @protected
  V2PayjoinProposal sse_decode_box_autoadd_v_2_payjoin_proposal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_v_2_payjoin_proposal(deserializer));
  }

  @protected
  V2ProvisionalProposal sse_decode_box_autoadd_v_2_provisional_proposal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_v_2_provisional_proposal(deserializer));
  }

  @protected
  V2UncheckedProposal sse_decode_box_autoadd_v_2_unchecked_proposal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_v_2_unchecked_proposal(deserializer));
  }

  @protected
  ClientResponse sse_decode_client_response(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_RustOpaque_MutexOptionohttpClientResponse(deserializer);
    return ClientResponse(field0: var_field0);
  }

  @protected
  ContextV1 sse_decode_context_v_1(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_RustOpaque_Arcpayjoin_ffisendv1ContextV1(deserializer);
    return ContextV1(field0: var_field0);
  }

  @protected
  ContextV2 sse_decode_context_v_2(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_RustOpaque_Arcpayjoin_ffisendv2ContextV2(deserializer);
    return ContextV2(field0: var_field0);
  }

  @protected
  Enrolled sse_decode_enrolled(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_RustOpaque_Arcpayjoin_ffireceivev2Enrolled(deserializer);
    return Enrolled(field0: var_field0);
  }

  @protected
  Enroller sse_decode_enroller(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_RustOpaque_payjoin_ffireceivev2Enroller(deserializer);
    return Enroller(field0: var_field0);
  }

  @protected
  Headers sse_decode_headers(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_map = sse_decode_Map_String_String(deserializer);
    return Headers(map: var_map);
  }

  @protected
  List<OutPoint> sse_decode_list_out_point(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <OutPoint>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_out_point(deserializer));
    }
    return ans_;
  }

  @protected
  Uint64List sse_decode_list_prim_u_64_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint64List(len_);
  }

  @protected
  List<int> sse_decode_list_prim_u_8_loose(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  List<(String, String)> sse_decode_list_record_string_string(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(String, String)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_string_string(deserializer));
    }
    return ans_;
  }

  @protected
  List<(int, OutPoint)> sse_decode_list_record_u_64_out_point(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(int, OutPoint)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_u_64_out_point(deserializer));
    }
    return ans_;
  }

  @protected
  MaybeInputsOwned sse_decode_maybe_inputs_owned(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_RustOpaque_Arcpayjoin_ffireceivev1MaybeInputsOwned(
            deserializer);
    return MaybeInputsOwned(field0: var_field0);
  }

  @protected
  MaybeInputsSeen sse_decode_maybe_inputs_seen(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_RustOpaque_Arcpayjoin_ffireceivev1MaybeInputsSeen(
            deserializer);
    return MaybeInputsSeen(field0: var_field0);
  }

  @protected
  MaybeMixedInputScripts sse_decode_maybe_mixed_input_scripts(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_RustOpaque_Arcpayjoin_ffireceivev1MaybeMixedInputScripts(
            deserializer);
    return MaybeMixedInputScripts(field0: var_field0);
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int? sse_decode_opt_box_autoadd_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_u_64(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int? sse_decode_opt_box_autoadd_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_u_8(deserializer));
    } else {
      return null;
    }
  }

  @protected
  V2UncheckedProposal? sse_decode_opt_box_autoadd_v_2_unchecked_proposal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_v_2_unchecked_proposal(deserializer));
    } else {
      return null;
    }
  }

  @protected
  OutPoint sse_decode_out_point(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_txid = sse_decode_String(deserializer);
    var var_vout = sse_decode_u_32(deserializer);
    return OutPoint(txid: var_txid, vout: var_vout);
  }

  @protected
  OutputsUnknown sse_decode_outputs_unknown(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_RustOpaque_Arcpayjoin_ffireceivev1OutputsUnknown(
            deserializer);
    return OutputsUnknown(field0: var_field0);
  }

  @protected
  PayjoinError sse_decode_payjoin_error(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_message = sse_decode_String(deserializer);
        return PayjoinError_InvalidAddress(message: var_message);
      case 1:
        var var_message = sse_decode_String(deserializer);
        return PayjoinError_InvalidScript(message: var_message);
      case 2:
        var var_message = sse_decode_String(deserializer);
        return PayjoinError_NetworkValidation(message: var_message);
      case 3:
        var var_message = sse_decode_String(deserializer);
        return PayjoinError_PsbtParseError(message: var_message);
      case 4:
        var var_message = sse_decode_String(deserializer);
        return PayjoinError_ResponseError(message: var_message);
      case 5:
        var var_message = sse_decode_String(deserializer);
        return PayjoinError_RequestError(message: var_message);
      case 6:
        var var_message = sse_decode_String(deserializer);
        return PayjoinError_TransactionError(message: var_message);
      case 7:
        var var_message = sse_decode_String(deserializer);
        return PayjoinError_ServerError(message: var_message);
      case 8:
        var var_message = sse_decode_String(deserializer);
        return PayjoinError_SelectionError(message: var_message);
      case 9:
        var var_message = sse_decode_String(deserializer);
        return PayjoinError_CreateRequestError(message: var_message);
      case 10:
        var var_message = sse_decode_String(deserializer);
        return PayjoinError_PjParseError(message: var_message);
      case 11:
        var var_message = sse_decode_String(deserializer);
        return PayjoinError_PjNotSupported(message: var_message);
      case 12:
        var var_message = sse_decode_String(deserializer);
        return PayjoinError_ValidationError(message: var_message);
      case 13:
        var var_message = sse_decode_String(deserializer);
        return PayjoinError_V2Error(message: var_message);
      case 14:
        var var_message = sse_decode_String(deserializer);
        return PayjoinError_UnexpectedError(message: var_message);
      case 15:
        var var_message = sse_decode_String(deserializer);
        return PayjoinError_OhttpError(message: var_message);
      case 16:
        var var_message = sse_decode_String(deserializer);
        return PayjoinError_UrlError(message: var_message);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  PayjoinProposal sse_decode_payjoin_proposal(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_RustOpaque_Arcpayjoin_ffireceivev1PayjoinProposal(
            deserializer);
    return PayjoinProposal(field0: var_field0);
  }

  @protected
  ProvisionalProposal sse_decode_provisional_proposal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_RustOpaque_Arcpayjoin_ffireceivev1ProvisionalProposal(
            deserializer);
    return ProvisionalProposal(field0: var_field0);
  }

  @protected
  ((Url, Uint8List), ClientResponse)
      sse_decode_record_record_url_list_prim_u_8_strict_client_response(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_record_url_list_prim_u_8_strict(deserializer);
    var var_field1 = sse_decode_client_response(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (String, String) sse_decode_record_string_string(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_String(deserializer);
    var var_field1 = sse_decode_String(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (int, OutPoint) sse_decode_record_u_64_out_point(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_u_64(deserializer);
    var var_field1 = sse_decode_out_point(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (Url, Uint8List) sse_decode_record_url_list_prim_u_8_strict(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_url(deserializer);
    var var_field1 = sse_decode_list_prim_u_8_strict(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  RequestBuilder sse_decode_request_builder(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_RustOpaque_Arcpayjoin_ffisendv1RequestBuilder(deserializer);
    return RequestBuilder(field0: var_field0);
  }

  @protected
  RequestContext sse_decode_request_context(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_RustOpaque_Arcpayjoin_ffisendv1RequestContext(deserializer);
    return RequestContext(field0: var_field0);
  }

  @protected
  RequestContextV1 sse_decode_request_context_v_1(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_request = sse_decode_record_url_list_prim_u_8_strict(deserializer);
    var var_contextV1 = sse_decode_context_v_1(deserializer);
    return RequestContextV1(request: var_request, contextV1: var_contextV1);
  }

  @protected
  RequestContextV2 sse_decode_request_context_v_2(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_request = sse_decode_record_url_list_prim_u_8_strict(deserializer);
    var var_contextV2 = sse_decode_context_v_2(deserializer);
    return RequestContextV2(request: var_request, contextV2: var_contextV2);
  }

  @protected
  TxOut sse_decode_tx_out(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_value = sse_decode_u_64(deserializer);
    var var_scriptPubkey = sse_decode_list_prim_u_8_strict(deserializer);
    return TxOut(value: var_value, scriptPubkey: var_scriptPubkey);
  }

  @protected
  int sse_decode_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint32();
  }

  @protected
  int sse_decode_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint64();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  UncheckedProposal sse_decode_unchecked_proposal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_RustOpaque_payjoin_ffireceivev1UncheckedProposal(
            deserializer);
    return UncheckedProposal(field0: var_field0);
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  Uri sse_decode_uri(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_RustOpaque_Arcpayjoin_ffiuriUri(deserializer);
    return Uri(field0: var_field0);
  }

  @protected
  Url sse_decode_url(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_RustOpaque_Arcpayjoin_ffiuriUrl(deserializer);
    return Url(field0: var_field0);
  }

  @protected
  int sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint64();
  }

  @protected
  V2MaybeInputsOwned sse_decode_v_2_maybe_inputs_owned(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_RustOpaque_Arcpayjoin_ffireceivev2V2MaybeInputsOwned(
            deserializer);
    return V2MaybeInputsOwned(field0: var_field0);
  }

  @protected
  V2MaybeInputsSeen sse_decode_v_2_maybe_inputs_seen(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_RustOpaque_Arcpayjoin_ffireceivev2V2MaybeInputsSeen(
            deserializer);
    return V2MaybeInputsSeen(field0: var_field0);
  }

  @protected
  V2MaybeMixedInputScripts sse_decode_v_2_maybe_mixed_input_scripts(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_RustOpaque_Arcpayjoin_ffireceivev2V2MaybeMixedInputScripts(
            deserializer);
    return V2MaybeMixedInputScripts(field0: var_field0);
  }

  @protected
  V2OutputsUnknown sse_decode_v_2_outputs_unknown(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_RustOpaque_Arcpayjoin_ffireceivev2V2OutputsUnknown(
            deserializer);
    return V2OutputsUnknown(field0: var_field0);
  }

  @protected
  V2PayjoinProposal sse_decode_v_2_payjoin_proposal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_RustOpaque_Arcpayjoin_ffireceivev2V2PayjoinProposal(
            deserializer);
    return V2PayjoinProposal(field0: var_field0);
  }

  @protected
  V2ProvisionalProposal sse_decode_v_2_provisional_proposal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_RustOpaque_Arcpayjoin_ffireceivev2V2ProvisionalProposal(
            deserializer);
    return V2ProvisionalProposal(field0: var_field0);
  }

  @protected
  V2UncheckedProposal sse_decode_v_2_unchecked_proposal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_RustOpaque_payjoin_ffireceivev2V2UncheckedProposal(
            deserializer);
    return V2UncheckedProposal(field0: var_field0);
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  PlatformPointer cst_encode_DartFn_Inputs_String_Output_String(
      FutureOr<String> Function(String) raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_DartOpaque(
        encode_DartFn_Inputs_String_Output_String(raw));
  }

  @protected
  PlatformPointer cst_encode_DartFn_Inputs_list_prim_u_8_strict_Output_bool(
      FutureOr<bool> Function(Uint8List) raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_DartOpaque(
        encode_DartFn_Inputs_list_prim_u_8_strict_Output_bool(raw));
  }

  @protected
  PlatformPointer cst_encode_DartFn_Inputs_out_point_Output_bool(
      FutureOr<bool> Function(OutPoint) raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_DartOpaque(
        encode_DartFn_Inputs_out_point_Output_bool(raw));
  }

  @protected
  PlatformPointer cst_encode_DartOpaque(Object raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return encodeDartOpaque(
        raw, portManager.dartHandlerPort, generalizedFrbRustBinding);
  }

  @protected
  int cst_encode_RustOpaque_Arcpayjoin_ffireceivev1MaybeInputsOwned(
      ArcPayjoinFfiReceiveV1MaybeInputsOwned raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return raw.cstEncode();
  }

  @protected
  int cst_encode_RustOpaque_Arcpayjoin_ffireceivev1MaybeInputsSeen(
      ArcPayjoinFfiReceiveV1MaybeInputsSeen raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return raw.cstEncode();
  }

  @protected
  int cst_encode_RustOpaque_Arcpayjoin_ffireceivev1MaybeMixedInputScripts(
      ArcPayjoinFfiReceiveV1MaybeMixedInputScripts raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return raw.cstEncode();
  }

  @protected
  int cst_encode_RustOpaque_Arcpayjoin_ffireceivev1OutputsUnknown(
      ArcPayjoinFfiReceiveV1OutputsUnknown raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return raw.cstEncode();
  }

  @protected
  int cst_encode_RustOpaque_Arcpayjoin_ffireceivev1PayjoinProposal(
      ArcPayjoinFfiReceiveV1PayjoinProposal raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return raw.cstEncode();
  }

  @protected
  int cst_encode_RustOpaque_Arcpayjoin_ffireceivev1ProvisionalProposal(
      ArcPayjoinFfiReceiveV1ProvisionalProposal raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return raw.cstEncode();
  }

  @protected
  int cst_encode_RustOpaque_Arcpayjoin_ffireceivev2Enrolled(
      ArcPayjoinFfiReceiveV2Enrolled raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return raw.cstEncode();
  }

  @protected
  int cst_encode_RustOpaque_Arcpayjoin_ffireceivev2V2MaybeInputsOwned(
      ArcPayjoinFfiReceiveV2V2MaybeInputsOwned raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return raw.cstEncode();
  }

  @protected
  int cst_encode_RustOpaque_Arcpayjoin_ffireceivev2V2MaybeInputsSeen(
      ArcPayjoinFfiReceiveV2V2MaybeInputsSeen raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return raw.cstEncode();
  }

  @protected
  int cst_encode_RustOpaque_Arcpayjoin_ffireceivev2V2MaybeMixedInputScripts(
      ArcPayjoinFfiReceiveV2V2MaybeMixedInputScripts raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return raw.cstEncode();
  }

  @protected
  int cst_encode_RustOpaque_Arcpayjoin_ffireceivev2V2OutputsUnknown(
      ArcPayjoinFfiReceiveV2V2OutputsUnknown raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return raw.cstEncode();
  }

  @protected
  int cst_encode_RustOpaque_Arcpayjoin_ffireceivev2V2PayjoinProposal(
      ArcPayjoinFfiReceiveV2V2PayjoinProposal raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return raw.cstEncode();
  }

  @protected
  int cst_encode_RustOpaque_Arcpayjoin_ffireceivev2V2ProvisionalProposal(
      ArcPayjoinFfiReceiveV2V2ProvisionalProposal raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return raw.cstEncode();
  }

  @protected
  int cst_encode_RustOpaque_Arcpayjoin_ffisendv1ContextV1(
      ArcPayjoinFfiSendV1ContextV1 raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return raw.cstEncode();
  }

  @protected
  int cst_encode_RustOpaque_Arcpayjoin_ffisendv1RequestBuilder(
      ArcPayjoinFfiSendV1RequestBuilder raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return raw.cstEncode();
  }

  @protected
  int cst_encode_RustOpaque_Arcpayjoin_ffisendv1RequestContext(
      ArcPayjoinFfiSendV1RequestContext raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return raw.cstEncode();
  }

  @protected
  int cst_encode_RustOpaque_Arcpayjoin_ffisendv2ContextV2(
      ArcPayjoinFfiSendV2ContextV2 raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return raw.cstEncode();
  }

  @protected
  int cst_encode_RustOpaque_Arcpayjoin_ffiuriUri(ArcPayjoinFfiUriUri raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return raw.cstEncode();
  }

  @protected
  int cst_encode_RustOpaque_Arcpayjoin_ffiuriUrl(ArcPayjoinFfiUriUrl raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return raw.cstEncode();
  }

  @protected
  int cst_encode_RustOpaque_MutexOptionohttpClientResponse(
      MutexOptionOhttpClientResponse raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return raw.cstEncode();
  }

  @protected
  int cst_encode_RustOpaque_payjoin_ffireceivev1UncheckedProposal(
      PayjoinFfiReceiveV1UncheckedProposal raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return raw.cstEncode();
  }

  @protected
  int cst_encode_RustOpaque_payjoin_ffireceivev2Enroller(
      PayjoinFfiReceiveV2Enroller raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return raw.cstEncode();
  }

  @protected
  int cst_encode_RustOpaque_payjoin_ffireceivev2V2UncheckedProposal(
      PayjoinFfiReceiveV2V2UncheckedProposal raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return raw.cstEncode();
  }

  @protected
  bool cst_encode_bool(bool raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw;
  }

  @protected
  int cst_encode_u_32(int raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw;
  }

  @protected
  int cst_encode_u_8(int raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw;
  }

  @protected
  void cst_encode_unit(void raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw;
  }

  @protected
  int cst_encode_usize(int raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw;
  }

  @protected
  void sse_encode_DartFn_Inputs_String_Output_String(
      FutureOr<String> Function(String) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_DartOpaque(
        encode_DartFn_Inputs_String_Output_String(self), serializer);
  }

  @protected
  void sse_encode_DartFn_Inputs_list_prim_u_8_strict_Output_bool(
      FutureOr<bool> Function(Uint8List) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_DartOpaque(
        encode_DartFn_Inputs_list_prim_u_8_strict_Output_bool(self),
        serializer);
  }

  @protected
  void sse_encode_DartFn_Inputs_out_point_Output_bool(
      FutureOr<bool> Function(OutPoint) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_DartOpaque(
        encode_DartFn_Inputs_out_point_Output_bool(self), serializer);
  }

  @protected
  void sse_encode_DartOpaque(Object self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        PlatformPointerUtil.ptrToInt(encodeDartOpaque(
            self, portManager.dartHandlerPort, generalizedFrbRustBinding)),
        serializer);
  }

  @protected
  void sse_encode_Map_String_String(
      Map<String, String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_string_string(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_u_64_out_point(
      Map<int, OutPoint> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_u_64_out_point(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_RustOpaque_Arcpayjoin_ffireceivev1MaybeInputsOwned(
      ArcPayjoinFfiReceiveV1MaybeInputsOwned self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_Arcpayjoin_ffireceivev1MaybeInputsSeen(
      ArcPayjoinFfiReceiveV1MaybeInputsSeen self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_Arcpayjoin_ffireceivev1MaybeMixedInputScripts(
      ArcPayjoinFfiReceiveV1MaybeMixedInputScripts self,
      SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_Arcpayjoin_ffireceivev1OutputsUnknown(
      ArcPayjoinFfiReceiveV1OutputsUnknown self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_Arcpayjoin_ffireceivev1PayjoinProposal(
      ArcPayjoinFfiReceiveV1PayjoinProposal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_Arcpayjoin_ffireceivev1ProvisionalProposal(
      ArcPayjoinFfiReceiveV1ProvisionalProposal self,
      SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_Arcpayjoin_ffireceivev2Enrolled(
      ArcPayjoinFfiReceiveV2Enrolled self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_Arcpayjoin_ffireceivev2V2MaybeInputsOwned(
      ArcPayjoinFfiReceiveV2V2MaybeInputsOwned self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_Arcpayjoin_ffireceivev2V2MaybeInputsSeen(
      ArcPayjoinFfiReceiveV2V2MaybeInputsSeen self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_Arcpayjoin_ffireceivev2V2MaybeMixedInputScripts(
      ArcPayjoinFfiReceiveV2V2MaybeMixedInputScripts self,
      SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_Arcpayjoin_ffireceivev2V2OutputsUnknown(
      ArcPayjoinFfiReceiveV2V2OutputsUnknown self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_Arcpayjoin_ffireceivev2V2PayjoinProposal(
      ArcPayjoinFfiReceiveV2V2PayjoinProposal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_Arcpayjoin_ffireceivev2V2ProvisionalProposal(
      ArcPayjoinFfiReceiveV2V2ProvisionalProposal self,
      SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_Arcpayjoin_ffisendv1ContextV1(
      ArcPayjoinFfiSendV1ContextV1 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_Arcpayjoin_ffisendv1RequestBuilder(
      ArcPayjoinFfiSendV1RequestBuilder self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_Arcpayjoin_ffisendv1RequestContext(
      ArcPayjoinFfiSendV1RequestContext self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_Arcpayjoin_ffisendv2ContextV2(
      ArcPayjoinFfiSendV2ContextV2 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_Arcpayjoin_ffiuriUri(
      ArcPayjoinFfiUriUri self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_Arcpayjoin_ffiuriUrl(
      ArcPayjoinFfiUriUrl self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_MutexOptionohttpClientResponse(
      MutexOptionOhttpClientResponse self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_payjoin_ffireceivev1UncheckedProposal(
      PayjoinFfiReceiveV1UncheckedProposal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_payjoin_ffireceivev2Enroller(
      PayjoinFfiReceiveV2Enroller self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_payjoin_ffireceivev2V2UncheckedProposal(
      PayjoinFfiReceiveV2V2UncheckedProposal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_box_autoadd_client_response(
      ClientResponse self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_client_response(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_context_v_1(
      ContextV1 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_context_v_1(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_context_v_2(
      ContextV2 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_context_v_2(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_enrolled(
      Enrolled self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_enrolled(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_enroller(
      Enroller self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_enroller(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_headers(Headers self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_headers(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_maybe_inputs_owned(
      MaybeInputsOwned self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_maybe_inputs_owned(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_maybe_inputs_seen(
      MaybeInputsSeen self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_maybe_inputs_seen(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_maybe_mixed_input_scripts(
      MaybeMixedInputScripts self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_maybe_mixed_input_scripts(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_out_point(
      OutPoint self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_out_point(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_outputs_unknown(
      OutputsUnknown self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_outputs_unknown(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_payjoin_proposal(
      PayjoinProposal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_payjoin_proposal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_provisional_proposal(
      ProvisionalProposal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_provisional_proposal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_request_builder(
      RequestBuilder self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_request_builder(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_request_context(
      RequestContext self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_request_context(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_tx_out(TxOut self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_tx_out(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_u_64(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_64(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_8(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_unchecked_proposal(
      UncheckedProposal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_unchecked_proposal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_uri(Uri self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_uri(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_url(Url self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_url(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_v_2_maybe_inputs_owned(
      V2MaybeInputsOwned self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_v_2_maybe_inputs_owned(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_v_2_maybe_inputs_seen(
      V2MaybeInputsSeen self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_v_2_maybe_inputs_seen(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_v_2_maybe_mixed_input_scripts(
      V2MaybeMixedInputScripts self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_v_2_maybe_mixed_input_scripts(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_v_2_outputs_unknown(
      V2OutputsUnknown self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_v_2_outputs_unknown(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_v_2_payjoin_proposal(
      V2PayjoinProposal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_v_2_payjoin_proposal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_v_2_provisional_proposal(
      V2ProvisionalProposal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_v_2_provisional_proposal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_v_2_unchecked_proposal(
      V2UncheckedProposal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_v_2_unchecked_proposal(self, serializer);
  }

  @protected
  void sse_encode_client_response(
      ClientResponse self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_MutexOptionohttpClientResponse(
        self.field0, serializer);
  }

  @protected
  void sse_encode_context_v_1(ContextV1 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_Arcpayjoin_ffisendv1ContextV1(
        self.field0, serializer);
  }

  @protected
  void sse_encode_context_v_2(ContextV2 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_Arcpayjoin_ffisendv2ContextV2(
        self.field0, serializer);
  }

  @protected
  void sse_encode_enrolled(Enrolled self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_Arcpayjoin_ffireceivev2Enrolled(
        self.field0, serializer);
  }

  @protected
  void sse_encode_enroller(Enroller self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_payjoin_ffireceivev2Enroller(self.field0, serializer);
  }

  @protected
  void sse_encode_headers(Headers self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Map_String_String(self.map, serializer);
  }

  @protected
  void sse_encode_list_out_point(
      List<OutPoint> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_out_point(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_64_strict(
      Uint64List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint64List(self);
  }

  @protected
  void sse_encode_list_prim_u_8_loose(
      List<int> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer
        .putUint8List(self is Uint8List ? self : Uint8List.fromList(self));
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_list_record_string_string(
      List<(String, String)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_string_string(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_u_64_out_point(
      List<(int, OutPoint)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_u_64_out_point(item, serializer);
    }
  }

  @protected
  void sse_encode_maybe_inputs_owned(
      MaybeInputsOwned self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_Arcpayjoin_ffireceivev1MaybeInputsOwned(
        self.field0, serializer);
  }

  @protected
  void sse_encode_maybe_inputs_seen(
      MaybeInputsSeen self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_Arcpayjoin_ffireceivev1MaybeInputsSeen(
        self.field0, serializer);
  }

  @protected
  void sse_encode_maybe_mixed_input_scripts(
      MaybeMixedInputScripts self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_Arcpayjoin_ffireceivev1MaybeMixedInputScripts(
        self.field0, serializer);
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_u_64(int? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_u_64(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_u_8(int? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_u_8(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_v_2_unchecked_proposal(
      V2UncheckedProposal? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_v_2_unchecked_proposal(self, serializer);
    }
  }

  @protected
  void sse_encode_out_point(OutPoint self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.txid, serializer);
    sse_encode_u_32(self.vout, serializer);
  }

  @protected
  void sse_encode_outputs_unknown(
      OutputsUnknown self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_Arcpayjoin_ffireceivev1OutputsUnknown(
        self.field0, serializer);
  }

  @protected
  void sse_encode_payjoin_error(PayjoinError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case PayjoinError_InvalidAddress(message: final message):
        sse_encode_i_32(0, serializer);
        sse_encode_String(message, serializer);
      case PayjoinError_InvalidScript(message: final message):
        sse_encode_i_32(1, serializer);
        sse_encode_String(message, serializer);
      case PayjoinError_NetworkValidation(message: final message):
        sse_encode_i_32(2, serializer);
        sse_encode_String(message, serializer);
      case PayjoinError_PsbtParseError(message: final message):
        sse_encode_i_32(3, serializer);
        sse_encode_String(message, serializer);
      case PayjoinError_ResponseError(message: final message):
        sse_encode_i_32(4, serializer);
        sse_encode_String(message, serializer);
      case PayjoinError_RequestError(message: final message):
        sse_encode_i_32(5, serializer);
        sse_encode_String(message, serializer);
      case PayjoinError_TransactionError(message: final message):
        sse_encode_i_32(6, serializer);
        sse_encode_String(message, serializer);
      case PayjoinError_ServerError(message: final message):
        sse_encode_i_32(7, serializer);
        sse_encode_String(message, serializer);
      case PayjoinError_SelectionError(message: final message):
        sse_encode_i_32(8, serializer);
        sse_encode_String(message, serializer);
      case PayjoinError_CreateRequestError(message: final message):
        sse_encode_i_32(9, serializer);
        sse_encode_String(message, serializer);
      case PayjoinError_PjParseError(message: final message):
        sse_encode_i_32(10, serializer);
        sse_encode_String(message, serializer);
      case PayjoinError_PjNotSupported(message: final message):
        sse_encode_i_32(11, serializer);
        sse_encode_String(message, serializer);
      case PayjoinError_ValidationError(message: final message):
        sse_encode_i_32(12, serializer);
        sse_encode_String(message, serializer);
      case PayjoinError_V2Error(message: final message):
        sse_encode_i_32(13, serializer);
        sse_encode_String(message, serializer);
      case PayjoinError_UnexpectedError(message: final message):
        sse_encode_i_32(14, serializer);
        sse_encode_String(message, serializer);
      case PayjoinError_OhttpError(message: final message):
        sse_encode_i_32(15, serializer);
        sse_encode_String(message, serializer);
      case PayjoinError_UrlError(message: final message):
        sse_encode_i_32(16, serializer);
        sse_encode_String(message, serializer);
    }
  }

  @protected
  void sse_encode_payjoin_proposal(
      PayjoinProposal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_Arcpayjoin_ffireceivev1PayjoinProposal(
        self.field0, serializer);
  }

  @protected
  void sse_encode_provisional_proposal(
      ProvisionalProposal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_Arcpayjoin_ffireceivev1ProvisionalProposal(
        self.field0, serializer);
  }

  @protected
  void sse_encode_record_record_url_list_prim_u_8_strict_client_response(
      ((Url, Uint8List), ClientResponse) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_record_url_list_prim_u_8_strict(self.$1, serializer);
    sse_encode_client_response(self.$2, serializer);
  }

  @protected
  void sse_encode_record_string_string(
      (String, String) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.$1, serializer);
    sse_encode_String(self.$2, serializer);
  }

  @protected
  void sse_encode_record_u_64_out_point(
      (int, OutPoint) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_64(self.$1, serializer);
    sse_encode_out_point(self.$2, serializer);
  }

  @protected
  void sse_encode_record_url_list_prim_u_8_strict(
      (Url, Uint8List) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_url(self.$1, serializer);
    sse_encode_list_prim_u_8_strict(self.$2, serializer);
  }

  @protected
  void sse_encode_request_builder(
      RequestBuilder self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_Arcpayjoin_ffisendv1RequestBuilder(
        self.field0, serializer);
  }

  @protected
  void sse_encode_request_context(
      RequestContext self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_Arcpayjoin_ffisendv1RequestContext(
        self.field0, serializer);
  }

  @protected
  void sse_encode_request_context_v_1(
      RequestContextV1 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_record_url_list_prim_u_8_strict(self.request, serializer);
    sse_encode_context_v_1(self.contextV1, serializer);
  }

  @protected
  void sse_encode_request_context_v_2(
      RequestContextV2 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_record_url_list_prim_u_8_strict(self.request, serializer);
    sse_encode_context_v_2(self.contextV2, serializer);
  }

  @protected
  void sse_encode_tx_out(TxOut self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_64(self.value, serializer);
    sse_encode_list_prim_u_8_strict(self.scriptPubkey, serializer);
  }

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint32(self);
  }

  @protected
  void sse_encode_u_64(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint64(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unchecked_proposal(
      UncheckedProposal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_payjoin_ffireceivev1UncheckedProposal(
        self.field0, serializer);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_uri(Uri self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_Arcpayjoin_ffiuriUri(self.field0, serializer);
  }

  @protected
  void sse_encode_url(Url self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_Arcpayjoin_ffiuriUrl(self.field0, serializer);
  }

  @protected
  void sse_encode_usize(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint64(self);
  }

  @protected
  void sse_encode_v_2_maybe_inputs_owned(
      V2MaybeInputsOwned self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_Arcpayjoin_ffireceivev2V2MaybeInputsOwned(
        self.field0, serializer);
  }

  @protected
  void sse_encode_v_2_maybe_inputs_seen(
      V2MaybeInputsSeen self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_Arcpayjoin_ffireceivev2V2MaybeInputsSeen(
        self.field0, serializer);
  }

  @protected
  void sse_encode_v_2_maybe_mixed_input_scripts(
      V2MaybeMixedInputScripts self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_Arcpayjoin_ffireceivev2V2MaybeMixedInputScripts(
        self.field0, serializer);
  }

  @protected
  void sse_encode_v_2_outputs_unknown(
      V2OutputsUnknown self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_Arcpayjoin_ffireceivev2V2OutputsUnknown(
        self.field0, serializer);
  }

  @protected
  void sse_encode_v_2_payjoin_proposal(
      V2PayjoinProposal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_Arcpayjoin_ffireceivev2V2PayjoinProposal(
        self.field0, serializer);
  }

  @protected
  void sse_encode_v_2_provisional_proposal(
      V2ProvisionalProposal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_Arcpayjoin_ffireceivev2V2ProvisionalProposal(
        self.field0, serializer);
  }

  @protected
  void sse_encode_v_2_unchecked_proposal(
      V2UncheckedProposal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_payjoin_ffireceivev2V2UncheckedProposal(
        self.field0, serializer);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }
}
