// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.24.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/receive.dart';
import 'api/send.dart';
import 'api/uri.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.io.dart' if (dart.library.html) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'utils/error.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {}

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.0.0-dev.24';

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'payjoin_flutter',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  Future<Headers> headersFromVec({required List<int> body, dynamic hint});

  Future<MaybeInputsOwned> uncheckedProposalCheckBroadcastSuitability(
      {required UncheckedProposal that,
      int? minFeeRate,
      required BoxFnVecU8ResultBoolPayjoinError canBroadcast,
      dynamic hint});

  Future<Uint8List> uncheckedProposalExtractTxToScheduleBroadcast(
      {required UncheckedProposal that, dynamic hint});

  Future<UncheckedProposal> uncheckedProposalFromRequest(
      {required List<int> body,
      required String query,
      required Headers headers,
      dynamic hint});

  Future<String> contextV1ProcessResponse(
      {required ContextV1 that, required List<int> response, dynamic hint});

  Future<String?> contextV2ProcessResponse(
      {required ContextV2 that, required List<int> response, dynamic hint});

  Future<RequestBuilder> requestBuilderAlwaysDisableOutputSubstitution(
      {required RequestBuilder that, required bool disable, dynamic hint});

  Future<RequestContext> requestBuilderBuildNonIncentivizing(
      {required RequestBuilder that, dynamic hint});

  Future<RequestContext> requestBuilderBuildRecommended(
      {required RequestBuilder that, required int minFeeRate, dynamic hint});

  Future<RequestContext> requestBuilderBuildWithAdditionalFee(
      {required RequestBuilder that,
      required int maxFeeContribution,
      int? changeIndex,
      required int minFeeRate,
      required bool clampFeeContribution,
      dynamic hint});

  Future<RequestBuilder> requestBuilderFromPsbtAndUri(
      {required String psbtBase64, required Uri uri, dynamic hint});

  Future<void> requestBuilderNew({dynamic hint});

  Future<RequestContextV1> requestContextExtractV1(
      {required RequestContext that, dynamic hint});

  Future<RequestContextV2> requestContextExtractV2(
      {required RequestContext that,
      required String ohttpProxyUrl,
      dynamic hint});

  Future<String> uriAddress({required Uri that, dynamic hint});

  Future<int?> uriAmount({required Uri that, dynamic hint});

  Future<Uri> uriFromStr({required String uri, dynamic hint});

  Future<Url> urlNew({required String input, dynamic hint});

  Future<String?> urlQuery({required Url that, dynamic hint});

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ArcPayjoinFfiReceiveMaybeInputsOwned;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ArcPayjoinFfiReceiveMaybeInputsOwned;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_ArcPayjoinFfiReceiveMaybeInputsOwnedPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ArcPayjoinFfiSendContextV1;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ArcPayjoinFfiSendContextV1;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_ArcPayjoinFfiSendContextV1Ptr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ArcPayjoinFfiSendRequestBuilder;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ArcPayjoinFfiSendRequestBuilder;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_ArcPayjoinFfiSendRequestBuilderPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ArcPayjoinFfiSendRequestContext;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ArcPayjoinFfiSendRequestContext;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_ArcPayjoinFfiSendRequestContextPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ArcPayjoinFfiSendV2ContextV2;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ArcPayjoinFfiSendV2ContextV2;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_ArcPayjoinFfiSendV2ContextV2Ptr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ArcPayjoinFfiUriUri;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ArcPayjoinFfiUriUri;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_ArcPayjoinFfiUriUriPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ArcPayjoinFfiUriUrl;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ArcPayjoinFfiUriUrl;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_ArcPayjoinFfiUriUrlPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BoxFnVecU8ResultBoolPayjoinError;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BoxFnVecU8ResultBoolPayjoinError;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_BoxFnVecU8ResultBoolPayjoinErrorPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_PayjoinFfiReceiveUncheckedProposal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_PayjoinFfiReceiveUncheckedProposal;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_PayjoinFfiReceiveUncheckedProposalPtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<Headers> headersFromVec({required List<int> body, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_8_loose(body, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_headers,
        decodeErrorData: null,
      ),
      constMeta: kHeadersFromVecConstMeta,
      argValues: [body],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHeadersFromVecConstMeta => const TaskConstMeta(
        debugName: "Headers_from_vec",
        argNames: ["body"],
      );

  @override
  Future<MaybeInputsOwned> uncheckedProposalCheckBroadcastSuitability(
      {required UncheckedProposal that,
      int? minFeeRate,
      required BoxFnVecU8ResultBoolPayjoinError canBroadcast,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_unchecked_proposal(that, serializer);
        sse_encode_opt_box_autoadd_u_64(minFeeRate, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynFnVecu8ResultboolPayjoinErrorSendSync(
            canBroadcast, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 4, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_maybe_inputs_owned,
        decodeErrorData: sse_decode_payjoin_error,
      ),
      constMeta: kUncheckedProposalCheckBroadcastSuitabilityConstMeta,
      argValues: [that, minFeeRate, canBroadcast],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kUncheckedProposalCheckBroadcastSuitabilityConstMeta =>
      const TaskConstMeta(
        debugName: "UncheckedProposal_check_broadcast_suitability",
        argNames: ["that", "minFeeRate", "canBroadcast"],
      );

  @override
  Future<Uint8List> uncheckedProposalExtractTxToScheduleBroadcast(
      {required UncheckedProposal that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_unchecked_proposal(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 3, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta: kUncheckedProposalExtractTxToScheduleBroadcastConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kUncheckedProposalExtractTxToScheduleBroadcastConstMeta =>
      const TaskConstMeta(
        debugName: "UncheckedProposal_extract_tx_to_schedule_broadcast",
        argNames: ["that"],
      );

  @override
  Future<UncheckedProposal> uncheckedProposalFromRequest(
      {required List<int> body,
      required String query,
      required Headers headers,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_8_loose(body, serializer);
        sse_encode_String(query, serializer);
        sse_encode_box_autoadd_headers(headers, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 2, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unchecked_proposal,
        decodeErrorData: sse_decode_payjoin_error,
      ),
      constMeta: kUncheckedProposalFromRequestConstMeta,
      argValues: [body, query, headers],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kUncheckedProposalFromRequestConstMeta =>
      const TaskConstMeta(
        debugName: "UncheckedProposal_from_request",
        argNames: ["body", "query", "headers"],
      );

  @override
  Future<String> contextV1ProcessResponse(
      {required ContextV1 that, required List<int> response, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_context_v_1(that, serializer);
        sse_encode_list_prim_u_8_loose(response, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 13, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_payjoin_error,
      ),
      constMeta: kContextV1ProcessResponseConstMeta,
      argValues: [that, response],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kContextV1ProcessResponseConstMeta => const TaskConstMeta(
        debugName: "ContextV1_process_response",
        argNames: ["that", "response"],
      );

  @override
  Future<String?> contextV2ProcessResponse(
      {required ContextV2 that, required List<int> response, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_context_v_2(that, serializer);
        sse_encode_list_prim_u_8_loose(response, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 14, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_String,
        decodeErrorData: sse_decode_payjoin_error,
      ),
      constMeta: kContextV2ProcessResponseConstMeta,
      argValues: [that, response],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kContextV2ProcessResponseConstMeta => const TaskConstMeta(
        debugName: "ContextV2_process_response",
        argNames: ["that", "response"],
      );

  @override
  Future<RequestBuilder> requestBuilderAlwaysDisableOutputSubstitution(
      {required RequestBuilder that, required bool disable, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_request_builder(that, serializer);
        sse_encode_bool(disable, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 7, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_request_builder,
        decodeErrorData: null,
      ),
      constMeta: kRequestBuilderAlwaysDisableOutputSubstitutionConstMeta,
      argValues: [that, disable],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRequestBuilderAlwaysDisableOutputSubstitutionConstMeta =>
      const TaskConstMeta(
        debugName: "RequestBuilder_always_disable_output_substitution",
        argNames: ["that", "disable"],
      );

  @override
  Future<RequestContext> requestBuilderBuildNonIncentivizing(
      {required RequestBuilder that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_request_builder(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 10, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_request_context,
        decodeErrorData: sse_decode_payjoin_error,
      ),
      constMeta: kRequestBuilderBuildNonIncentivizingConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRequestBuilderBuildNonIncentivizingConstMeta =>
      const TaskConstMeta(
        debugName: "RequestBuilder_build_non_incentivizing",
        argNames: ["that"],
      );

  @override
  Future<RequestContext> requestBuilderBuildRecommended(
      {required RequestBuilder that, required int minFeeRate, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_request_builder(that, serializer);
        sse_encode_u_64(minFeeRate, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 8, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_request_context,
        decodeErrorData: sse_decode_payjoin_error,
      ),
      constMeta: kRequestBuilderBuildRecommendedConstMeta,
      argValues: [that, minFeeRate],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRequestBuilderBuildRecommendedConstMeta =>
      const TaskConstMeta(
        debugName: "RequestBuilder_build_recommended",
        argNames: ["that", "minFeeRate"],
      );

  @override
  Future<RequestContext> requestBuilderBuildWithAdditionalFee(
      {required RequestBuilder that,
      required int maxFeeContribution,
      int? changeIndex,
      required int minFeeRate,
      required bool clampFeeContribution,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_request_builder(that, serializer);
        sse_encode_u_64(maxFeeContribution, serializer);
        sse_encode_opt_box_autoadd_u_8(changeIndex, serializer);
        sse_encode_u_64(minFeeRate, serializer);
        sse_encode_bool(clampFeeContribution, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 9, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_request_context,
        decodeErrorData: sse_decode_payjoin_error,
      ),
      constMeta: kRequestBuilderBuildWithAdditionalFeeConstMeta,
      argValues: [
        that,
        maxFeeContribution,
        changeIndex,
        minFeeRate,
        clampFeeContribution
      ],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRequestBuilderBuildWithAdditionalFeeConstMeta =>
      const TaskConstMeta(
        debugName: "RequestBuilder_build_with_additional_fee",
        argNames: [
          "that",
          "maxFeeContribution",
          "changeIndex",
          "minFeeRate",
          "clampFeeContribution"
        ],
      );

  @override
  Future<RequestBuilder> requestBuilderFromPsbtAndUri(
      {required String psbtBase64, required Uri uri, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(psbtBase64, serializer);
        sse_encode_box_autoadd_uri(uri, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 6, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_request_builder,
        decodeErrorData: sse_decode_payjoin_error,
      ),
      constMeta: kRequestBuilderFromPsbtAndUriConstMeta,
      argValues: [psbtBase64, uri],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRequestBuilderFromPsbtAndUriConstMeta =>
      const TaskConstMeta(
        debugName: "RequestBuilder_from_psbt_and_uri",
        argNames: ["psbtBase64", "uri"],
      );

  @override
  Future<void> requestBuilderNew({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 5, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRequestBuilderNewConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRequestBuilderNewConstMeta => const TaskConstMeta(
        debugName: "RequestBuilder_new",
        argNames: [],
      );

  @override
  Future<RequestContextV1> requestContextExtractV1(
      {required RequestContext that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_request_context(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 11, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_request_context_v_1,
        decodeErrorData: sse_decode_payjoin_error,
      ),
      constMeta: kRequestContextExtractV1ConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRequestContextExtractV1ConstMeta => const TaskConstMeta(
        debugName: "RequestContext_extract_v1",
        argNames: ["that"],
      );

  @override
  Future<RequestContextV2> requestContextExtractV2(
      {required RequestContext that,
      required String ohttpProxyUrl,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_request_context(that, serializer);
        sse_encode_String(ohttpProxyUrl, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 12, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_request_context_v_2,
        decodeErrorData: sse_decode_payjoin_error,
      ),
      constMeta: kRequestContextExtractV2ConstMeta,
      argValues: [that, ohttpProxyUrl],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRequestContextExtractV2ConstMeta => const TaskConstMeta(
        debugName: "RequestContext_extract_v2",
        argNames: ["that", "ohttpProxyUrl"],
      );

  @override
  Future<String> uriAddress({required Uri that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_uri(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 18, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kUriAddressConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kUriAddressConstMeta => const TaskConstMeta(
        debugName: "Uri_address",
        argNames: ["that"],
      );

  @override
  Future<int?> uriAmount({required Uri that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_uri(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 19, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_u_64,
        decodeErrorData: null,
      ),
      constMeta: kUriAmountConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kUriAmountConstMeta => const TaskConstMeta(
        debugName: "Uri_amount",
        argNames: ["that"],
      );

  @override
  Future<Uri> uriFromStr({required String uri, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(uri, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 17, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_uri,
        decodeErrorData: sse_decode_payjoin_error,
      ),
      constMeta: kUriFromStrConstMeta,
      argValues: [uri],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kUriFromStrConstMeta => const TaskConstMeta(
        debugName: "Uri_from_str",
        argNames: ["uri"],
      );

  @override
  Future<Url> urlNew({required String input, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(input, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 15, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_url,
        decodeErrorData: sse_decode_payjoin_error,
      ),
      constMeta: kUrlNewConstMeta,
      argValues: [input],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kUrlNewConstMeta => const TaskConstMeta(
        debugName: "Url_new",
        argNames: ["input"],
      );

  @override
  Future<String?> urlQuery({required Url that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_url(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 16, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_String,
        decodeErrorData: null,
      ),
      constMeta: kUrlQueryConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kUrlQueryConstMeta => const TaskConstMeta(
        debugName: "Url_query",
        argNames: ["that"],
      );

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ArcPayjoinFfiReceiveMaybeInputsOwned =>
          wire.rust_arc_increment_strong_count_RustOpaque_Arcpayjoin_ffireceiveMaybeInputsOwned;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ArcPayjoinFfiReceiveMaybeInputsOwned =>
          wire.rust_arc_decrement_strong_count_RustOpaque_Arcpayjoin_ffireceiveMaybeInputsOwned;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ArcPayjoinFfiSendContextV1 => wire
          .rust_arc_increment_strong_count_RustOpaque_Arcpayjoin_ffisendContextV1;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ArcPayjoinFfiSendContextV1 => wire
          .rust_arc_decrement_strong_count_RustOpaque_Arcpayjoin_ffisendContextV1;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ArcPayjoinFfiSendRequestBuilder => wire
          .rust_arc_increment_strong_count_RustOpaque_Arcpayjoin_ffisendRequestBuilder;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ArcPayjoinFfiSendRequestBuilder => wire
          .rust_arc_decrement_strong_count_RustOpaque_Arcpayjoin_ffisendRequestBuilder;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ArcPayjoinFfiSendRequestContext => wire
          .rust_arc_increment_strong_count_RustOpaque_Arcpayjoin_ffisendRequestContext;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ArcPayjoinFfiSendRequestContext => wire
          .rust_arc_decrement_strong_count_RustOpaque_Arcpayjoin_ffisendRequestContext;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ArcPayjoinFfiSendV2ContextV2 => wire
          .rust_arc_increment_strong_count_RustOpaque_Arcpayjoin_ffisendv2ContextV2;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ArcPayjoinFfiSendV2ContextV2 => wire
          .rust_arc_decrement_strong_count_RustOpaque_Arcpayjoin_ffisendv2ContextV2;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ArcPayjoinFfiUriUri =>
          wire.rust_arc_increment_strong_count_RustOpaque_Arcpayjoin_ffiuriUri;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ArcPayjoinFfiUriUri =>
          wire.rust_arc_decrement_strong_count_RustOpaque_Arcpayjoin_ffiuriUri;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ArcPayjoinFfiUriUrl =>
          wire.rust_arc_increment_strong_count_RustOpaque_Arcpayjoin_ffiuriUrl;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ArcPayjoinFfiUriUrl =>
          wire.rust_arc_decrement_strong_count_RustOpaque_Arcpayjoin_ffiuriUrl;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BoxFnVecU8ResultBoolPayjoinError => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynFnVecu8ResultboolPayjoinErrorSendSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BoxFnVecU8ResultBoolPayjoinError => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynFnVecu8ResultboolPayjoinErrorSendSync;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_PayjoinFfiReceiveUncheckedProposal =>
          wire.rust_arc_increment_strong_count_RustOpaque_payjoin_ffireceiveUncheckedProposal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_PayjoinFfiReceiveUncheckedProposal =>
          wire.rust_arc_decrement_strong_count_RustOpaque_payjoin_ffireceiveUncheckedProposal;

  @protected
  BoxFnVecU8ResultBoolPayjoinError
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynFnVecu8ResultboolPayjoinErrorSendSync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BoxFnVecU8ResultBoolPayjoinError.dcoDecode(raw as List<dynamic>);
  }

  @protected
  Map<String, String> dco_decode_Map_String_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(dco_decode_list_record_string_string(raw)
        .map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  ArcPayjoinFfiReceiveMaybeInputsOwned
      dco_decode_RustOpaque_Arcpayjoin_ffireceiveMaybeInputsOwned(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ArcPayjoinFfiReceiveMaybeInputsOwned.dcoDecode(raw as List<dynamic>);
  }

  @protected
  ArcPayjoinFfiSendContextV1 dco_decode_RustOpaque_Arcpayjoin_ffisendContextV1(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ArcPayjoinFfiSendContextV1.dcoDecode(raw as List<dynamic>);
  }

  @protected
  ArcPayjoinFfiSendRequestBuilder
      dco_decode_RustOpaque_Arcpayjoin_ffisendRequestBuilder(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ArcPayjoinFfiSendRequestBuilder.dcoDecode(raw as List<dynamic>);
  }

  @protected
  ArcPayjoinFfiSendRequestContext
      dco_decode_RustOpaque_Arcpayjoin_ffisendRequestContext(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ArcPayjoinFfiSendRequestContext.dcoDecode(raw as List<dynamic>);
  }

  @protected
  ArcPayjoinFfiSendV2ContextV2
      dco_decode_RustOpaque_Arcpayjoin_ffisendv2ContextV2(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ArcPayjoinFfiSendV2ContextV2.dcoDecode(raw as List<dynamic>);
  }

  @protected
  ArcPayjoinFfiUriUri dco_decode_RustOpaque_Arcpayjoin_ffiuriUri(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ArcPayjoinFfiUriUri.dcoDecode(raw as List<dynamic>);
  }

  @protected
  ArcPayjoinFfiUriUrl dco_decode_RustOpaque_Arcpayjoin_ffiuriUrl(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ArcPayjoinFfiUriUrl.dcoDecode(raw as List<dynamic>);
  }

  @protected
  BoxFnVecU8ResultBoolPayjoinError
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynFnVecu8ResultboolPayjoinErrorSendSync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BoxFnVecU8ResultBoolPayjoinError.dcoDecode(raw as List<dynamic>);
  }

  @protected
  PayjoinFfiReceiveUncheckedProposal
      dco_decode_RustOpaque_payjoin_ffireceiveUncheckedProposal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PayjoinFfiReceiveUncheckedProposal.dcoDecode(raw as List<dynamic>);
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  ContextV1 dco_decode_box_autoadd_context_v_1(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_context_v_1(raw);
  }

  @protected
  ContextV2 dco_decode_box_autoadd_context_v_2(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_context_v_2(raw);
  }

  @protected
  Headers dco_decode_box_autoadd_headers(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_headers(raw);
  }

  @protected
  RequestBuilder dco_decode_box_autoadd_request_builder(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_request_builder(raw);
  }

  @protected
  RequestContext dco_decode_box_autoadd_request_context(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_request_context(raw);
  }

  @protected
  int dco_decode_box_autoadd_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_u_64(raw);
  }

  @protected
  int dco_decode_box_autoadd_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  UncheckedProposal dco_decode_box_autoadd_unchecked_proposal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_unchecked_proposal(raw);
  }

  @protected
  Uri dco_decode_box_autoadd_uri(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_uri(raw);
  }

  @protected
  Url dco_decode_box_autoadd_url(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_url(raw);
  }

  @protected
  ContextV1 dco_decode_context_v_1(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return ContextV1(
      field0: dco_decode_RustOpaque_Arcpayjoin_ffisendContextV1(arr[0]),
    );
  }

  @protected
  ContextV2 dco_decode_context_v_2(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return ContextV2(
      field0: dco_decode_RustOpaque_Arcpayjoin_ffisendv2ContextV2(arr[0]),
    );
  }

  @protected
  Headers dco_decode_headers(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return Headers(
      field0: dco_decode_Map_String_String(arr[0]),
    );
  }

  @protected
  List<int> dco_decode_list_prim_u_8_loose(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as List<int>;
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  List<(String, String)> dco_decode_list_record_string_string(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_record_string_string).toList();
  }

  @protected
  MaybeInputsOwned dco_decode_maybe_inputs_owned(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return MaybeInputsOwned(
      field0:
          dco_decode_RustOpaque_Arcpayjoin_ffireceiveMaybeInputsOwned(arr[0]),
    );
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  int? dco_decode_opt_box_autoadd_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_u_64(raw);
  }

  @protected
  int? dco_decode_opt_box_autoadd_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_u_8(raw);
  }

  @protected
  PayjoinError dco_decode_payjoin_error(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return PayjoinError_InvalidAddress(
          message: dco_decode_String(raw[1]),
        );
      case 1:
        return PayjoinError_InvalidScript(
          message: dco_decode_String(raw[1]),
        );
      case 2:
        return PayjoinError_NetworkValidation(
          message: dco_decode_String(raw[1]),
        );
      case 3:
        return PayjoinError_PsbtParseError(
          message: dco_decode_String(raw[1]),
        );
      case 4:
        return PayjoinError_ResponseError(
          message: dco_decode_String(raw[1]),
        );
      case 5:
        return PayjoinError_RequestError(
          message: dco_decode_String(raw[1]),
        );
      case 6:
        return PayjoinError_TransactionError(
          message: dco_decode_String(raw[1]),
        );
      case 7:
        return PayjoinError_ServerError(
          message: dco_decode_String(raw[1]),
        );
      case 8:
        return PayjoinError_SelectionError(
          message: dco_decode_String(raw[1]),
        );
      case 9:
        return PayjoinError_CreateRequestError(
          message: dco_decode_String(raw[1]),
        );
      case 10:
        return PayjoinError_PjParseError(
          message: dco_decode_String(raw[1]),
        );
      case 11:
        return PayjoinError_PjNotSupported(
          message: dco_decode_String(raw[1]),
        );
      case 12:
        return PayjoinError_ValidationError(
          message: dco_decode_String(raw[1]),
        );
      case 13:
        return PayjoinError_V2Error(
          message: dco_decode_String(raw[1]),
        );
      case 14:
        return PayjoinError_UnexpectedError(
          message: dco_decode_String(raw[1]),
        );
      case 15:
        return PayjoinError_OhttpError(
          message: dco_decode_String(raw[1]),
        );
      case 16:
        return PayjoinError_UrlError(
          message: dco_decode_String(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  (String, String) dco_decode_record_string_string(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_String(arr[0]),
      dco_decode_String(arr[1]),
    );
  }

  @protected
  Request dco_decode_request(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return Request(
      url: dco_decode_url(arr[0]),
      body: dco_decode_list_prim_u_8_strict(arr[1]),
    );
  }

  @protected
  RequestBuilder dco_decode_request_builder(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return RequestBuilder(
      field0: dco_decode_RustOpaque_Arcpayjoin_ffisendRequestBuilder(arr[0]),
    );
  }

  @protected
  RequestContext dco_decode_request_context(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return RequestContext(
      field0: dco_decode_RustOpaque_Arcpayjoin_ffisendRequestContext(arr[0]),
    );
  }

  @protected
  RequestContextV1 dco_decode_request_context_v_1(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return RequestContextV1(
      request: dco_decode_request(arr[0]),
      contextV1: dco_decode_context_v_1(arr[1]),
    );
  }

  @protected
  RequestContextV2 dco_decode_request_context_v_2(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return RequestContextV2(
      request: dco_decode_request(arr[0]),
      contextV2: dco_decode_context_v_2(arr[1]),
    );
  }

  @protected
  int dco_decode_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64OrU64(raw);
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  UncheckedProposal dco_decode_unchecked_proposal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return UncheckedProposal(
      field0: dco_decode_RustOpaque_payjoin_ffireceiveUncheckedProposal(arr[0]),
    );
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  Uri dco_decode_uri(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return Uri(
      field0: dco_decode_RustOpaque_Arcpayjoin_ffiuriUri(arr[0]),
    );
  }

  @protected
  Url dco_decode_url(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return Url(
      field0: dco_decode_RustOpaque_Arcpayjoin_ffiuriUrl(arr[0]),
    );
  }

  @protected
  int dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64OrU64(raw);
  }

  @protected
  BoxFnVecU8ResultBoolPayjoinError
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynFnVecu8ResultboolPayjoinErrorSendSync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return BoxFnVecU8ResultBoolPayjoinError.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Map<String, String> sse_decode_Map_String_String(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_record_string_string(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  ArcPayjoinFfiReceiveMaybeInputsOwned
      sse_decode_RustOpaque_Arcpayjoin_ffireceiveMaybeInputsOwned(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ArcPayjoinFfiReceiveMaybeInputsOwned.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ArcPayjoinFfiSendContextV1 sse_decode_RustOpaque_Arcpayjoin_ffisendContextV1(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ArcPayjoinFfiSendContextV1.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ArcPayjoinFfiSendRequestBuilder
      sse_decode_RustOpaque_Arcpayjoin_ffisendRequestBuilder(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ArcPayjoinFfiSendRequestBuilder.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ArcPayjoinFfiSendRequestContext
      sse_decode_RustOpaque_Arcpayjoin_ffisendRequestContext(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ArcPayjoinFfiSendRequestContext.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ArcPayjoinFfiSendV2ContextV2
      sse_decode_RustOpaque_Arcpayjoin_ffisendv2ContextV2(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ArcPayjoinFfiSendV2ContextV2.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ArcPayjoinFfiUriUri sse_decode_RustOpaque_Arcpayjoin_ffiuriUri(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ArcPayjoinFfiUriUri.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ArcPayjoinFfiUriUrl sse_decode_RustOpaque_Arcpayjoin_ffiuriUrl(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ArcPayjoinFfiUriUrl.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  BoxFnVecU8ResultBoolPayjoinError
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynFnVecu8ResultboolPayjoinErrorSendSync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return BoxFnVecU8ResultBoolPayjoinError.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  PayjoinFfiReceiveUncheckedProposal
      sse_decode_RustOpaque_payjoin_ffireceiveUncheckedProposal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return PayjoinFfiReceiveUncheckedProposal.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  ContextV1 sse_decode_box_autoadd_context_v_1(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_context_v_1(deserializer));
  }

  @protected
  ContextV2 sse_decode_box_autoadd_context_v_2(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_context_v_2(deserializer));
  }

  @protected
  Headers sse_decode_box_autoadd_headers(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_headers(deserializer));
  }

  @protected
  RequestBuilder sse_decode_box_autoadd_request_builder(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_request_builder(deserializer));
  }

  @protected
  RequestContext sse_decode_box_autoadd_request_context(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_request_context(deserializer));
  }

  @protected
  int sse_decode_box_autoadd_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_u_64(deserializer));
  }

  @protected
  int sse_decode_box_autoadd_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_u_8(deserializer));
  }

  @protected
  UncheckedProposal sse_decode_box_autoadd_unchecked_proposal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_unchecked_proposal(deserializer));
  }

  @protected
  Uri sse_decode_box_autoadd_uri(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_uri(deserializer));
  }

  @protected
  Url sse_decode_box_autoadd_url(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_url(deserializer));
  }

  @protected
  ContextV1 sse_decode_context_v_1(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_RustOpaque_Arcpayjoin_ffisendContextV1(deserializer);
    return ContextV1(field0: var_field0);
  }

  @protected
  ContextV2 sse_decode_context_v_2(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_RustOpaque_Arcpayjoin_ffisendv2ContextV2(deserializer);
    return ContextV2(field0: var_field0);
  }

  @protected
  Headers sse_decode_headers(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_Map_String_String(deserializer);
    return Headers(field0: var_field0);
  }

  @protected
  List<int> sse_decode_list_prim_u_8_loose(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  List<(String, String)> sse_decode_list_record_string_string(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(String, String)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_string_string(deserializer));
    }
    return ans_;
  }

  @protected
  MaybeInputsOwned sse_decode_maybe_inputs_owned(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_RustOpaque_Arcpayjoin_ffireceiveMaybeInputsOwned(
            deserializer);
    return MaybeInputsOwned(field0: var_field0);
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int? sse_decode_opt_box_autoadd_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_u_64(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int? sse_decode_opt_box_autoadd_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_u_8(deserializer));
    } else {
      return null;
    }
  }

  @protected
  PayjoinError sse_decode_payjoin_error(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_message = sse_decode_String(deserializer);
        return PayjoinError_InvalidAddress(message: var_message);
      case 1:
        var var_message = sse_decode_String(deserializer);
        return PayjoinError_InvalidScript(message: var_message);
      case 2:
        var var_message = sse_decode_String(deserializer);
        return PayjoinError_NetworkValidation(message: var_message);
      case 3:
        var var_message = sse_decode_String(deserializer);
        return PayjoinError_PsbtParseError(message: var_message);
      case 4:
        var var_message = sse_decode_String(deserializer);
        return PayjoinError_ResponseError(message: var_message);
      case 5:
        var var_message = sse_decode_String(deserializer);
        return PayjoinError_RequestError(message: var_message);
      case 6:
        var var_message = sse_decode_String(deserializer);
        return PayjoinError_TransactionError(message: var_message);
      case 7:
        var var_message = sse_decode_String(deserializer);
        return PayjoinError_ServerError(message: var_message);
      case 8:
        var var_message = sse_decode_String(deserializer);
        return PayjoinError_SelectionError(message: var_message);
      case 9:
        var var_message = sse_decode_String(deserializer);
        return PayjoinError_CreateRequestError(message: var_message);
      case 10:
        var var_message = sse_decode_String(deserializer);
        return PayjoinError_PjParseError(message: var_message);
      case 11:
        var var_message = sse_decode_String(deserializer);
        return PayjoinError_PjNotSupported(message: var_message);
      case 12:
        var var_message = sse_decode_String(deserializer);
        return PayjoinError_ValidationError(message: var_message);
      case 13:
        var var_message = sse_decode_String(deserializer);
        return PayjoinError_V2Error(message: var_message);
      case 14:
        var var_message = sse_decode_String(deserializer);
        return PayjoinError_UnexpectedError(message: var_message);
      case 15:
        var var_message = sse_decode_String(deserializer);
        return PayjoinError_OhttpError(message: var_message);
      case 16:
        var var_message = sse_decode_String(deserializer);
        return PayjoinError_UrlError(message: var_message);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  (String, String) sse_decode_record_string_string(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_String(deserializer);
    var var_field1 = sse_decode_String(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  Request sse_decode_request(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_url = sse_decode_url(deserializer);
    var var_body = sse_decode_list_prim_u_8_strict(deserializer);
    return Request(url: var_url, body: var_body);
  }

  @protected
  RequestBuilder sse_decode_request_builder(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_RustOpaque_Arcpayjoin_ffisendRequestBuilder(deserializer);
    return RequestBuilder(field0: var_field0);
  }

  @protected
  RequestContext sse_decode_request_context(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_RustOpaque_Arcpayjoin_ffisendRequestContext(deserializer);
    return RequestContext(field0: var_field0);
  }

  @protected
  RequestContextV1 sse_decode_request_context_v_1(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_request = sse_decode_request(deserializer);
    var var_contextV1 = sse_decode_context_v_1(deserializer);
    return RequestContextV1(request: var_request, contextV1: var_contextV1);
  }

  @protected
  RequestContextV2 sse_decode_request_context_v_2(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_request = sse_decode_request(deserializer);
    var var_contextV2 = sse_decode_context_v_2(deserializer);
    return RequestContextV2(request: var_request, contextV2: var_contextV2);
  }

  @protected
  int sse_decode_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint64();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  UncheckedProposal sse_decode_unchecked_proposal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_RustOpaque_payjoin_ffireceiveUncheckedProposal(deserializer);
    return UncheckedProposal(field0: var_field0);
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  Uri sse_decode_uri(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_RustOpaque_Arcpayjoin_ffiuriUri(deserializer);
    return Uri(field0: var_field0);
  }

  @protected
  Url sse_decode_url(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_RustOpaque_Arcpayjoin_ffiuriUrl(deserializer);
    return Url(field0: var_field0);
  }

  @protected
  int sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint64();
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynFnVecu8ResultboolPayjoinErrorSendSync(
          BoxFnVecU8ResultBoolPayjoinError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void sse_encode_Map_String_String(
      Map<String, String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_string_string(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_RustOpaque_Arcpayjoin_ffireceiveMaybeInputsOwned(
      ArcPayjoinFfiReceiveMaybeInputsOwned self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_Arcpayjoin_ffisendContextV1(
      ArcPayjoinFfiSendContextV1 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_Arcpayjoin_ffisendRequestBuilder(
      ArcPayjoinFfiSendRequestBuilder self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_Arcpayjoin_ffisendRequestContext(
      ArcPayjoinFfiSendRequestContext self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_Arcpayjoin_ffisendv2ContextV2(
      ArcPayjoinFfiSendV2ContextV2 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_Arcpayjoin_ffiuriUri(
      ArcPayjoinFfiUriUri self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_Arcpayjoin_ffiuriUrl(
      ArcPayjoinFfiUriUrl self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynFnVecu8ResultboolPayjoinErrorSendSync(
          BoxFnVecU8ResultBoolPayjoinError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_payjoin_ffireceiveUncheckedProposal(
      PayjoinFfiReceiveUncheckedProposal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_box_autoadd_context_v_1(
      ContextV1 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_context_v_1(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_context_v_2(
      ContextV2 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_context_v_2(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_headers(Headers self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_headers(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_request_builder(
      RequestBuilder self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_request_builder(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_request_context(
      RequestContext self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_request_context(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_u_64(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_64(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_8(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_unchecked_proposal(
      UncheckedProposal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_unchecked_proposal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_uri(Uri self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_uri(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_url(Url self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_url(self, serializer);
  }

  @protected
  void sse_encode_context_v_1(ContextV1 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_Arcpayjoin_ffisendContextV1(self.field0, serializer);
  }

  @protected
  void sse_encode_context_v_2(ContextV2 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_Arcpayjoin_ffisendv2ContextV2(
        self.field0, serializer);
  }

  @protected
  void sse_encode_headers(Headers self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Map_String_String(self.field0, serializer);
  }

  @protected
  void sse_encode_list_prim_u_8_loose(
      List<int> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer
        .putUint8List(self is Uint8List ? self : Uint8List.fromList(self));
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_list_record_string_string(
      List<(String, String)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_string_string(item, serializer);
    }
  }

  @protected
  void sse_encode_maybe_inputs_owned(
      MaybeInputsOwned self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_Arcpayjoin_ffireceiveMaybeInputsOwned(
        self.field0, serializer);
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_u_64(int? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_u_64(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_u_8(int? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_u_8(self, serializer);
    }
  }

  @protected
  void sse_encode_payjoin_error(PayjoinError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case PayjoinError_InvalidAddress(message: final message):
        sse_encode_i_32(0, serializer);
        sse_encode_String(message, serializer);
      case PayjoinError_InvalidScript(message: final message):
        sse_encode_i_32(1, serializer);
        sse_encode_String(message, serializer);
      case PayjoinError_NetworkValidation(message: final message):
        sse_encode_i_32(2, serializer);
        sse_encode_String(message, serializer);
      case PayjoinError_PsbtParseError(message: final message):
        sse_encode_i_32(3, serializer);
        sse_encode_String(message, serializer);
      case PayjoinError_ResponseError(message: final message):
        sse_encode_i_32(4, serializer);
        sse_encode_String(message, serializer);
      case PayjoinError_RequestError(message: final message):
        sse_encode_i_32(5, serializer);
        sse_encode_String(message, serializer);
      case PayjoinError_TransactionError(message: final message):
        sse_encode_i_32(6, serializer);
        sse_encode_String(message, serializer);
      case PayjoinError_ServerError(message: final message):
        sse_encode_i_32(7, serializer);
        sse_encode_String(message, serializer);
      case PayjoinError_SelectionError(message: final message):
        sse_encode_i_32(8, serializer);
        sse_encode_String(message, serializer);
      case PayjoinError_CreateRequestError(message: final message):
        sse_encode_i_32(9, serializer);
        sse_encode_String(message, serializer);
      case PayjoinError_PjParseError(message: final message):
        sse_encode_i_32(10, serializer);
        sse_encode_String(message, serializer);
      case PayjoinError_PjNotSupported(message: final message):
        sse_encode_i_32(11, serializer);
        sse_encode_String(message, serializer);
      case PayjoinError_ValidationError(message: final message):
        sse_encode_i_32(12, serializer);
        sse_encode_String(message, serializer);
      case PayjoinError_V2Error(message: final message):
        sse_encode_i_32(13, serializer);
        sse_encode_String(message, serializer);
      case PayjoinError_UnexpectedError(message: final message):
        sse_encode_i_32(14, serializer);
        sse_encode_String(message, serializer);
      case PayjoinError_OhttpError(message: final message):
        sse_encode_i_32(15, serializer);
        sse_encode_String(message, serializer);
      case PayjoinError_UrlError(message: final message):
        sse_encode_i_32(16, serializer);
        sse_encode_String(message, serializer);
    }
  }

  @protected
  void sse_encode_record_string_string(
      (String, String) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.$1, serializer);
    sse_encode_String(self.$2, serializer);
  }

  @protected
  void sse_encode_request(Request self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_url(self.url, serializer);
    sse_encode_list_prim_u_8_strict(self.body, serializer);
  }

  @protected
  void sse_encode_request_builder(
      RequestBuilder self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_Arcpayjoin_ffisendRequestBuilder(
        self.field0, serializer);
  }

  @protected
  void sse_encode_request_context(
      RequestContext self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_Arcpayjoin_ffisendRequestContext(
        self.field0, serializer);
  }

  @protected
  void sse_encode_request_context_v_1(
      RequestContextV1 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_request(self.request, serializer);
    sse_encode_context_v_1(self.contextV1, serializer);
  }

  @protected
  void sse_encode_request_context_v_2(
      RequestContextV2 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_request(self.request, serializer);
    sse_encode_context_v_2(self.contextV2, serializer);
  }

  @protected
  void sse_encode_u_64(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint64(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unchecked_proposal(
      UncheckedProposal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_payjoin_ffireceiveUncheckedProposal(
        self.field0, serializer);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_uri(Uri self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_Arcpayjoin_ffiuriUri(self.field0, serializer);
  }

  @protected
  void sse_encode_url(Url self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_Arcpayjoin_ffiuriUrl(self.field0, serializer);
  }

  @protected
  void sse_encode_usize(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint64(self);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }
}
